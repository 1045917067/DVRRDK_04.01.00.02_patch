From 450db3c821a7ee0db92e37644958b835c2f837f2 Mon Sep 17 00:00:00 2001
From: zzx <xiaohou1045917067@163.com>
Date: Mon, 20 Jun 2016 09:49:39 +0800
Subject: [PATCH 30/42] Migrate capture and display hardware configration to
 demos

---
 dvr_rdk/demos/link_api_demos/chains/Readme.txt     |  26 +
 .../demos/link_api_demos/chains/chains_CapDis.c    | 251 ---------
 .../link_api_demos/chains/chains_CapEncDecDis.c    | 380 -------------
 .../link_api_demos/chains/chains_CapSwMsDis.c      | 235 --------
 .../demos/link_api_demos/chains/chains_CapdspDis.c | 255 ---------
 ...ains_HD1Sii9233a_1Adv7441a_CapSwMsSii9022aDis.c | 346 ++++++++++++
 .../chains/chains_HD1Sii9233a_CapSwMsDis.c         | 247 +++++++++
 .../chains/chains_HD2Sii9233aCapSwMsSii9022aDis.c  | 300 ++++++++++
 ...3Gv7601_1Adv7441a_Mdin325a_CapSwMsSii9022aDis.c | 509 +++++++++++++++++
 .../chains/chains_HD4Gv7601CapSwMsSii9022aDis.c    | 248 +++++++++
 .../chains/chains_RecvFourDecSwMsDis.c             | 392 -------------
 .../link_api_demos/chains/chains_RecvOneDecDis.c   | 346 ------------
 .../chains/chains_SelCapNsfEncDecSwMsDis.c         | 338 -----------
 .../link_api_demos/chains/chains_SelCapSelRecv.c   | 616 ---------------------
 .../chains/chains_doubleChCapEncSend.c             | 352 ------------
 .../chains/chains_doubleChRecvDecDis.c             | 271 ---------
 .../chains/chains_singleChCapOsdDis.c              | 361 ------------
 dvr_rdk/demos/link_api_demos/common/MAKEFILE.MK    |   4 +-
 dvr_rdk/demos/link_api_demos/common/chains.h       |  25 +-
 dvr_rdk/demos/link_api_demos/common/chains_main.c  | 249 ++-------
 .../common/video_subsys/inc/adv7441a.h             |  12 +
 .../common/video_subsys/inc/i2c_dev.h              |  26 +
 .../common/video_subsys/inc/mdin325a.h             |  20 +
 .../common/video_subsys/inc/sii9233a.h             |  12 +
 .../common/video_subsys/inc/video_const.h          | 365 ++++++++++++
 .../common/video_subsys/inc/video_subdev.h         | 114 ++++
 .../common/video_subsys/inc/video_timing.h         |  46 ++
 .../common/video_subsys/lib/libmdin325a.a          | Bin 0 -> 139856 bytes
 .../common/video_subsys/lib/libvideosubdev.a       | Bin 0 -> 44294 bytes
 .../interfaces/common_def/ti_vdis_common_def.h     |   3 +
 dvr_rdk/mcfw/src_linux/devices/inc/device.h        |   6 +
 .../src_linux/devices/sii9233a/src/sii9233a_api.c  |   2 +-
 dvr_rdk/mcfw/src_linux/devices/src/devices.c       | 256 ---------
 .../src_linux/devices/tvp5158/src/tvp5158_api.c    |   2 +-
 dvr_rdk/mcfw/src_linux/mcfw_api/ti_vcap.c          |  96 ----
 dvr_rdk/mcfw/src_linux/mcfw_api/ti_vcap_device.c   |  12 +-
 .../mcfw/src_linux/mcfw_api/ti_vcap_device_priv.h  |   2 +
 dvr_rdk/mcfw/src_linux/mcfw_api/ti_vdis.c          |  98 +---
 38 files changed, 2377 insertions(+), 4446 deletions(-)
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/Readme.txt
 delete mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_CapDis.c
 delete mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_CapEncDecDis.c
 delete mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_CapSwMsDis.c
 delete mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_CapdspDis.c
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_HD1Sii9233a_1Adv7441a_CapSwMsSii9022aDis.c
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_HD1Sii9233a_CapSwMsDis.c
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_HD2Sii9233aCapSwMsSii9022aDis.c
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_HD3Gv7601_1Adv7441a_Mdin325a_CapSwMsSii9022aDis.c
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_HD4Gv7601CapSwMsSii9022aDis.c
 delete mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_RecvFourDecSwMsDis.c
 delete mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_RecvOneDecDis.c
 delete mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_SelCapNsfEncDecSwMsDis.c
 delete mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_SelCapSelRecv.c
 delete mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_doubleChCapEncSend.c
 delete mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_doubleChRecvDecDis.c
 delete mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_singleChCapOsdDis.c
 create mode 100755 dvr_rdk/demos/link_api_demos/common/video_subsys/inc/adv7441a.h
 create mode 100755 dvr_rdk/demos/link_api_demos/common/video_subsys/inc/i2c_dev.h
 create mode 100755 dvr_rdk/demos/link_api_demos/common/video_subsys/inc/mdin325a.h
 create mode 100755 dvr_rdk/demos/link_api_demos/common/video_subsys/inc/sii9233a.h
 create mode 100755 dvr_rdk/demos/link_api_demos/common/video_subsys/inc/video_const.h
 create mode 100755 dvr_rdk/demos/link_api_demos/common/video_subsys/inc/video_subdev.h
 create mode 100755 dvr_rdk/demos/link_api_demos/common/video_subsys/inc/video_timing.h
 create mode 100755 dvr_rdk/demos/link_api_demos/common/video_subsys/lib/libmdin325a.a
 create mode 100755 dvr_rdk/demos/link_api_demos/common/video_subsys/lib/libvideosubdev.a

diff --git a/dvr_rdk/demos/link_api_demos/chains/Readme.txt b/dvr_rdk/demos/link_api_demos/chains/Readme.txt
new file mode 100644
index 0000000..a02f39b
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/Readme.txt
@@ -0,0 +1,26 @@
+-------------------------------------------------------------------------------
+file:	chainsHD1Sii9233a_1Adv7441a_CapSwMsSii9022aDis.c
+input:	1 Sii9233a + 1 Adv7441a
+output:	1 onchipHdmi + 1 Sii9022a
+board: ti8168vcs 
+-------------------------------------------------------------------------------
+file:	chainsHD1Sii9233a_CapSwMsDis.c
+input:	1 Sii9233a
+output:	1 onchipHdmi
+board: ti8107ins 
+-------------------------------------------------------------------------------
+file:	chainsHD2Sii9233aCapSwMsSii9022aDis.c
+input:	2 Sii9233a
+output:	1 onchipHdmi + 1 Sii9022a
+board: ti8168etv + hdmi DC
+-------------------------------------------------------------------------------
+file:	chainsHD3Gv7601_1Adv7441a_Mdin325a_CapSwMsSii9022aDis.c
+input:	3 Gv7601 + 1 Adv7441a
+output:	1 onchipHdmi + 1 Sii9022a
+board: ti8168vrs
+-------------------------------------------------------------------------------
+file:	chainsHD4Gv7601CapSwMsSii9022aDis.c
+input:	4 Gv7601
+output:	1 onchipHdmi + 1 Sii9022a
+board: ti81688etv + sdi DC
+-------------------------------------------------------------------------------
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_CapDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_CapDis.c
deleted file mode 100644
index 6048694..0000000
--- a/dvr_rdk/demos/link_api_demos/chains/chains_CapDis.c
+++ /dev/null
@@ -1,251 +0,0 @@
-/** =====================================================================
- * chains_CapDis.c
- *
- * Author	: zzx
- * Date		: June 24, 2013
- * Discription:	Cap + Dis
- *	
- *	capture->display 
- *  =====================================================================
- */
-
-/* -------------------- Include user headers   ------------------------ */
-
-#include <mcfw/interfaces/ti_vcap.h>
-#include <demos/link_api_demos/common/chains.h>
-
-Void Chains_CapDis(Chains_Ctrl *chainsCfg)
-{
-
-	CaptureLink_CreateParams	capturePrm;
-	CaptureLink_VipInstParams	*pCaptureInstPrm;
-	CaptureLink_OutParams		*pCaptureOutPrm;	
-	DisplayLink_CreateParams	displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-
-	Uint32 captureId,vipInstId;
-	Uint32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
-	Uint32 i;
-
-	CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
-	for(i = 0; i < CHAINS_SW_MS_MAX_DISPLAYS; i++)
-	{
-		CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
-	}
-
-	captureId		= SYSTEM_LINK_ID_CAPTURE;
-	displayId[0] 	= SYSTEM_LINK_ID_DISPLAY_0;	
-	displayId[1] 	= SYSTEM_LINK_ID_DISPLAY_1;	
-	displayId[2] 	= SYSTEM_LINK_ID_DISPLAY_2;	
-
-
-	for(i = 0;i < gChains_ctrl.chRecNum; i++)
-	{
-		gChains_ctrl.chCfg[i + gChains_ctrl.chCapNum].channel = i;
-	}
-
-
-	/*
-	 * cap + dis
-	 */
-	VCAP_PARAMS_S  prm;
-	Vcap_params_init(&prm);
-	if(chainsCfg->chCapNum > 0)
-	{
-
-		capturePrm.numVipInst				= chainsCfg->chCapNum;
-		capturePrm.tilerEnable              = FALSE;
-		capturePrm.numBufsPerCh             = 16;
-		capturePrm.numExtraBufs             = 0;
-		capturePrm.maxBlindAreasPerCh       = 0;
-		capturePrm.isPalMode                = FALSE;
-		capturePrm.enableSdCrop             = FALSE;
-		capturePrm.doCropInCapture          = FALSE;
-
-		for(i = 0; i < capturePrm.numVipInst; i++)
-		{
-
-#if defined(TI816X_ETVH)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-#if defined(TI816X_ETVS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
-			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
-#endif
-#if defined(TI8107_INS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-
-			prm.channelParams[i].deviceId		= vipInstId;
-
-			prm.enableConfigExtVideoDecoder 	= TRUE;
-			prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
-
-			pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
-			pCaptureInstPrm->inScanFormat		= SYSTEM_SF_PROGRESSIVE;
-			pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
-			pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
-			pCaptureInstPrm->numOutput			= 1;
-			pCaptureInstPrm->numChPerOutput		= 1;
-			
-			pCaptureOutPrm						= &pCaptureInstPrm->outParams[0];
-			pCaptureOutPrm->dataFormat			= SYSTEM_DF_YUV422I_YUYV;
-			pCaptureOutPrm->scEnable			= FALSE;
-			pCaptureOutPrm->outQueId			= i;
-
-			
-			capturePrm.outQueParams[i].nextLink	= displayId[i];
-		}
-
-	}
-	/****************************************************************/
-
-	if(chainsCfg->chRecNum > 0)
-	{
-		for(i = chainsCfg->chCapNum;i < chainsCfg->chNum; i++)
-		{
-			chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
-		}
-
-		Chains_displayCtrlInit(chainsCfg->displayRes);
-
-		for(i = 0; i < chainsCfg->chRecNum; i++)
-		{
-			displayPrm[i].numInputQueues					= 1;
-			displayPrm[i].activeQueue						= 0;
-			displayPrm[i].inQueParams[0].prevLinkId			= captureId;
-			displayPrm[i].inQueParams[0].prevLinkQueId		= i;
-			displayPrm[i].displayRes						= chainsCfg->displayRes[i];
-			displayPrm[i].maxDriverQueLength           		= DISPLAY_LINK_MAX_DRIVER_QUEUE_LENGTH_DEFAULT;
-			displayPrm[i].displayId                    		= DISPLAY_LINK_DISPLAY_AUTO_SELECT;
-			displayPrm[i].forceFieldSeparatedInputMode		= FALSE;
-		}
-	}
-	/* Link create */
-	if(chainsCfg->chCapNum > 0)
-	{
-		System_linkCreate(captureId,&capturePrm,sizeof(capturePrm));
-	}
-
-	if(chainsCfg->chRecNum > 0)
-	{
-		for(i = 0; i< chainsCfg->chRecNum; i++)
-		{
-			System_linkCreate(displayId[i],&displayPrm[i],sizeof(displayPrm[i]));
-		}
-	}
-
-	/* link start */
-	if(chainsCfg->chRecNum > 0)
-	{
-		Vdis_start();
-		for(i = 0; i< chainsCfg->chRecNum; i++)
-		{
-			System_linkStart(displayId[i]);
-		}
-	}
-	if(chainsCfg->chCapNum > 0)
-	{
-		Vcap_init(&prm);
-		Vcap_start();
-		System_linkStart(captureId);
-	}
-
-	while(1)
-	{
-		char ch;
-		ch = Chains_menuRunTime();
-		if(ch=='0')
-			break;
-	
-		if(ch == '1') 
-		{
-			if(captureId!=SYSTEM_LINK_ID_INVALID)
-			{
-				System_linkControl(captureId,
-						CAPTURE_LINK_CMD_PRINT_ADV_STATISTICS,
-						NULL, 0, TRUE);
-			}
-
-
-			for(i=0; i<OSA_ARRAYSIZE(displayId); i++)
-			{
-				if(displayId[i]!=SYSTEM_LINK_ID_INVALID)
-				{
-					System_linkControl(displayId[i],
-							DISPLAY_LINK_CMD_PRINT_STATISTICS,
-							NULL, 0, TRUE);
-				}
-			}
-
-
-			OSA_waitMsecs(3000); // allow for print to complete
-
-			UInt32 gChains_enabledProcs[] = {
-				SYSTEM_LINK_ID_M3VPSS,
-				SYSTEM_LINK_ID_M3VIDEO,
-				SYSTEM_LINK_ID_DSP,
-			};
-
-			for(i=0; i<sizeof(gChains_enabledProcs)/sizeof(gChains_enabledProcs[0]); i++)
-			{
-				SystemCommon_PrintStatus printStatus;
-
-				memset(&printStatus, 0, sizeof(printStatus));
-
-				printStatus.printCpuLoad = TRUE;
-				printStatus.printTskLoad = TRUE;
-				System_linkControl(
-						gChains_enabledProcs[i],
-						SYSTEM_COMMON_CMD_PRINT_STATUS,
-						&printStatus,
-						sizeof(printStatus),
-						TRUE);
-				System_linkControl(
-						gChains_enabledProcs[i],
-						SYSTEM_COMMON_CMD_CPU_LOAD_CALC_RESET,
-						NULL,
-						0,
-						TRUE);
-
-			}
-		}
-	}
-
-
-
-	/* link stop */
-	if(chainsCfg->chCapNum > 0)
-	{
-		Vcap_stop();
-		System_linkStop(captureId);
-	}
-	if(chainsCfg->chRecNum > 0)
-	{
-		Vdis_stop();
-		for(i = 0; i < chainsCfg->chRecNum; i++)
-		{
-			System_linkStop(displayId[i]);
-		}
-	}
-	/* link delete */	
-	if(chainsCfg->chCapNum > 0)
-	{
-		System_linkDelete(captureId);
-	}
-	if(chainsCfg->chRecNum > 0)
-	{
-		for(i = 0; i < chainsCfg->chRecNum; i++)
-		{
-			System_linkDelete(displayId[i]);
-		}
-
-		Chains_displayCtrlDeInit();
-	}
-
-}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_CapEncDecDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_CapEncDecDis.c
deleted file mode 100644
index a80c3a5..0000000
--- a/dvr_rdk/demos/link_api_demos/chains/chains_CapEncDecDis.c
+++ /dev/null
@@ -1,380 +0,0 @@
-/** ============================================================================
- *
- *  chains_CapEncDecDis.c
- *
- *  Author     : zzx
- *
- *  Date       : June 26, 2013
- *
- *  Description: 
- *
- *  Cap + Enc + Dec + Dis
- *  ============================================================================
- */
-
-/*  --------------------- Include user headers   ---------------------------- */
-
-#include <mcfw/interfaces/ti_vcap.h>
-#include <demos/link_api_demos/common/chains.h>
-
-
-#if defined(__cplusplus)
-extern "C" {
-#endif
-
-static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
-{
-	.isPopulated = 1,
-	.ivaMap[0] =
-	{
-		.EncNumCh  = 1,
-		.EncChList = {0},
-		.DecNumCh  = 0,
-		.DecChList = {0},
-	},
-	.ivaMap[1] =
-	{
-		.EncNumCh  = 0,
-		.EncChList = {0},
-		.DecNumCh  = 1,
-		.DecChList = {0},
-	},
-	.ivaMap[2] =
-	{
-		.EncNumCh  = 1,
-		.EncChList = {1},
-		.DecNumCh  = 1,
-		.DecChList = {1},
-	},
-};
-
-
-Void Chains_CapEncDecDis(Chains_Ctrl *chainsCfg)
-{
-	CaptureLink_CreateParams	capturePrm;
-	CaptureLink_VipInstParams	*pCaptureInstPrm;
-	CaptureLink_OutParams		*pCaptureOutPrm;	
-	IpcLink_CreateParams		ipcOutVpssPrm;
-	IpcLink_CreateParams		ipcInVideoPrm;
-	EncLink_CreateParams		encPrm;
-
-	DecLink_CreateParams		decPrm;
-	IpcLink_CreateParams		ipcOutVideoPrm;
-	IpcLink_CreateParams		ipcInVpssPrm;
-	SwMsLink_CreateParams		swMsPrm;	
-	DisplayLink_CreateParams	displayPrm;	
-
-
-	Uint32 captureId,vipInstId;
-	Uint32 ipcOutVpssId;
-	Uint32 ipcInVideoId;
-	Uint32 encId;
-	Uint32 decId;
-	Uint32 ipcOutVideoId;
-	Uint32 ipcInVpssId;
-	Uint32 swMsId;
-	Uint32 displayId;
-
-	CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
-	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVpssPrm);
-	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVideoPrm);
-	CHAINS_INIT_STRUCT(EncLink_CreateParams,encPrm);
-
-
-	CHAINS_INIT_STRUCT(DecLink_CreateParams,decPrm);
-	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoPrm);
-	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssPrm);
-	CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm);
-	CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm);
-
-	captureId		= SYSTEM_LINK_ID_CAPTURE;
-	ipcOutVpssId 	= SYSTEM_VPSS_LINK_ID_IPC_OUT_M3_0;
-	ipcInVideoId	= SYSTEM_VIDEO_LINK_ID_IPC_IN_M3_0;
-	encId			= SYSTEM_LINK_ID_VENC_0;
-
-	decId			= SYSTEM_LINK_ID_VDEC_0;
-	ipcOutVideoId	= SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_0; 
-	ipcInVpssId		= SYSTEM_VPSS_LINK_ID_IPC_IN_M3_0;
-	swMsId			= SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
-	displayId		= SYSTEM_LINK_ID_DISPLAY_0;	
-
-	/****************************************************************/
-
-	int i;
-
-	for(i = 0;i < gChains_ctrl.chRecNum; i++)
-	{
-		gChains_ctrl.chCfg[i + gChains_ctrl.chCapNum].channel = i;
-	}
-
-	System_linkControl(
-			SYSTEM_LINK_ID_M3VIDEO,
-			SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
-			&systemVid_encDecIvaChMapTbl,
-			sizeof(SystemVideo_Ivahd2ChMap_Tbl),
-			TRUE
-			);
-
-
-	/*
-	 * cap + Enc + Dec + dis
-	 */
-	VCAP_PARAMS_S  prm;
-	Vcap_params_init(&prm);
-	if(chainsCfg->chCapNum > 0)
-	{
-		capturePrm.numVipInst					= chainsCfg->chCapNum;
-		capturePrm.tilerEnable              = FALSE;
-		capturePrm.numBufsPerCh             = 16;
-		capturePrm.numExtraBufs             = 0;
-		capturePrm.maxBlindAreasPerCh       = 0;
-		capturePrm.isPalMode                = FALSE;
-		capturePrm.enableSdCrop             = FALSE;
-		capturePrm.doCropInCapture          = FALSE;
-
-		int ch;
-
-		for(i = 0; i < capturePrm.numVipInst; i++)
-		{
-#if defined(TI816X_ETVH)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-#if defined(TI816X_ETVS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
-			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
-#endif
-#if defined(TI8107_INS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-		
-			prm.channelParams[i].deviceId		= vipInstId;
-			prm.enableConfigExtVideoDecoder 	= TRUE;
-			prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
-			
-			pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
-			pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
-			pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
-			pCaptureInstPrm->numOutput			= 1;
-			pCaptureInstPrm->numChPerOutput		= 1;
-
-			pCaptureOutPrm						= &pCaptureInstPrm->outParams[0];
-			pCaptureOutPrm->dataFormat			= SYSTEM_DF_YUV420SP_UV;
-			pCaptureOutPrm->scEnable			= FALSE;
-			pCaptureOutPrm->outQueId			= 0;
-
-		}
-		capturePrm.outQueParams[0].nextLink		= ipcOutVpssId;
-
-		/****************************************************************/
-
-		ipcOutVpssPrm.inQueParams.prevLinkId 		= captureId;
-		ipcOutVpssPrm.inQueParams.prevLinkQueId		= 0;
-		ipcOutVpssPrm.outQueParams[0].nextLink		= ipcInVideoId;
-		ipcOutVpssPrm.numOutQue						= 1;
-		ipcOutVpssPrm.notifyNextLink				= TRUE;
-		ipcOutVpssPrm.notifyPrevLink				= FALSE;
-		ipcOutVpssPrm.noNotifyMode					= FALSE;
-		ipcOutVpssPrm.numChPerOutQue[0]				= 0;
-		ipcOutVpssPrm.equallyDivideChAcrossOutQues	= FALSE;
-
-
-		ipcInVideoPrm.inQueParams.prevLinkId 		= ipcOutVpssId;
-		ipcInVideoPrm.inQueParams.prevLinkQueId		= 0;
-		ipcInVideoPrm.outQueParams[0].nextLink		= encId;
-		ipcInVideoPrm.numOutQue						= 1;
-		ipcInVideoPrm.notifyNextLink				= TRUE;
-		ipcInVideoPrm.notifyPrevLink				= FALSE;
-		ipcInVideoPrm.noNotifyMode					= FALSE;
-		ipcInVideoPrm.numChPerOutQue[0]				= 0;
-		ipcInVideoPrm.equallyDivideChAcrossOutQues	= FALSE;
-
-		for(i = 0; i< chainsCfg->chCapNum; i++)
-		{
-			encPrm.chCreateParams[i].format					= chainsCfg->chCfg[i].encFormat;
-			encPrm.chCreateParams[i].profile				= chainsCfg->chCfg[i].encProfile;
-			encPrm.chCreateParams[i].dataLayout				= IVIDEO_FIELD_SEPARATED;
-			encPrm.chCreateParams[i].encodingPreset 		= XDM_USER_DEFINED;
-			encPrm.chCreateParams[i].rateControlPreset		= IVIDEO_USER_DEFINED;
-			encPrm.chCreateParams[i].enableHighSpeed		= FALSE;
-			encPrm.chCreateParams[i].defaultDynamicParams.interFrameInterval  = 1;
-			encPrm.chCreateParams[i].defaultDynamicParams.intraFrameInterval  = chainsCfg->chCfg[i].intraFrameInterval;
-			encPrm.chCreateParams[i].defaultDynamicParams.inputFrameRate      = chainsCfg->chCfg[i].inFrameRate;
-			encPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate     = chainsCfg->chCfg[i].encFrameRate;
-			encPrm.chCreateParams[i].defaultDynamicParams.targetBitRate       = chainsCfg->chCfg[i].bitRate;
-			encPrm.chCreateParams[i].defaultDynamicParams.mvAccuracy          = IVIDENC2_MOTIONVECTOR_QUARTERPEL;
-			encPrm.chCreateParams[i].defaultDynamicParams.rcAlg               = chainsCfg->chCfg[i].rateCtrl;
-			encPrm.chCreateParams[i].defaultDynamicParams.qpMin               = 0;
-			encPrm.chCreateParams[i].defaultDynamicParams.qpMax               = 51;
-			encPrm.chCreateParams[i].defaultDynamicParams.qpInit              = -1;
-			encPrm.chCreateParams[i].defaultDynamicParams.vbrDuration         = 8;
-			encPrm.chCreateParams[i].defaultDynamicParams.vbrSensitivity      = 0;
-
-		}
-		encPrm.inQueParams.prevLinkId 				= ipcInVideoId;
-		encPrm.inQueParams.prevLinkQueId			= 0;
-		encPrm.outQueParams.nextLink				= decId;
-		encPrm.numBufPerCh[0]						= 0;
-	}
-	/****************************************************************/
-	if(chainsCfg->chRecNum > 0)
-	{
-	
-		for(i = chainsCfg->chCapNum; i < chainsCfg->chNum; i++)
-		{
-			chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
-		}
-
-		Chains_displayCtrlInit(chainsCfg->displayRes);
-
-		for (i=0; i<chainsCfg->chRecNum; i++) 
-		{
-			decPrm.chCreateParams[i].format                               = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
-			decPrm.chCreateParams[i].profile                              = IH264VDEC_PROFILE_ANY;
-			decPrm.chCreateParams[i].targetMaxWidth                       = chainsCfg->chCfg[i + chainsCfg->chCapNum].inWidth;
-			decPrm.chCreateParams[i].targetMaxHeight                      = chainsCfg->chCfg[i + chainsCfg->chCapNum].inHeight;
-			decPrm.chCreateParams[i].fieldMergeDecodeEnable               = FALSE;
-			decPrm.chCreateParams[i].algCreateStatus                      = DEC_LINK_ALG_CREATE_STATUS_CREATE;
-			decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFrameRate;
-			decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate   = chainsCfg->chCfg[i + chainsCfg->chCapNum].bitRate;
-			decPrm.chCreateParams[i].numBufPerCh                          = 0;
-			decPrm.chCreateParams[i].tilerEnable                          = TRUE;
-		}
-
-		decPrm.inQueParams.prevLinkId		= encId;
-		decPrm.inQueParams.prevLinkQueId	= 0;
-		decPrm.outQueParams.nextLink		= ipcOutVideoId;
-
-		ipcOutVideoPrm.inQueParams.prevLinkId		= decId;
-		ipcOutVideoPrm.inQueParams.prevLinkQueId	= 0;	
-		ipcOutVideoPrm.outQueParams[0].nextLink		= ipcInVpssId;;
-		ipcOutVideoPrm.numOutQue					= 1;
-		ipcOutVideoPrm.notifyNextLink				= TRUE;
-		ipcOutVideoPrm.notifyPrevLink				= FALSE;
-		ipcOutVideoPrm.noNotifyMode					= FALSE;
-
-
-		ipcInVpssPrm.inQueParams.prevLinkId			= ipcOutVideoId;
-		ipcInVpssPrm.inQueParams.prevLinkQueId		= 0;
-		ipcInVpssPrm.outQueParams[0].nextLink		= swMsId;
-		ipcInVpssPrm.numOutQue						= 1;
-		ipcInVpssPrm.notifyNextLink					= TRUE;
-		ipcInVpssPrm.notifyPrevLink					= FALSE;
-		ipcInVpssPrm.noNotifyMode					= FALSE;
-
-		swMsPrm.numSwMsInst               = 1;
-		swMsPrm.swMsInstId[0]             = SYSTEM_SW_MS_SC_INST_VIP1_SC;
-		swMsPrm.inQueParams.prevLinkId    = ipcInVpssId;
-		swMsPrm.inQueParams.prevLinkQueId = 0;
-		swMsPrm.outQueParams.nextLink     = displayId;
-		swMsPrm.lineSkipMode              = FALSE;
-		swMsPrm.enableLayoutGridDraw      = TRUE;
-		swMsPrm.layoutPrm.outputFPS       = chainsCfg->chCfg[0+chainsCfg->chCapNum].encFrameRate;
-		swMsPrm.maxInputQueLen            = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
-		swMsPrm.maxOutRes                 = chainsCfg->displayRes[0];
-		swMsPrm.numOutBuf                 = 0;
-		Chains_swMsGenerateLayoutParams(0, 2, &swMsPrm);
-
-		displayPrm.numInputQueues					= 1;
-		displayPrm.activeQueue						= 0;
-		displayPrm.inQueParams[0].prevLinkId		= swMsId;
-		displayPrm.inQueParams[0].prevLinkQueId		= 0;
-		displayPrm.displayRes						= chainsCfg->displayRes[0];
-		displayPrm.forceFieldSeparatedInputMode		= FALSE;
-	
-	}
-
-	/* Link create */
-	if(chainsCfg->chCapNum > 0)
-	{
-		System_linkCreate(captureId,&capturePrm,sizeof(capturePrm));
-		System_linkCreate(ipcOutVpssId,&ipcOutVpssPrm,sizeof(ipcOutVpssPrm));
-		System_linkCreate(ipcInVideoId,&ipcInVideoPrm,sizeof(ipcInVideoPrm));
-		System_linkCreate(encId,&encPrm,sizeof(encPrm));
-	}
-
-	if(chainsCfg->chRecNum > 0)
-	{
-		System_linkCreate(decId,&decPrm,sizeof(decPrm));
-		System_linkCreate(ipcOutVideoId,&ipcOutVideoPrm,sizeof(ipcOutVideoPrm));
-		System_linkCreate(ipcInVpssId,&ipcInVpssPrm,sizeof(ipcInVpssPrm));
-		System_linkCreate(swMsId,&swMsPrm,sizeof(swMsPrm));
-		System_linkCreate(displayId,&displayPrm,sizeof(displayPrm));
-	
-	}
-
-	/* link start */
-	if(chainsCfg->chRecNum > 0)
-	{
-		Vdis_start();
-		System_linkStart(displayId);
-		System_linkStart(swMsId);
-		System_linkStart(ipcInVpssId);
-		System_linkStart(ipcOutVideoId);
-		System_linkStart(decId);
-	}
-	if(chainsCfg->chCapNum > 0)
-	{
-		Vcap_init(&prm);
-		Vcap_start();
-		System_linkStart(encId);
-		System_linkStart(ipcInVideoId);
-		System_linkStart(ipcOutVpssId);
-		System_linkStart(captureId);
-	}
-
-	while(1)
-	{
-		char ch;
-		ch = Chains_menuRunTime();
-		if(ch=='0')
-			break;
-	}
-
-	/* link stop */
-	if(chainsCfg->chCapNum > 0)
-	{
-		Vcap_stop();
-		System_linkStop(captureId);
-		System_linkStop(ipcOutVpssId);
-		System_linkStop(ipcInVideoId);
-		System_linkStop(encId);
-	}
-	if(chainsCfg->chRecNum > 0)
-	{
-		System_linkStop(decId);
-		System_linkStop(ipcOutVideoId);
-		System_linkStop(ipcInVpssId);
-		System_linkStop(swMsId);
-		Vdis_stop();
-		System_linkStop(displayId);
-	}
-	/* link delete */	
-	if(chainsCfg->chCapNum > 0)
-	{
-		System_linkDelete(captureId);
-		System_linkDelete(ipcOutVpssId);
-		System_linkDelete(ipcInVideoId);
-		System_linkDelete(encId);
-	}
-	if(chainsCfg->chRecNum > 0)
-	{
-		System_linkDelete(decId);
-		System_linkDelete(ipcOutVideoId);
-		System_linkDelete(ipcInVpssId);
-		System_linkDelete(swMsId);
-		System_linkDelete(displayId);
-
-		Chains_displayCtrlDeInit();
-	}
-}
-
-
-#if defined(__cplusplus)
-}
-#endif
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_CapSwMsDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_CapSwMsDis.c
deleted file mode 100644
index 2f4cfa2..0000000
--- a/dvr_rdk/demos/link_api_demos/chains/chains_CapSwMsDis.c
+++ /dev/null
@@ -1,235 +0,0 @@
-/** ============================================================================
- *
- *  chains_CapSwMsDis.c
- *
- *  Author     : zzx
- *
- *  Date       : June 25, 2013
- *
- *  Description:	Cap + SwMs + Dis
- *
- *  capture->swMs->display
- *  ============================================================================
- */
-
-/*  --------------------- Include user headers   ---------------------------- */
-
-#include <mcfw/interfaces/ti_vcap.h>
-#include <demos/link_api_demos/common/chains.h>
-
-Void Chains_CapSwMsDis(Chains_Ctrl *chainsCfg)
-{
-
-	CaptureLink_CreateParams	capturePrm;
-	CaptureLink_VipInstParams	*pCaptureInstPrm;
-	CaptureLink_OutParams       *pCaptureOutPrm;
-	DupLink_CreateParams                dupPrm;
-	SwMsLink_CreateParams		swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-	DisplayLink_CreateParams	displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-
-	Uint32 captureId,vipInstId;
-	UInt32 dupId;
-	Uint32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
-	Uint32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
-	Uint32 i;
-
-	CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
-
-	for(i = 0; i < CHAINS_SW_MS_MAX_DISPLAYS; i++)
-	{
-		CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
-		CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
-
-	}
-	captureId 		= SYSTEM_LINK_ID_CAPTURE;
-	dupId           =SYSTEM_VPSS_LINK_ID_DUP_0;
-	swMsId[0] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
-	swMsId[1] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
-	swMsId[2] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_2;
-	displayId[0]	= SYSTEM_LINK_ID_DISPLAY_0;
-	displayId[1]	= SYSTEM_LINK_ID_DISPLAY_1;
-	displayId[2]	= SYSTEM_LINK_ID_DISPLAY_2;
-
-
-
-	for(i = 0; i < gChains_ctrl.chRecNum; i++)
-	{
-		gChains_ctrl.chCfg[i + gChains_ctrl.chCapNum].channel = i;
-
-	}
-
-	/* capture + swMs + display */
-
-	VCAP_PARAMS_S  prm;
-	Vcap_params_init(&prm);
-	if(chainsCfg->chCapNum > 0)
-	{
-		capturePrm.numVipInst 				= chainsCfg->chCapNum;
-		capturePrm.tilerEnable              = FALSE;
-		capturePrm.numBufsPerCh             = 16;
-		capturePrm.numExtraBufs             = 0;
-		capturePrm.maxBlindAreasPerCh       = 0;
-		capturePrm.isPalMode                = FALSE;
-		capturePrm.enableSdCrop             = FALSE;
-		capturePrm.doCropInCapture          = FALSE;
-
-		int ch;
-
-		for(i = 0; i< capturePrm.numVipInst; i++)
-		{
-			
-#if defined(TI816X_ETVH)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-#if defined(TI816X_ETVS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
-			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
-#endif
-#if defined(TI8107_INS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-
-			prm.channelParams[i].deviceId		= vipInstId;
-			prm.enableConfigExtVideoDecoder 	= TRUE;
-			prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
-
-			pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
-			pCaptureInstPrm->inScanFormat		= SYSTEM_SF_PROGRESSIVE;
-			pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
-			pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
-			pCaptureInstPrm->numOutput			= 1;
-
-			pCaptureOutPrm						= &pCaptureInstPrm->outParams[0];
-			pCaptureOutPrm->dataFormat			= SYSTEM_DF_YUV422I_YUYV;
-			pCaptureOutPrm->scEnable			= FALSE;
-			pCaptureOutPrm->outQueId			= 0;
-
-			capturePrm.outQueParams[0].nextLink	= dupId;
-		}
-	}
-	/*********************************************************************/
-	dupPrm.inQueParams.prevLinkId           = captureId;
-	dupPrm.inQueParams.prevLinkQueId        = 0;
-	dupPrm.numOutQue                        = chainsCfg->chRecNum;
-	dupPrm.outQueParams[0].nextLink         = swMsId[0];
-	dupPrm.outQueParams[1].nextLink         = swMsId[1];
-	dupPrm.notifyNextLink                   = TRUE;
-
-	if(chainsCfg->chRecNum > 0)
-	{
-
-		for(i = chainsCfg->chCapNum; i < chainsCfg->chNum; i++)
-		{
-			chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
-		}
-		
-		Chains_displayCtrlInit(chainsCfg->displayRes);
-
-		for(i = 0; i< chainsCfg->chRecNum; i++)
-		{
-			swMsPrm[i].numSwMsInst					= 1;
-			swMsPrm[i].swMsInstId[0]				= (0 == i)? SYSTEM_SW_MS_SC_INST_DEIHQ_SC_NO_DEI: SYSTEM_SW_MS_SC_INST_DEI_SC_NO_DEI;
-			swMsPrm[i].inQueParams.prevLinkId		= dupId;
-			swMsPrm[i].inQueParams.prevLinkQueId	= i;
-			swMsPrm[i].outQueParams.nextLink		= displayId[i];
-			swMsPrm[i].lineSkipMode					= FALSE;
-			swMsPrm[i].enableLayoutGridDraw			= TRUE;
-			swMsPrm[i].layoutPrm.outputFPS			= chainsCfg->chCfg[i + chainsCfg->chCapNum].outFrameRate;
-			swMsPrm[i].maxInputQueLen				= SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
-			swMsPrm[i].maxOutRes					= chainsCfg->displayRes[i];
-
-			Chains_swMsGenerateLayoutParams(i,1,&swMsPrm[i]);
-
-			displayPrm[i].numInputQueues				= 1;
-			displayPrm[i].activeQueue					= 0;
-			displayPrm[i].inQueParams[0].prevLinkId		= swMsId[i];
-			displayPrm[i].inQueParams[0].prevLinkQueId	= 0;
-			displayPrm[i].displayRes					= chainsCfg->displayRes[i];
-
-
-		}
-	}
-	/* links create */
-	if(chainsCfg->chCapNum > 0)
-	{
-		System_linkCreate(captureId, &capturePrm,sizeof(capturePrm));
-	}
-
-	if(chainsCfg->chRecNum > 0)
-	{
-		System_linkCreate(dupId, &dupPrm, sizeof(dupPrm));
-		for(i = 0; i < chainsCfg->chRecNum; i++)
-		{
-			System_linkCreate(swMsId[i],&swMsPrm[i],sizeof(swMsPrm[i]));
-			System_linkCreate(displayId[i],&displayPrm[i],sizeof(displayPrm[i]));
-		}
-	}
-
-	/* links start */
-	if(chainsCfg->chRecNum > 0)
-	{
-		Vdis_start();
-		for(i = 0; i < chainsCfg->chRecNum; i++)
-		{
-			System_linkStart(displayId[i]);
-			System_linkStart(swMsId[i]);
-		}
-		System_linkStart(dupId);
-	}
-
-	if(chainsCfg->chCapNum > 0)
-	{
-		Vcap_init(&prm);
-		Vcap_start();
-		System_linkStart(captureId);
-	}
-
-	while(1)
-	{
-		char ch;
-		ch = Chains_menuRunTime();
-		if(ch=='0')
-			break;
-	}
-
-	
-	/* links stop */
-	if(chainsCfg->chCapNum > 0)
-	{
-		Vcap_stop();
-		System_linkStop(captureId);
-	}
-	if(chainsCfg->chRecNum > 0)
-	{
-		System_linkStop(dupId);
-		Vdis_stop();
-		for(i = 0; i < chainsCfg->chRecNum; i++)
-		{
-			System_linkStop(swMsId[i]);
-			System_linkStop(displayId[i]);
-		}
-	}
-	/* links delete */
-	if(chainsCfg->chCapNum > 0)
-	{
-		System_linkDelete(captureId);
-	}
-	if(chainsCfg->chRecNum > 0)
-	{
-		 System_linkDelete(dupId);
-		for(i = 0; i < chainsCfg->chRecNum; i++)
-		{
-			System_linkDelete(swMsId[i]);	
-			System_linkDelete(displayId[i]);	
-		}
-
-		Chains_displayCtrlDeInit();
-	}
-
-}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_CapdspDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_CapdspDis.c
deleted file mode 100644
index e6b0e27..0000000
--- a/dvr_rdk/demos/link_api_demos/chains/chains_CapdspDis.c
+++ /dev/null
@@ -1,255 +0,0 @@
-/** =====================================================================
- * chains_CapDis.c
- *
- * Author	: zzx
- * Date		: June 24, 2013
- * Discription:	Cap + Dis
- *	
- *	capture->dsp->display 
- *  =====================================================================
- */
-
-/* -------------------- Include user headers   ------------------------ */
-
-#include <mcfw/interfaces/ti_vcap.h>
-#include <demos/link_api_demos/common/chains.h>
-#include <demos/link_api_demos/common/chains_ipcBuf.h>
-#include <demos/link_api_demos/common/chains_ipcFrames.h>
-#include <mcfw/interfaces/link_api/helloWorldLink.h>
-
-Void Chains_CapdspDis(Chains_Ctrl *chainsCfg)
-{
-
-	CaptureLink_CreateParams			capturePrm;
-	CaptureLink_VipInstParams			*pCaptureInstPrm;
-	CaptureLink_OutParams				*pCaptureOutPrm;
-	IpcFramesInLinkRTOS_CreateParams    ipcFramesInDspPrm;
-	IpcFramesOutLinkRTOS_CreateParams   ipcFramesOutVpssPrm;	
-	HelloWorldLink_CreateParams     	helloWorldPrm;	
-	DisplayLink_CreateParams			displayPrm;
-
-	Uint32 captureId,vipInstId;
-	UInt32 helloWorldId;
-	Uint32 ipcFramesOutVpssId, ipcFramesInDspId;
-	Uint32 displayId;
-	Uint32 i;
-
-	CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
-	CHAINS_INIT_STRUCT(IpcFramesInLinkRTOS_CreateParams,ipcFramesInDspPrm);
-	CHAINS_INIT_STRUCT(IpcFramesOutLinkRTOS_CreateParams,ipcFramesOutVpssPrm);
-	CHAINS_INIT_STRUCT(HelloWorldLink_CreateParams, helloWorldPrm);
-	CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm);
-
-	captureId	   		= SYSTEM_LINK_ID_CAPTURE;
-	helloWorldId       	= SYSTEM_LINK_ID_HELLOWORLD_0;
-	ipcFramesOutVpssId 	= SYSTEM_VPSS_LINK_ID_IPC_FRAMES_OUT_0;
-	ipcFramesInDspId   	= SYSTEM_DSP_LINK_ID_IPC_FRAMES_IN_0;
-	displayId 	   		= SYSTEM_LINK_ID_DISPLAY_0;	
-
-
-	for(i = 0;i < gChains_ctrl.chRecNum; i++)
-	{
-		gChains_ctrl.chCfg[i + gChains_ctrl.chCapNum].channel = i;
-	}
-
-
-	/*
-	 * cap + dsp + dis
-	 */
-	VCAP_PARAMS_S  prm;
-	Vcap_params_init(&prm);
-	if(chainsCfg->chCapNum > 0)
-	{
-
-		capturePrm.numVipInst               = 1;//chainsCfg->chCapNum;
-		capturePrm.tilerEnable              = FALSE;
-		capturePrm.numBufsPerCh             = 16;
-		capturePrm.numExtraBufs             = 0;
-		capturePrm.maxBlindAreasPerCh       = 0;
-		capturePrm.isPalMode                = FALSE;
-		capturePrm.enableSdCrop             = FALSE;
-		capturePrm.doCropInCapture          = FALSE;
-
-		for(i = 0; i < capturePrm.numVipInst; i++)
-		{
-
-#if defined(TI816X_ETVH)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm				= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-#if defined(TI816X_ETVS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm				= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
-			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
-#endif
-#if defined(TI8107_INS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-
-			prm.channelParams[i].deviceId		= vipInstId;
-
-			prm.enableConfigExtVideoDecoder 	= TRUE;
-			prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
-
-			pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
-			pCaptureInstPrm->inScanFormat		= SYSTEM_SF_PROGRESSIVE;
-			pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
-			pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
-			pCaptureInstPrm->numOutput			= 1;
-			pCaptureInstPrm->numChPerOutput		= 1;
-			
-			pCaptureOutPrm					= &pCaptureInstPrm->outParams[0];
-			pCaptureOutPrm->dataFormat		= SYSTEM_DF_YUV422I_YUYV;
-			pCaptureOutPrm->scEnable		= FALSE;
-			pCaptureOutPrm->outQueId		= i;
-
-			
-			capturePrm.outQueParams[i].nextLink	= ipcFramesOutVpssId;
-		}
-
-	}
-
-	ipcFramesOutVpssPrm.baseCreateParams.inQueParams.prevLinkId     = captureId;
-	ipcFramesOutVpssPrm.baseCreateParams.inQueParams.prevLinkQueId  = 0;
-	ipcFramesOutVpssPrm.baseCreateParams.notifyPrevLink             = FALSE;
-
-	ipcFramesOutVpssPrm.baseCreateParams.numOutQue                  = 1;
-	ipcFramesOutVpssPrm.baseCreateParams.outQueParams[0].nextLink   = displayId;
-	ipcFramesOutVpssPrm.baseCreateParams.notifyNextLink             = TRUE;
-
-	ipcFramesOutVpssPrm.baseCreateParams.processLink                = ipcFramesInDspId;
-	ipcFramesOutVpssPrm.baseCreateParams.notifyProcessLink          = TRUE;
-	ipcFramesOutVpssPrm.baseCreateParams.noNotifyMode               = FALSE;
-
-	ipcFramesInDspPrm.baseCreateParams.inQueParams.prevLinkId       = ipcFramesOutVpssId;
-	ipcFramesInDspPrm.baseCreateParams.inQueParams.prevLinkQueId    = 0;
-	ipcFramesInDspPrm.baseCreateParams.numOutQue                    = 1;
-	ipcFramesInDspPrm.baseCreateParams.outQueParams[0].nextLink     = helloWorldId;
-	ipcFramesInDspPrm.baseCreateParams.notifyPrevLink               = FALSE;
-	ipcFramesInDspPrm.baseCreateParams.notifyNextLink               = TRUE;
-	ipcFramesInDspPrm.baseCreateParams.noNotifyMode                 = FALSE;
-
-	helloWorldPrm.inQueParams.prevLinkId    = ipcFramesInDspId;
-	helloWorldPrm.inQueParams.prevLinkQueId = 0;
-
-
-	/****************************************************************/
-
-
-	Chains_displayCtrlInit(chainsCfg->displayRes);
-
-
-	displayPrm.numInputQueues					= 1;
-	displayPrm.activeQueue						= 0;
-	displayPrm.inQueParams[0].prevLinkId		= ipcFramesOutVpssId;
-	displayPrm.inQueParams[0].prevLinkQueId		= 0;
-	displayPrm.displayRes						= chainsCfg->displayRes;
-	displayPrm.maxDriverQueLength           	= DISPLAY_LINK_MAX_DRIVER_QUEUE_LENGTH_DEFAULT;
-	displayPrm.displayId                    	= DISPLAY_LINK_DISPLAY_AUTO_SELECT;
-	displayPrm.forceFieldSeparatedInputMode		= FALSE;
-
-	/* Link create */
-	System_linkCreate(captureId,&capturePrm,sizeof(capturePrm));
-	System_linkCreate(ipcFramesOutVpssId, &ipcFramesOutVpssPrm, sizeof(ipcFramesOutVpssPrm));
-	System_linkCreate(ipcFramesInDspId, &ipcFramesInDspPrm, sizeof(ipcFramesInDspPrm));
-	System_linkCreate(helloWorldId, &helloWorldPrm, sizeof(helloWorldPrm));
-	System_linkCreate(displayId,&displayPrm,sizeof(displayPrm));
-
-	/* link start */
-	Vdis_start();
-	System_linkStart(displayId);
-	System_linkStart(ipcFramesOutVpssId);
-	System_linkStart(ipcFramesInDspId);
-	System_linkStart(helloWorldId);
-	Vcap_init(&prm);
-	Vcap_start();
-	System_linkStart(captureId);
-
-	while(1)
-	{
-		char ch;
-		ch = Chains_menuRunTime();
-		if(ch=='0')
-			break;
-	
-		if(ch == '1') 
-		{
-			if(captureId!=SYSTEM_LINK_ID_INVALID)
-			{
-				System_linkControl(captureId,
-						CAPTURE_LINK_CMD_PRINT_ADV_STATISTICS,
-						NULL, 0, TRUE);
-			}
-
-
-			for(i=0; i<OSA_ARRAYSIZE(&displayId); i++)
-			{
-				if(displayId != SYSTEM_LINK_ID_INVALID)
-				{
-					System_linkControl(displayId,
-							DISPLAY_LINK_CMD_PRINT_STATISTICS,
-							NULL, 0, TRUE);
-				}
-			}
-
-
-			OSA_waitMsecs(3000); // allow for print to complete
-
-			UInt32 gChains_enabledProcs[] = {
-				SYSTEM_LINK_ID_M3VPSS,
-				SYSTEM_LINK_ID_M3VIDEO,
-#if defined(TI_816X_BUILD)
-				SYSTEM_LINK_ID_DSP,
-#endif
-			};
-
-			for(i=0; i<sizeof(gChains_enabledProcs)/sizeof(gChains_enabledProcs[0]); i++)
-			{
-				SystemCommon_PrintStatus printStatus;
-
-				memset(&printStatus, 0, sizeof(printStatus));
-
-				printStatus.printCpuLoad = TRUE;
-				printStatus.printTskLoad = TRUE;
-				System_linkControl(
-						gChains_enabledProcs[i],
-						SYSTEM_COMMON_CMD_PRINT_STATUS,
-						&printStatus,
-						sizeof(printStatus),
-						TRUE);
-				System_linkControl(
-						gChains_enabledProcs[i],
-						SYSTEM_COMMON_CMD_CPU_LOAD_CALC_RESET,
-						NULL,
-						0,
-						TRUE);
-
-			}
-		}
-	}
-
-
-
-	/* link stop */
-	Vcap_stop();
-	System_linkStop(captureId);
-	System_linkStop(helloWorldId);
-	System_linkStop(ipcFramesInDspId);
-	System_linkStop(ipcFramesOutVpssId);
-	Vdis_stop();
-	System_linkStop(displayId);
-	
-		
-	/* link delete */	
-	System_linkDelete(captureId);
-	System_linkDelete(ipcFramesOutVpssId);
-	System_linkDelete(ipcFramesInDspId);
-	System_linkDelete(helloWorldId);
-	System_linkDelete(displayId);
-	
-	Chains_displayCtrlDeInit();
-}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_HD1Sii9233a_1Adv7441a_CapSwMsSii9022aDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_HD1Sii9233a_1Adv7441a_CapSwMsSii9022aDis.c
new file mode 100644
index 0000000..b4e108c
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_HD1Sii9233a_1Adv7441a_CapSwMsSii9022aDis.c
@@ -0,0 +1,346 @@
+/** ============================================================================
+ *
+ *  chains_CapSwMsDis.c
+ *
+ *  Author     : zzx
+ *
+ *  Date       : June 25, 2013
+ *
+ *  Description:	Cap + SwMs + Dis
+ *
+ *  capture->swMs->display
+ *  ============================================================================
+ */
+
+/*  --------------------- Include user headers   ---------------------------- */
+
+#include <mcfw/interfaces/ti_vcap.h>
+#include <demos/link_api_demos/common/chains.h>
+
+
+Void Chains_HD1Sii9233a_1Adv7441a_CapSwMsSii9022aDis(Chains_Ctrl *chainsCfg)
+{
+
+	CaptureLink_CreateParams	capturePrm;
+	CaptureLink_VipInstParams	*pCaptureInstPrm;
+	CaptureLink_OutParams       *pCaptureOutPrm;
+	DupLink_CreateParams                dupPrm;
+	SwMsLink_CreateParams		swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+	DisplayLink_CreateParams	displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+
+	Uint32 captureId,vipInstId;
+	UInt32 dupId;
+	Uint32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 i;
+
+	CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
+
+	for(i = 0; i < CHAINS_SW_MS_MAX_DISPLAYS; i++)
+	{
+		CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
+		CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
+
+	}
+	captureId 		= SYSTEM_LINK_ID_CAPTURE;
+	dupId           = SYSTEM_VPSS_LINK_ID_DUP_0;
+	swMsId[0] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
+	swMsId[1] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
+	swMsId[2] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_2;
+	displayId[0]	= SYSTEM_LINK_ID_DISPLAY_0;
+	displayId[1]	= SYSTEM_LINK_ID_DISPLAY_1;
+	displayId[2]	= SYSTEM_LINK_ID_DISPLAY_2;
+
+
+
+	for(i = 0; i < gChains_ctrl.chRecNum; i++)
+	{
+		gChains_ctrl.chCfg[i + gChains_ctrl.chCapNum].channel = i;
+
+	}
+
+	/* capture + swMs + display */
+
+	if(chainsCfg->chCapNum > 0)
+	{
+		capturePrm.numVipInst 				= chainsCfg->chCapNum;
+		capturePrm.tilerEnable              = FALSE;
+		capturePrm.numBufsPerCh             = 16;
+		capturePrm.numExtraBufs             = 0;
+		capturePrm.maxBlindAreasPerCh       = 0;
+		capturePrm.isPalMode                = FALSE;
+		capturePrm.enableSdCrop             = FALSE;
+		capturePrm.doCropInCapture          = FALSE;
+
+		for(i = 0; i< capturePrm.numVipInst; i++)
+		{
+			
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+
+			pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
+			pCaptureInstPrm->inScanFormat		= SYSTEM_SF_PROGRESSIVE;
+			pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
+			pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
+			pCaptureInstPrm->numOutput			= 1;
+
+			pCaptureOutPrm						= &pCaptureInstPrm->outParams[0];
+			pCaptureOutPrm->dataFormat			= SYSTEM_DF_YUV422I_YUYV;
+			pCaptureOutPrm->scEnable			= FALSE;
+			pCaptureOutPrm->outQueId			= 0;
+
+			capturePrm.outQueParams[0].nextLink	= dupId;
+		}
+	}
+	/*********************************************************************/
+	dupPrm.inQueParams.prevLinkId           = captureId;
+	dupPrm.inQueParams.prevLinkQueId        = 0;
+	dupPrm.numOutQue                        = chainsCfg->chRecNum;
+	dupPrm.outQueParams[0].nextLink         = swMsId[0];
+	dupPrm.outQueParams[1].nextLink         = swMsId[1];
+	dupPrm.notifyNextLink                   = TRUE;
+
+	if(chainsCfg->chRecNum > 0)
+	{
+
+		for(i = chainsCfg->chCapNum; i < chainsCfg->chNum; i++)
+		{
+			chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
+		}
+		
+
+		for(i = 0; i< chainsCfg->chRecNum; i++)
+		{
+			swMsPrm[i].numSwMsInst					= 1;
+			swMsPrm[i].swMsInstId[0]				= (0 == i)? SYSTEM_SW_MS_SC_INST_DEIHQ_SC_NO_DEI: SYSTEM_SW_MS_SC_INST_DEI_SC_NO_DEI;
+			swMsPrm[i].inQueParams.prevLinkId		= dupId;
+			swMsPrm[i].inQueParams.prevLinkQueId	= i;
+			swMsPrm[i].outQueParams.nextLink		= displayId[i];
+			swMsPrm[i].lineSkipMode					= FALSE;
+			swMsPrm[i].enableLayoutGridDraw			= TRUE;
+			swMsPrm[i].layoutPrm.outputFPS			= chainsCfg->chCfg[i + chainsCfg->chCapNum].outFrameRate;
+			swMsPrm[i].maxInputQueLen				= SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
+			swMsPrm[i].maxOutRes					= chainsCfg->displayRes[i];
+
+			Chains_swMsGenerateLayoutParams(i,1,&swMsPrm[i]);
+
+			displayPrm[i].numInputQueues				= 1;
+			displayPrm[i].activeQueue					= 0;
+			displayPrm[i].inQueParams[0].prevLinkId		= swMsId[i];
+			displayPrm[i].inQueParams[0].prevLinkQueId	= 0;
+			displayPrm[i].displayRes					= chainsCfg->displayRes[i];
+
+
+		}
+
+		VDIS_DEV_PARAM_S displayDeviceParams[4];
+
+		displayDeviceParams[VDIS_DEV_HDMI].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_HDMI].resolution = chainsCfg->displayRes[0];
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_EMBSYNC;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.vencNodeNum = VDIS_VENC_HDMI;
+
+		displayDeviceParams[VDIS_DEV_DVO2].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_DVO2].resolution = chainsCfg->displayRes[1];
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.vencNodeNum = VDIS_VENC_DVO2;
+
+		displayDeviceParams[VDIS_DEV_HDCOMP].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_HDCOMP].resolution = chainsCfg->displayRes[1];
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.aFmt = VDIS_A_OUTPUT_COMPONENT;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.vencNodeNum = VDIS_VENC_HDCOMP;
+
+		displayDeviceParams[VDIS_DEV_SD].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_SD].resolution = VSYS_STD_NTSC;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.vencNodeNum = VDIS_VENC_SD;
+
+		Chains_displayCtrlInit(displayDeviceParams, DEVICE_VID_ENC_SII9022A_DRV);
+	}
+
+	/* cap_configVideoDecoder or dis_configVideoEncoder chip */
+
+	int status = 0;
+    video_create_params create_params[2];
+    video_chipid_params chipid_params[2];
+    video_status_params status_params[2];
+    video_mode_params   mode_params[2];
+    video_subdev_obj *pobj[2];
+
+    for (i = 0; i < 2; i ++) {
+		if(i == 0) {
+			create_params[i].inst_id       = 1;
+			create_params[i].i2c_addr[0]   = 0x30;
+			pobj[i] = sii9233a_create(&create_params[i]);
+			if (pobj[i] == NULL) {
+				return;
+			}
+
+			status = sii9233a_control(pobj[i], VIDEO_CMD_INIT, NULL);
+			if (status < 0) {
+				return;
+			}
+
+			status = sii9233a_control(pobj[i], VIDEO_CMD_GET_CHIPID, &chipid_params[i]);
+			if (status < 0) {
+				return;
+			}
+			printf("chip id %04x, chip revision %04x, firmware %04x\n",
+					chipid_params[i].chipid,
+					chipid_params[i].chip_revision,
+					chipid_params[i].firmware_version);
+
+			status = sii9233a_control(pobj[i], VIDEO_CMD_GET_STATUS, &status_params[i]);
+			if (status < 0) {
+				return;
+			}
+			printf("video detected %d, video width %d, video height %d,video framerate %d\n",
+					status_params[i].detected,
+					status_params[i].width,
+					status_params[i].height,
+					status_params[i].framerate);
+
+			mode_params[i].video_if_mode       = VIDEO_IF_MODE_16BIT;
+			mode_params[i].video_data_format   = VIDEO_DF_YUV422P;
+			mode_params[i].video_capture_mode  = VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_EMBEDDED_SYNC;
+			status = sii9233a_control(pobj[i], VIDEO_CMD_SET_MODE, &mode_params[i]);
+			if (status < 0) {
+				return;
+			}
+
+			status = sii9233a_control(pobj[i], VIDEO_CMD_START, NULL);
+			if (status < 0) {
+				return -1;
+			}
+		} else if (i == 1) {
+			create_params[i].inst_id       = 2;
+			create_params[i].i2c_addr[0]   = 0x21;
+			pobj[i] = adv7441a_create(&create_params[i]);
+			if (pobj[i] == NULL) {
+				return;
+			}
+
+			status = adv7441a_control(pobj[i], VIDEO_CMD_INIT, NULL);
+			if (status < 0) {
+				return;
+			}
+
+			status = adv7441a_control(pobj[i], VIDEO_CMD_GET_CHIPID, &chipid_params[i]);
+			if (status < 0) {
+				return;
+			}
+			printf("chip id %04x, chip revision %04x, firmware %04x\n",
+					chipid_params[i].chipid,
+					chipid_params[i].chip_revision,
+					chipid_params[i].firmware_version);
+
+			status = adv7441a_control(pobj[i], VIDEO_CMD_GET_STATUS, &status_params[i]);
+			if (status < 0) {
+				return;
+			}
+			printf("video detected %d, video width %d, video height %d,video framerate %d\n",
+					status_params[i].detected,
+					status_params[i].width,
+					status_params[i].height,
+					status_params[i].framerate);
+
+			mode_params[i].video_if_mode       = VIDEO_IF_MODE_16BIT;
+			mode_params[i].video_data_format   = VIDEO_DF_YUV422P;
+			mode_params[i].video_capture_mode  = VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_EMBEDDED_SYNC;
+			status = adv7441a_control(pobj[i], VIDEO_CMD_SET_MODE, &mode_params[i]);
+			if (status < 0) {
+				return;
+			}
+
+			status = adv7441a_control(pobj[i], VIDEO_CMD_START, NULL);
+			if (status < 0) {
+				return -1;
+			}
+		}
+	}
+
+
+	/* links create */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkCreate(captureId, &capturePrm,sizeof(capturePrm));
+	}
+
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkCreate(dupId, &dupPrm, sizeof(dupPrm));
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkCreate(swMsId[i],&swMsPrm[i],sizeof(swMsPrm[i]));
+			System_linkCreate(displayId[i],&displayPrm[i],sizeof(displayPrm[i]));
+		}
+	}
+
+	/* links start */
+	if(chainsCfg->chRecNum > 0)
+	{
+		Vdis_start();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStart(displayId[i]);
+			System_linkStart(swMsId[i]);
+		}
+		System_linkStart(dupId);
+	}
+
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkStart(captureId);
+	}
+
+	while(1)
+	{
+		char ch;
+		ch = Chains_menuRunTime();
+		if(ch=='0')
+			break;
+	}
+
+	
+	/* links stop */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkStop(captureId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkStop(dupId);
+		Vdis_stop();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStop(swMsId[i]);
+			System_linkStop(displayId[i]);
+		}
+	}
+	/* links delete */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkDelete(captureId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		 System_linkDelete(dupId);
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkDelete(swMsId[i]);	
+			System_linkDelete(displayId[i]);	
+		}
+
+		Chains_displayCtrlDeInit();
+	}
+
+}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_HD1Sii9233a_CapSwMsDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_HD1Sii9233a_CapSwMsDis.c
new file mode 100644
index 0000000..a1590f2
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_HD1Sii9233a_CapSwMsDis.c
@@ -0,0 +1,247 @@
+/** ============================================================================
+ *
+ *  chains_CapSwMsDis.c
+ *
+ *  Author     : zzx
+ *
+ *  Date       : June 25, 2013
+ *
+ *  Description:	Cap + SwMs + Dis
+ *
+ *  capture->swMs->display
+ *  ============================================================================
+ */
+
+/*  --------------------- Include user headers   ---------------------------- */
+
+#include <mcfw/interfaces/ti_vcap.h>
+#include <demos/link_api_demos/common/chains.h>
+
+
+
+Void Chains_HD1Sii9233a_CapSwMsDis(Chains_Ctrl *chainsCfg)
+{
+
+	CaptureLink_CreateParams	capturePrm;
+	CaptureLink_VipInstParams	*pCaptureInstPrm;
+	CaptureLink_OutParams       *pCaptureOutPrm;
+	DupLink_CreateParams                dupPrm;
+	SwMsLink_CreateParams		swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+	DisplayLink_CreateParams	displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+
+	Uint32 captureId,vipInstId;
+	UInt32 dupId;
+	Uint32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 i;
+
+	CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
+
+	for(i = 0; i < CHAINS_SW_MS_MAX_DISPLAYS; i++)
+	{
+		CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
+		CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
+
+	}
+	captureId 		= SYSTEM_LINK_ID_CAPTURE;
+	dupId         =SYSTEM_VPSS_LINK_ID_DUP_0;
+	swMsId[0] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
+	swMsId[1] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
+	swMsId[2] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_2;
+	displayId[0]	= SYSTEM_LINK_ID_DISPLAY_0;
+	displayId[1]	= SYSTEM_LINK_ID_DISPLAY_1;
+	displayId[2]	= SYSTEM_LINK_ID_DISPLAY_2;
+
+
+
+	for(i = 0; i < gChains_ctrl.chRecNum; i++)
+	{
+		gChains_ctrl.chCfg[i + gChains_ctrl.chCapNum].channel = i;
+
+	}
+
+	/* capture + swMs + display */
+
+	if(chainsCfg->chCapNum > 0)
+	{
+		capturePrm.numVipInst 				= chainsCfg->chCapNum;
+		capturePrm.tilerEnable              = FALSE;
+		capturePrm.numBufsPerCh             = 16;
+		capturePrm.numExtraBufs             = 0;
+		capturePrm.maxBlindAreasPerCh       = 0;
+		capturePrm.isPalMode                = FALSE;
+		capturePrm.enableSdCrop             = FALSE;
+		capturePrm.doCropInCapture          = FALSE;
+
+		for(i = 0; i< capturePrm.numVipInst; i++)
+		{
+			
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+
+			pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
+			pCaptureInstPrm->inScanFormat		= SYSTEM_SF_PROGRESSIVE;
+			pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
+			pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
+			pCaptureInstPrm->numOutput			= 1;
+
+			pCaptureOutPrm						= &pCaptureInstPrm->outParams[0];
+			pCaptureOutPrm->dataFormat			= SYSTEM_DF_YUV422I_YUYV;
+			pCaptureOutPrm->scEnable			= FALSE;
+			pCaptureOutPrm->outQueId			= 0;
+
+			capturePrm.outQueParams[0].nextLink	= dupId;
+		}
+	}
+	/*********************************************************************/
+	dupPrm.inQueParams.prevLinkId           = captureId;
+	dupPrm.inQueParams.prevLinkQueId        = 0;
+	dupPrm.numOutQue                        = chainsCfg->chRecNum;
+	dupPrm.outQueParams[0].nextLink         = swMsId[0];
+	dupPrm.outQueParams[1].nextLink         = swMsId[1];
+	dupPrm.notifyNextLink                   = TRUE;
+
+	if(chainsCfg->chRecNum > 0)
+	{
+
+		for(i = chainsCfg->chCapNum; i < chainsCfg->chNum; i++)
+		{
+			chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
+		}
+		
+
+		for(i = 0; i< chainsCfg->chRecNum; i++)
+		{
+			swMsPrm[i].numSwMsInst					= 1;
+			swMsPrm[i].swMsInstId[0]				= (0 == i)? SYSTEM_SW_MS_SC_INST_DEIHQ_SC_NO_DEI: SYSTEM_SW_MS_SC_INST_DEI_SC_NO_DEI;
+			swMsPrm[i].inQueParams.prevLinkId		= dupId;
+			swMsPrm[i].inQueParams.prevLinkQueId	= i;
+			swMsPrm[i].outQueParams.nextLink		= displayId[i];
+			swMsPrm[i].lineSkipMode					= FALSE;
+			swMsPrm[i].enableLayoutGridDraw			= TRUE;
+			swMsPrm[i].layoutPrm.outputFPS			= chainsCfg->chCfg[i + chainsCfg->chCapNum].outFrameRate;
+			swMsPrm[i].maxInputQueLen				= SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
+			swMsPrm[i].maxOutRes					= chainsCfg->displayRes[i];
+
+			Chains_swMsGenerateLayoutParams(i,1,&swMsPrm[i]);
+
+			displayPrm[i].numInputQueues				= 1;
+			displayPrm[i].activeQueue					= 0;
+			displayPrm[i].inQueParams[0].prevLinkId		= swMsId[i];
+			displayPrm[i].inQueParams[0].prevLinkQueId	= 0;
+			displayPrm[i].displayRes					= chainsCfg->displayRes[i];
+
+
+		}
+
+		VDIS_DEV_PARAM_S displayDeviceParams[4];
+
+		displayDeviceParams[VDIS_DEV_HDMI].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_HDMI].resolution = chainsCfg->displayRes[0];
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_EMBSYNC;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.vencNodeNum = VDIS_VENC_HDMI;
+
+		displayDeviceParams[VDIS_DEV_DVO2].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_DVO2].resolution = chainsCfg->displayRes[1];
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.dvoFmt = VDIS_DVOFMT_DOUBLECHAN;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.dataFormat = SYSTEM_DF_YUV422SP_UV;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.vencNodeNum = VDIS_VENC_DVO2;
+
+		displayDeviceParams[VDIS_DEV_HDCOMP].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_HDCOMP].resolution = chainsCfg->displayRes[1];
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.aFmt = VDIS_A_OUTPUT_COMPONENT;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.vencNodeNum = VDIS_VENC_HDCOMP;
+
+		displayDeviceParams[VDIS_DEV_SD].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_SD].resolution = VSYS_STD_NTSC;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.vencNodeNum = VDIS_VENC_SD;
+
+		Chains_displayCtrlInit(displayDeviceParams, 0);
+	}
+
+	/* cap_configVideoDecoder or dis_configVideoEncoder chip */
+
+	/* links create */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkCreate(captureId, &capturePrm,sizeof(capturePrm));
+	}
+
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkCreate(dupId, &dupPrm, sizeof(dupPrm));
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkCreate(swMsId[i],&swMsPrm[i],sizeof(swMsPrm[i]));
+			System_linkCreate(displayId[i],&displayPrm[i],sizeof(displayPrm[i]));
+		}
+	}
+
+	/* links start */
+	if(chainsCfg->chRecNum > 0)
+	{
+		Vdis_start();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStart(displayId[i]);
+			System_linkStart(swMsId[i]);
+		}
+		System_linkStart(dupId);
+	}
+
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkStart(captureId);
+	}
+
+	while(1)
+	{
+		char ch;
+		ch = Chains_menuRunTime();
+		if(ch=='0')
+			break;
+	}
+
+	
+	/* links stop */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkStop(captureId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkStop(dupId);
+		Vdis_stop();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStop(swMsId[i]);
+			System_linkStop(displayId[i]);
+		}
+	}
+	/* links delete */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkDelete(captureId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		 System_linkDelete(dupId);
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkDelete(swMsId[i]);	
+			System_linkDelete(displayId[i]);	
+		}
+
+		Chains_displayCtrlDeInit();
+	}
+
+}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_HD2Sii9233aCapSwMsSii9022aDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_HD2Sii9233aCapSwMsSii9022aDis.c
new file mode 100644
index 0000000..7587f82
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_HD2Sii9233aCapSwMsSii9022aDis.c
@@ -0,0 +1,300 @@
+/** ============================================================================
+ *
+ *  chains_CapSwMsDis.c
+ *
+ *  Author     : zzx
+ *
+ *  Date       : June 25, 2013
+ *
+ *  Description:	Cap + SwMs + Dis
+ *
+ *  capture->swMs->display
+ *  ============================================================================
+ */
+
+/*  --------------------- Include user headers   ---------------------------- */
+
+#include <mcfw/interfaces/ti_vcap.h>
+#include <demos/link_api_demos/common/chains.h>
+
+Void Chains_HD2Sii9233aCapSwMsSii9022aDis(Chains_Ctrl *chainsCfg)
+{
+
+	CaptureLink_CreateParams	capturePrm;
+	CaptureLink_VipInstParams	*pCaptureInstPrm;
+	CaptureLink_OutParams       *pCaptureOutPrm;
+	DupLink_CreateParams                dupPrm;
+	SwMsLink_CreateParams		swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+	DisplayLink_CreateParams	displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+
+	Uint32 captureId,vipInstId;
+	UInt32 dupId;
+	Uint32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 i;
+
+	CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
+
+	for(i = 0; i < CHAINS_SW_MS_MAX_DISPLAYS; i++)
+	{
+		CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
+		CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
+
+	}
+	captureId 		= SYSTEM_LINK_ID_CAPTURE;
+	dupId         =SYSTEM_VPSS_LINK_ID_DUP_0;
+	swMsId[0] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
+	swMsId[1] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
+	swMsId[2] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_2;
+	displayId[0]	= SYSTEM_LINK_ID_DISPLAY_0;
+	displayId[1]	= SYSTEM_LINK_ID_DISPLAY_1;
+	displayId[2]	= SYSTEM_LINK_ID_DISPLAY_2;
+
+
+
+	for(i = 0; i < gChains_ctrl.chRecNum; i++)
+	{
+		gChains_ctrl.chCfg[i + gChains_ctrl.chCapNum].channel = i;
+
+	}
+
+	/* capture + swMs + display */
+
+	if(chainsCfg->chCapNum > 0)
+	{
+		capturePrm.numVipInst 				= chainsCfg->chCapNum;
+		capturePrm.tilerEnable              = FALSE;
+		capturePrm.numBufsPerCh             = 16;
+		capturePrm.numExtraBufs             = 0;
+		capturePrm.maxBlindAreasPerCh       = 0;
+		capturePrm.isPalMode                = FALSE;
+		capturePrm.enableSdCrop             = FALSE;
+		capturePrm.doCropInCapture          = FALSE;
+
+		for(i = 0; i< capturePrm.numVipInst; i++)
+		{
+			
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+
+
+			pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
+			pCaptureInstPrm->inScanFormat		= SYSTEM_SF_PROGRESSIVE;
+			pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
+			pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
+			pCaptureInstPrm->numOutput			= 1;
+
+			pCaptureOutPrm						= &pCaptureInstPrm->outParams[0];
+			pCaptureOutPrm->dataFormat			= SYSTEM_DF_YUV422I_YUYV;
+			pCaptureOutPrm->scEnable			= FALSE;
+			pCaptureOutPrm->outQueId			= 0;
+
+			capturePrm.outQueParams[0].nextLink	= dupId;
+		}
+	}
+	/*********************************************************************/
+	dupPrm.inQueParams.prevLinkId           = captureId;
+	dupPrm.inQueParams.prevLinkQueId        = 0;
+	dupPrm.numOutQue                        = chainsCfg->chRecNum;
+	dupPrm.outQueParams[0].nextLink         = swMsId[0];
+	dupPrm.outQueParams[1].nextLink         = swMsId[1];
+	dupPrm.notifyNextLink                   = TRUE;
+
+	if(chainsCfg->chRecNum > 0)
+	{
+
+		for(i = chainsCfg->chCapNum; i < chainsCfg->chNum; i++)
+		{
+			chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
+		}
+		
+
+		for(i = 0; i< chainsCfg->chRecNum; i++)
+		{
+			swMsPrm[i].numSwMsInst					= 1;
+			swMsPrm[i].swMsInstId[0]				= (0 == i)? SYSTEM_SW_MS_SC_INST_DEIHQ_SC_NO_DEI: SYSTEM_SW_MS_SC_INST_DEI_SC_NO_DEI;
+			swMsPrm[i].inQueParams.prevLinkId		= dupId;
+			swMsPrm[i].inQueParams.prevLinkQueId	= i;
+			swMsPrm[i].outQueParams.nextLink		= displayId[i];
+			swMsPrm[i].lineSkipMode					= FALSE;
+			swMsPrm[i].enableLayoutGridDraw			= TRUE;
+			swMsPrm[i].layoutPrm.outputFPS			= chainsCfg->chCfg[i + chainsCfg->chCapNum].outFrameRate;
+			swMsPrm[i].maxInputQueLen				= SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
+			swMsPrm[i].maxOutRes					= chainsCfg->displayRes[i];
+
+			Chains_swMsGenerateLayoutParams(i,1,&swMsPrm[i]);
+
+			displayPrm[i].numInputQueues				= 1;
+			displayPrm[i].activeQueue					= 0;
+			displayPrm[i].inQueParams[0].prevLinkId		= swMsId[i];
+			displayPrm[i].inQueParams[0].prevLinkQueId	= 0;
+			displayPrm[i].displayRes					= chainsCfg->displayRes[i];
+
+
+		}
+
+		VDIS_DEV_PARAM_S displayDeviceParams[4];
+
+		displayDeviceParams[VDIS_DEV_HDMI].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_HDMI].resolution = chainsCfg->displayRes[0];
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_EMBSYNC;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.vencNodeNum = VDIS_VENC_HDMI;
+
+		displayDeviceParams[VDIS_DEV_DVO2].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_DVO2].resolution = chainsCfg->displayRes[1];
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.vencNodeNum = VDIS_VENC_DVO2;
+
+		displayDeviceParams[VDIS_DEV_HDCOMP].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_HDCOMP].resolution = chainsCfg->displayRes[1];
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.aFmt = VDIS_A_OUTPUT_COMPONENT;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.vencNodeNum = VDIS_VENC_HDCOMP;
+
+		displayDeviceParams[VDIS_DEV_SD].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_SD].resolution = VSYS_STD_NTSC;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.vencNodeNum = VDIS_VENC_SD;
+
+		Chains_displayCtrlInit(displayDeviceParams, DEVICE_VID_ENC_SII9022A_DRV);
+	}
+
+	/* cap_configVideoDecoder or dis_configVideoEncoder chip */
+
+	int status = 0;
+	video_create_params create_params[2];
+	video_chipid_params chipid_params[2];
+	video_status_params status_params[2];
+	video_mode_params   mode_params[2];
+    video_subdev_obj *pobj[2];
+
+	for (i = 0; i < 2; i ++) {
+        create_params[i].inst_id       = 1;
+        create_params[i].i2c_addr[0]   = 0x30 + i;
+        pobj[i] = sii9233a_create(&create_params[i]);
+        if (pobj[i] == NULL) {
+            return;
+        }
+
+        status = sii9233a_control(pobj[i], VIDEO_CMD_INIT, NULL);
+        if (status < 0) {
+            return;
+        }
+
+        status = sii9233a_control(pobj[i], VIDEO_CMD_GET_CHIPID, &chipid_params[i]);
+        if (status < 0) {
+            return;
+        }
+        printf("chip id %04x, chip revision %04x, firmware %04x\n",
+                chipid_params[i].chipid,
+                chipid_params[i].chip_revision,
+                chipid_params[i].firmware_version);
+
+        status = sii9233a_control(pobj[i], VIDEO_CMD_GET_STATUS, &status_params[i]);
+        if (status < 0) {
+            return;
+        }
+        printf("video detected %d, video width %d, video height %d,video framerate %d\n",
+                status_params[i].detected,
+                status_params[i].width,
+                status_params[i].height,
+                status_params[i].framerate);
+
+        mode_params[i].video_if_mode       = VIDEO_IF_MODE_16BIT;
+        mode_params[i].video_data_format   = VIDEO_DF_YUV422P;
+        mode_params[i].video_capture_mode  = VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_EMBEDDED_SYNC;
+        status = sii9233a_control(pobj[i], VIDEO_CMD_SET_MODE, &mode_params[i]);
+        if (status < 0) {
+            return;
+        }
+        
+        status = sii9233a_control(pobj[i], VIDEO_CMD_START, NULL);
+        if (status < 0) {
+            return -1;
+        }
+    }
+
+
+	/* links create */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkCreate(captureId, &capturePrm,sizeof(capturePrm));
+	}
+
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkCreate(dupId, &dupPrm, sizeof(dupPrm));
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkCreate(swMsId[i],&swMsPrm[i],sizeof(swMsPrm[i]));
+			System_linkCreate(displayId[i],&displayPrm[i],sizeof(displayPrm[i]));
+		}
+	}
+
+	/* links start */
+	if(chainsCfg->chRecNum > 0)
+	{
+		Vdis_start();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStart(displayId[i]);
+			System_linkStart(swMsId[i]);
+		}
+		System_linkStart(dupId);
+	}
+
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkStart(captureId);
+	}
+
+	while(1)
+	{
+		char ch;
+		ch = Chains_menuRunTime();
+		if(ch=='0')
+			break;
+	}
+
+	
+	/* links stop */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkStop(captureId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkStop(dupId);
+		Vdis_stop();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStop(swMsId[i]);
+			System_linkStop(displayId[i]);
+		}
+	}
+	/* links delete */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkDelete(captureId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		 System_linkDelete(dupId);
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkDelete(swMsId[i]);	
+			System_linkDelete(displayId[i]);	
+		}
+
+		Chains_displayCtrlDeInit();
+	}
+
+}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_HD3Gv7601_1Adv7441a_Mdin325a_CapSwMsSii9022aDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_HD3Gv7601_1Adv7441a_Mdin325a_CapSwMsSii9022aDis.c
new file mode 100644
index 0000000..f32e2be
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_HD3Gv7601_1Adv7441a_Mdin325a_CapSwMsSii9022aDis.c
@@ -0,0 +1,509 @@
+/** ============================================================================
+ *
+ *  chains_CapSwMsDis.c
+ *
+ *  Author     : zzx
+ *
+ *  Date       : June 25, 2013
+ *
+ *  Description:	Cap + SwMs + Dis
+ *
+ *  capture->swMs->display
+ *  ============================================================================
+ */
+
+/*  --------------------- Include user headers   ---------------------------- */
+
+#include <mcfw/interfaces/ti_vcap.h>
+#include <demos/link_api_demos/common/chains.h>
+
+
+#if 1
+///////// detect_sdi_resolution //////////////////////////////////////////////////////////////////
+
+static void *capstatus_handle(void * prm)
+{
+	unsigned int status = 0;
+	int i;	
+	static int count[4] = {0};
+	static unsigned int org_std[4] = {0};
+	unsigned int std[4] = {0};	
+	unsigned int vsys_standard = 0;
+
+	memset(org_std,0xFF,sizeof(org_std));
+
+	video_create_params create_params;
+	video_chipid_params chipid_params;
+	create_params.inst_id       = 2;
+	create_params.i2c_addr[0]   = 0x21;
+
+	video_subdev_obj			*m_dviobj;
+	m_dviobj = adv7441a_create(&create_params);
+
+	adv7441a_control(m_dviobj, VIDEO_CMD_INIT, NULL);
+
+	adv7441a_control(m_dviobj, VIDEO_CMD_GET_CHIPID, &chipid_params);
+	printf("chip id %04x, chip revision %04x, firmware %04x\n",
+			chipid_params.chipid,
+			chipid_params.chip_revision,
+			chipid_params.firmware_version);
+
+
+
+	while(1)
+	{
+		sleep(1);
+		//			status = detect_sdi_resolution(std);
+		for(i = 0; i < 3; i++)
+		{
+//			vsys_standard = sdi_convert_standard(std[i]);
+			if(org_std[i] != std[i])
+			{
+				if(1 == count[i])//times 
+				{
+					//change resolution
+					if(i < 3)
+					{
+					}
+
+
+					org_std[i] = std[i];//update origion standard
+				}
+				count[i]++;
+			}
+			else
+			{
+				count[i] = 0;
+
+			}
+
+		}
+#if 0
+		i = 3;
+		VCAP_VIDEO_SOURCE_STATUS_PARAMS_S  videoStatusArgs;
+		VCAP_VIDEO_SOURCE_CH_STATUS_S      videoStatus;
+		int ch = 0;
+		static unsigned int frameWidth = 0xFF;
+		static unsigned int frameHeight = 0xFF;
+		static unsigned int frameRate = 0xFF;
+		videoStatusArgs.channelNum = 0;
+
+		status = Vcap_deviceControl(ch,
+				IOCTL_DEVICE_VIDEO_DECODER_GET_VIDEO_STATUS,
+				&videoStatusArgs,
+				&videoStatus
+				);
+
+		if(videoStatus.isVideoDetect && videoStatus.frameInterval)
+		{
+			printf("port %d: Detected video (%dx%d@%dHz)!!!\n",
+					i,
+					videoStatus.frameWidth,
+					videoStatus.frameHeight,
+					videoStatus.frameInterval !=0?videoStatus.frameInterval : 0);
+
+			if(frameWidth != videoStatus.frameWidth || frameHeight != videoStatus.frameHeight
+					|| frameRate != videoStatus.frameInterval)
+			{
+#if 1
+				status = Vcap_deviceControl(ch,
+						IOCTL_DEVICE_VIDEO_DECODER_SET_VIDEO_RES,
+						&videoStatusArgs,
+						&videoStatus
+						);
+#endif
+
+				frameWidth = videoStatus.frameWidth;
+				frameHeight = videoStatus.frameHeight;
+				frameRate = videoStatus.frameInterval;
+
+				printf("port %d update resolution frameWidth%d,frameHeight%d,frameRate%d\n",
+						i,
+						videoStatus.frameWidth,
+						videoStatus.frameHeight,
+						videoStatus.frameInterval !=0?videoStatus.frameInterval : 0);
+
+			}	
+		}
+		else
+		{
+			frameWidth = 0;
+			frameHeight = 0;
+			frameRate = 0;
+			printf("%2d: No video detected !!!\n",i);
+
+		}
+#else
+
+		unsigned int chn_id = 3;
+		static unsigned int frameWidth = 0xFF;
+		static unsigned int frameHeight = 0xFF;
+		static unsigned int frameRate = 0xFF;
+
+#if 1
+		static video_status_params status_params;
+		static video_mode_params   mode_params;
+
+		status = adv7441a_control(m_dviobj, VIDEO_CMD_GET_STATUS, &status_params);
+		if (status < 0) {
+			return -1;
+		}
+#if 0	
+		if (!status_params.detected) {
+#if defined(VCS_DEBUG)
+			DBG(DBG_INFO, GT_NAME, "video not detected\n");
+#endif
+			frameWidth = 0;
+			frameHeight = 0;
+			frameRate = 0;
+			return -1;
+		}
+#endif
+#if 1
+		printf("video detected %d, video width %d, video height %d,video framerate %d\n",
+				status_params.detected,
+				status_params.width,
+				status_params.height,
+				status_params.framerate);
+#endif  // if defined VCS_DEBUG
+
+
+		if(frameWidth != status_params.width || frameHeight != status_params.height
+				|| frameRate != status_params.framerate)
+		{
+			/*for mdin325a configuration*/
+			Mdin325_Config(status_params.width,status_params.height,status_params.framerate);
+
+#if 1
+			printf("detect video: change resolution for chn%d, w:%d, h:%d, fps:%d\n",
+					chn_id, status_params.width, status_params.height, status_params.framerate);
+#endif  // if defined VCS_DEBUG
+
+
+			mode_params.video_if_mode       = VIDEO_IF_MODE_16BIT;
+			mode_params.video_data_format   = VIDEO_DF_YUV422P;
+			mode_params.video_capture_mode  = VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_EMBEDDED_SYNC;
+			adv7441a_control(m_dviobj, VIDEO_CMD_SET_MODE, &mode_params);
+
+			adv7441a_control(m_dviobj, VIDEO_CMD_START, NULL);
+
+
+			sleep(1);
+		}	
+
+		frameWidth = status_params.width;
+		frameHeight = status_params.height;
+		frameRate = status_params.framerate;
+
+#endif
+
+#endif
+
+	}
+}
+#endif
+
+
+
+
+Void Chains_HD3Gv7601_1Adv7441a_Mdin325a_CapSwMsSii9022aDis(Chains_Ctrl *chainsCfg)
+{
+
+	CaptureLink_CreateParams	capturePrm;
+	CaptureLink_VipInstParams	*pCaptureInstPrm;
+	CaptureLink_OutParams       *pCaptureOutPrm;
+	DupLink_CreateParams                dupPrm;
+	SwMsLink_CreateParams		swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+	DisplayLink_CreateParams	displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+
+	Uint32 captureId,vipInstId;
+	UInt32 dupId;
+	Uint32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 i;
+
+	CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
+
+	for(i = 0; i < CHAINS_SW_MS_MAX_DISPLAYS; i++)
+	{
+		CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
+		CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
+
+	}
+	captureId 		= SYSTEM_LINK_ID_CAPTURE;
+	dupId         =SYSTEM_VPSS_LINK_ID_DUP_0;
+	swMsId[0] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
+	swMsId[1] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
+	swMsId[2] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_2;
+	displayId[0]	= SYSTEM_LINK_ID_DISPLAY_0;
+	displayId[1]	= SYSTEM_LINK_ID_DISPLAY_1;
+	displayId[2]	= SYSTEM_LINK_ID_DISPLAY_2;
+
+
+
+	for(i = 0; i < gChains_ctrl.chRecNum; i++)
+	{
+		gChains_ctrl.chCfg[i + gChains_ctrl.chCapNum].channel = i;
+
+	}
+
+	/* capture + swMs + display */
+
+	if(chainsCfg->chCapNum > 0)
+	{
+		capturePrm.numVipInst 				= chainsCfg->chCapNum;
+		capturePrm.tilerEnable              = FALSE;
+		capturePrm.numBufsPerCh             = 16;
+		capturePrm.numExtraBufs             = 0;
+		capturePrm.maxBlindAreasPerCh       = 0;
+		capturePrm.isPalMode                = FALSE;
+		capturePrm.enableSdCrop             = FALSE;
+		capturePrm.doCropInCapture          = FALSE;
+
+		for(i = 0; i< capturePrm.numVipInst; i++)
+		{
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
+			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
+
+			if(3 == vipInstId)
+			{
+				pCaptureInstPrm->videoCaptureMode   = SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_EMBEDDED_SYNC;
+			}
+
+			pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
+			pCaptureInstPrm->inScanFormat		= SYSTEM_SF_PROGRESSIVE;
+			pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
+			pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
+			pCaptureInstPrm->numOutput			= 1;
+
+			pCaptureOutPrm						= &pCaptureInstPrm->outParams[0];
+			pCaptureOutPrm->dataFormat			= SYSTEM_DF_YUV422I_YUYV;
+			pCaptureOutPrm->scEnable			= FALSE;
+			pCaptureOutPrm->outQueId			= 0;
+
+			capturePrm.outQueParams[0].nextLink	= dupId;
+		}
+	}
+	/*********************************************************************/
+	dupPrm.inQueParams.prevLinkId           = captureId;
+	dupPrm.inQueParams.prevLinkQueId        = 0;
+	dupPrm.numOutQue                        = chainsCfg->chRecNum;
+	dupPrm.outQueParams[0].nextLink         = swMsId[0];
+	dupPrm.outQueParams[1].nextLink         = swMsId[1];
+	dupPrm.notifyNextLink                   = TRUE;
+
+	if(chainsCfg->chRecNum > 0)
+	{
+
+		for(i = chainsCfg->chCapNum; i < chainsCfg->chNum; i++)
+		{
+			chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
+		}
+		
+
+		for(i = 0; i< chainsCfg->chRecNum; i++)
+		{
+
+			swMsPrm[i].numSwMsInst					= 1;
+			swMsPrm[i].swMsInstId[0]				= (0 == i)? SYSTEM_SW_MS_SC_INST_DEIHQ_SC_NO_DEI: SYSTEM_SW_MS_SC_INST_DEI_SC_NO_DEI;
+			swMsPrm[i].inQueParams.prevLinkId		= dupId;
+			swMsPrm[i].inQueParams.prevLinkQueId	= i;
+			swMsPrm[i].outQueParams.nextLink		= displayId[i];
+			swMsPrm[i].lineSkipMode					= FALSE;
+			swMsPrm[i].enableLayoutGridDraw			= TRUE;
+			swMsPrm[i].layoutPrm.outputFPS			= chainsCfg->chCfg[i + chainsCfg->chCapNum].outFrameRate;
+			swMsPrm[i].maxInputQueLen				= SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
+			swMsPrm[i].maxOutRes					= chainsCfg->displayRes[i];
+
+			Chains_swMsGenerateLayoutParams(i,1,&swMsPrm[i]);
+
+			displayPrm[i].numInputQueues				= 1;
+			displayPrm[i].activeQueue					= 0;
+			displayPrm[i].inQueParams[0].prevLinkId		= swMsId[i];
+			displayPrm[i].inQueParams[0].prevLinkQueId	= 0;
+			displayPrm[i].displayRes					= chainsCfg->displayRes[i];
+
+
+		}
+
+		VDIS_DEV_PARAM_S displayDeviceParams[4];
+
+		displayDeviceParams[VDIS_DEV_HDMI].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_HDMI].resolution = chainsCfg->displayRes[0];
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_EMBSYNC;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.vencNodeNum = VDIS_VENC_HDMI;
+
+		displayDeviceParams[VDIS_DEV_DVO2].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_DVO2].resolution = chainsCfg->displayRes[1];
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.vencNodeNum = VDIS_VENC_DVO2;
+
+		displayDeviceParams[VDIS_DEV_HDCOMP].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_HDCOMP].resolution = chainsCfg->displayRes[1];
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.aFmt = VDIS_A_OUTPUT_COMPONENT;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.vencNodeNum = VDIS_VENC_HDCOMP;
+
+		displayDeviceParams[VDIS_DEV_SD].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_SD].resolution = VSYS_STD_NTSC;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.vencNodeNum = VDIS_VENC_SD;
+
+		Chains_displayCtrlInit(displayDeviceParams, DEVICE_VID_ENC_SII9022A_DRV);
+	}
+
+	/* cap_configVideoDecoder or dis_configVideoEncoder chip */
+#if 0
+	int status = 0;
+	video_create_params create_params[2];
+	video_chipid_params chipid_params[2];
+    video_status_params status_params[2];
+    video_mode_params   mode_params[2];
+    video_subdev_obj *pobj[2];
+    
+    for (i = 0; i < 2; i ++) {
+		if(i == 0) {
+			create_params[i].inst_id       = 2;
+			create_params[i].i2c_addr[0]   = 0x21;
+			pobj[i] = adv7441a_create(&create_params[i]);
+			if (pobj[i] == NULL) {
+				return;
+			}
+
+			status = adv7441a_control(pobj[i], VIDEO_CMD_INIT, NULL);
+			if (status < 0) {
+				return;
+			}
+
+			status = adv7441a_control(pobj[i], VIDEO_CMD_GET_CHIPID, &chipid_params[i]);
+			if (status < 0) {
+				return;
+			}
+			printf("chip id %04x, chip revision %04x, firmware %04x\n",
+					chipid_params[i].chipid,
+					chipid_params[i].chip_revision,
+					chipid_params[i].firmware_version);
+
+			status = adv7441a_control(pobj[i], VIDEO_CMD_GET_STATUS, &status_params[i]);
+			if (status < 0) {
+				return;
+			}
+			printf("video detected %d, video width %d, video height %d,video framerate %d\n",
+					status_params[i].detected,
+					status_params[i].width,
+					status_params[i].height,
+					status_params[i].framerate);
+
+			mode_params[i].video_if_mode       = VIDEO_IF_MODE_16BIT;
+			mode_params[i].video_data_format   = VIDEO_DF_YUV422P;
+			mode_params[i].video_capture_mode  = VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_EMBEDDED_SYNC;
+			status = adv7441a_control(pobj[i], VIDEO_CMD_SET_MODE, &mode_params[i]);
+			if (status < 0) {
+				return;
+			}
+
+			status = adv7441a_control(pobj[i], VIDEO_CMD_START, NULL);
+			if (status < 0) {
+				return -1;
+			}
+	
+			/*for mdin325a configuration*/
+			Mdin325_Config(status_params[i].width,status_params[i].height,status_params[i].framerate);
+		}
+	}
+#endif
+#if 1
+	OSA_ThrHndl thrHandleCapStatus;
+
+	OSA_thrCreate(&thrHandleCapStatus,
+			capstatus_handle, 
+			1,
+			0,
+			NULL
+			);	
+#endif
+
+	/* links create */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkCreate(captureId, &capturePrm,sizeof(capturePrm));
+	}
+
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkCreate(dupId, &dupPrm, sizeof(dupPrm));
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkCreate(swMsId[i],&swMsPrm[i],sizeof(swMsPrm[i]));
+			System_linkCreate(displayId[i],&displayPrm[i],sizeof(displayPrm[i]));
+		}
+	}
+
+	/* links start */
+	if(chainsCfg->chRecNum > 0)
+	{
+		Vdis_start();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStart(displayId[i]);
+			System_linkStart(swMsId[i]);
+		}
+		System_linkStart(dupId);
+	}
+
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkStart(captureId);
+	}
+
+	while(1)
+	{
+		char ch;
+		ch = Chains_menuRunTime();
+		if(ch=='0')
+			break;
+	}
+
+	
+	/* links stop */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkStop(captureId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkStop(dupId);
+		Vdis_stop();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStop(swMsId[i]);
+			System_linkStop(displayId[i]);
+		}
+	}
+	/* links delete */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkDelete(captureId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		 System_linkDelete(dupId);
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkDelete(swMsId[i]);	
+			System_linkDelete(displayId[i]);	
+		}
+
+		Chains_displayCtrlDeInit();
+	}
+
+}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_HD4Gv7601CapSwMsSii9022aDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_HD4Gv7601CapSwMsSii9022aDis.c
new file mode 100644
index 0000000..8f19297
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_HD4Gv7601CapSwMsSii9022aDis.c
@@ -0,0 +1,248 @@
+/** ============================================================================
+ *
+ *  chains_CapSwMsDis.c
+ *
+ *  Author     : zzx
+ *
+ *  Date       : June 25, 2013
+ *
+ *  Description:	Cap + SwMs + Dis
+ *
+ *  capture->swMs->display
+ *  ============================================================================
+ */
+
+/*  --------------------- Include user headers   ---------------------------- */
+
+#include <mcfw/interfaces/ti_vcap.h>
+#include <demos/link_api_demos/common/chains.h>
+
+
+Void Chains_HD4Gv7601CapSwMsSii9022aDis(Chains_Ctrl *chainsCfg)
+{
+
+	CaptureLink_CreateParams	capturePrm;
+	CaptureLink_VipInstParams	*pCaptureInstPrm;
+	CaptureLink_OutParams       *pCaptureOutPrm;
+	DupLink_CreateParams                dupPrm;
+	SwMsLink_CreateParams		swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+	DisplayLink_CreateParams	displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+
+	Uint32 captureId,vipInstId;
+	UInt32 dupId;
+	Uint32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 i;
+
+	CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
+
+	for(i = 0; i < CHAINS_SW_MS_MAX_DISPLAYS; i++)
+	{
+		CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
+		CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
+
+	}
+	captureId 		= SYSTEM_LINK_ID_CAPTURE;
+	dupId         =SYSTEM_VPSS_LINK_ID_DUP_0;
+	swMsId[0] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
+	swMsId[1] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
+	swMsId[2] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_2;
+	displayId[0]	= SYSTEM_LINK_ID_DISPLAY_0;
+	displayId[1]	= SYSTEM_LINK_ID_DISPLAY_1;
+	displayId[2]	= SYSTEM_LINK_ID_DISPLAY_2;
+
+
+
+	for(i = 0; i < gChains_ctrl.chRecNum; i++)
+	{
+		gChains_ctrl.chCfg[i + gChains_ctrl.chCapNum].channel = i;
+
+	}
+
+	/* capture + swMs + display */
+
+	if(chainsCfg->chCapNum > 0)
+	{
+		capturePrm.numVipInst 				= chainsCfg->chCapNum;
+		capturePrm.tilerEnable              = FALSE;
+		capturePrm.numBufsPerCh             = 16;
+		capturePrm.numExtraBufs             = 0;
+		capturePrm.maxBlindAreasPerCh       = 0;
+		capturePrm.isPalMode                = FALSE;
+		capturePrm.enableSdCrop             = FALSE;
+		capturePrm.doCropInCapture          = FALSE;
+
+		for(i = 0; i< capturePrm.numVipInst; i++)
+		{
+			
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
+			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
+
+			pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
+			pCaptureInstPrm->inScanFormat		= SYSTEM_SF_PROGRESSIVE;
+			pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
+			pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
+			pCaptureInstPrm->numOutput			= 1;
+
+			pCaptureOutPrm						= &pCaptureInstPrm->outParams[0];
+			pCaptureOutPrm->dataFormat			= SYSTEM_DF_YUV422I_YUYV;
+			pCaptureOutPrm->scEnable			= FALSE;
+			pCaptureOutPrm->outQueId			= 0;
+
+			capturePrm.outQueParams[0].nextLink	= dupId;
+		}
+	}
+	/*********************************************************************/
+	dupPrm.inQueParams.prevLinkId           = captureId;
+	dupPrm.inQueParams.prevLinkQueId        = 0;
+	dupPrm.numOutQue                        = chainsCfg->chRecNum;
+	dupPrm.outQueParams[0].nextLink         = swMsId[0];
+	dupPrm.outQueParams[1].nextLink         = swMsId[1];
+	dupPrm.notifyNextLink                   = TRUE;
+
+	if(chainsCfg->chRecNum > 0)
+	{
+
+		for(i = chainsCfg->chCapNum; i < chainsCfg->chNum; i++)
+		{
+			chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
+		}
+		
+
+		for(i = 0; i< chainsCfg->chRecNum; i++)
+		{
+			swMsPrm[i].numSwMsInst					= 1;
+			swMsPrm[i].swMsInstId[0]				= (0 == i)? SYSTEM_SW_MS_SC_INST_DEIHQ_SC_NO_DEI: SYSTEM_SW_MS_SC_INST_DEI_SC_NO_DEI;
+			swMsPrm[i].inQueParams.prevLinkId		= dupId;
+			swMsPrm[i].inQueParams.prevLinkQueId	= i;
+			swMsPrm[i].outQueParams.nextLink		= displayId[i];
+			swMsPrm[i].lineSkipMode					= FALSE;
+			swMsPrm[i].enableLayoutGridDraw			= TRUE;
+			swMsPrm[i].layoutPrm.outputFPS			= chainsCfg->chCfg[i + chainsCfg->chCapNum].outFrameRate;
+			swMsPrm[i].maxInputQueLen				= SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
+			swMsPrm[i].maxOutRes					= chainsCfg->displayRes[i];
+
+			Chains_swMsGenerateLayoutParams(i,1,&swMsPrm[i]);
+
+			displayPrm[i].numInputQueues				= 1;
+			displayPrm[i].activeQueue					= 0;
+			displayPrm[i].inQueParams[0].prevLinkId		= swMsId[i];
+			displayPrm[i].inQueParams[0].prevLinkQueId	= 0;
+			displayPrm[i].displayRes					= chainsCfg->displayRes[i];
+
+
+		}
+
+		VDIS_DEV_PARAM_S displayDeviceParams[4];
+
+		displayDeviceParams[VDIS_DEV_HDMI].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_HDMI].resolution = chainsCfg->displayRes[0];
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_EMBSYNC;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_HDMI].outputInfo.vencNodeNum = VDIS_VENC_HDMI;
+
+		displayDeviceParams[VDIS_DEV_DVO2].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_DVO2].resolution = chainsCfg->displayRes[1];
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_DVO2].outputInfo.vencNodeNum = VDIS_VENC_DVO2;
+
+		displayDeviceParams[VDIS_DEV_HDCOMP].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_HDCOMP].resolution = chainsCfg->displayRes[1];
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.aFmt = VDIS_A_OUTPUT_COMPONENT;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_HDCOMP].outputInfo.vencNodeNum = VDIS_VENC_HDCOMP;
+
+		displayDeviceParams[VDIS_DEV_SD].enable = TRUE;
+		displayDeviceParams[VDIS_DEV_SD].resolution = VSYS_STD_NTSC;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
+		displayDeviceParams[VDIS_DEV_SD].outputInfo.vencNodeNum = VDIS_VENC_SD;
+
+		Chains_displayCtrlInit(displayDeviceParams, DEVICE_VID_ENC_SII9022A_DRV);
+	}
+
+	/* cap_configVideoDecoder or dis_configVideoEncoder chip */
+
+
+	/* links create */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkCreate(captureId, &capturePrm,sizeof(capturePrm));
+	}
+
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkCreate(dupId, &dupPrm, sizeof(dupPrm));
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkCreate(swMsId[i],&swMsPrm[i],sizeof(swMsPrm[i]));
+			System_linkCreate(displayId[i],&displayPrm[i],sizeof(displayPrm[i]));
+		}
+	}
+
+	/* links start */
+	if(chainsCfg->chRecNum > 0)
+	{
+		Vdis_start();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStart(displayId[i]);
+			System_linkStart(swMsId[i]);
+		}
+		System_linkStart(dupId);
+	}
+
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkStart(captureId);
+	}
+
+	while(1)
+	{
+		char ch;
+		ch = Chains_menuRunTime();
+		if(ch=='0')
+			break;
+	}
+
+	
+	/* links stop */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkStop(captureId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkStop(dupId);
+		Vdis_stop();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStop(swMsId[i]);
+			System_linkStop(displayId[i]);
+		}
+	}
+	/* links delete */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkDelete(captureId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		 System_linkDelete(dupId);
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkDelete(swMsId[i]);	
+			System_linkDelete(displayId[i]);	
+		}
+
+		Chains_displayCtrlDeInit();
+	}
+
+}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_RecvFourDecSwMsDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_RecvFourDecSwMsDis.c
deleted file mode 100644
index 0818286..0000000
--- a/dvr_rdk/demos/link_api_demos/chains/chains_RecvFourDecSwMsDis.c
+++ /dev/null
@@ -1,392 +0,0 @@
-/** ============================================================================
- *
- *  chains_RecvFourDecSwMsDis.c
- *
- *  Author     : zzx
- *
- *  Date       : July 24, 2013
- *
- *  Description:
- *  
- *  ipcBitsOutHost->ipcBitsInVideo->
- *  dec->ipcOutVideo->ipcInVpss->swMs->display  
- *  ============================================================================
- */
-
-/*  --------------------- Include system headers ---------------------------- */
-
-/*  --------------------- Include user headers   ---------------------------- */
-
-#include <mcfw/interfaces/ti_vcap.h>
-#include <demos/link_api_demos/common/chains.h>
-
-#if defined(__cplusplus)
-extern "C" {
-#endif
-
-/*
- *  --------------------- Macro definition -------------------------------------
- */
-
-/** ============================================================================
- *  @Macro:         Macro name
- *
- *  @Description:   Description of this macro.
- *  ============================================================================
- */
-
-/*
- *  --------------------- Structure definition ---------------------------------
- */
-
-/** ----------------------------------------------------------------------------
- *  @Name:          Structure name
- *
- *  @Description:   Description of the structure.
- *
- *  @Field:         Field1 member
- *
- *  @Field          Field2 member
- *  ----------------------------------------------------------------------------
- */
-
-/*
- *  --------------------- Global variable definition ---------------------------
- */
-
-/** ----------------------------------------------------------------------------
- *  @Name:          systemVid_encDecIvaChMapTbl
- *
- *  @Description:   Data structure to assign the video channles to all 3 IVA-HDs.
- * -----------------------------------------------------------------------------
- */
-
-static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
-{
-	.isPopulated = 1,
-	.ivaMap[0] =
-	{
-		.EncNumCh  = 0,
-		.EncChList = {0},
-		.DecNumCh  = 2,
-		.DecChList = {0,1},
-	},
-	.ivaMap[1] =
-	{
-		.EncNumCh  = 0,
-		.EncChList = {0},
-		.DecNumCh  = 2,
-		.DecChList = {2,3},
-	},
-	.ivaMap[2] =
-	{
-		.EncNumCh  = 0,
-		.EncChList = {0},
-		.DecNumCh  = 2,
-		.DecChList = {4,5},
-	},
-};
-
-/*
- *  --------------------- Public function definition ---------------------------
- */
-
-Void Chains_RecvFourDecSwMsDis(Chains_Ctrl *chainsCfg)
-{
-
-	IpcBitsOutLinkHLOS_CreateParams  	ipcBitsOutHostPrm;
-	IpcBitsInLinkRTOS_CreateParams   	ipcBitsInVideoPrm;
-	DecLink_CreateParams              	decPrm;
-	IpcLink_CreateParams              	ipcOutVideoPrm;
-	IpcLink_CreateParams              	ipcInVpssPrm;
-	SwMsLink_CreateParams             	swMsPrm;
-	DisplayLink_CreateParams          	displayPrm;
-
-
-	UInt32 ipcBitsOutHostId;
-	UInt32 ipcBitsInVideoId;
-	UInt32 decId;
-	UInt32 ipcOutVideoId;
-	UInt32 ipcInVpssId;
-	UInt32 swMsId;
-	UInt32 displayId;
-
-	UInt32 i,j;
-
-	CHAINS_INIT_STRUCT(IpcBitsOutLinkHLOS_CreateParams,ipcBitsOutHostPrm);
-	CHAINS_INIT_STRUCT(IpcBitsInLinkRTOS_CreateParams,ipcBitsInVideoPrm);
-	CHAINS_INIT_STRUCT(DecLink_CreateParams,decPrm);
-	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoPrm);
-	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssPrm);
-	CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm);
-	CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm);
-
-	ipcBitsOutHostId    = SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0;
-	ipcBitsInVideoId    = SYSTEM_VIDEO_LINK_ID_IPC_BITS_IN_0;
-	decId               = SYSTEM_LINK_ID_VDEC_0;
-	ipcOutVideoId    	= SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_0;
-	ipcInVpssId      	= SYSTEM_VPSS_LINK_ID_IPC_IN_M3_0;
-	swMsId   	        = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
-	displayId			= SYSTEM_LINK_ID_DISPLAY_0;
-
-
-	Chains_ipcBitsInit();
-
-/* Update channel to IVAHD mapping */
-	System_linkControl(
-			SYSTEM_LINK_ID_M3VIDEO,
-			SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
-			&systemVid_encDecIvaChMapTbl,
-			sizeof(SystemVideo_Ivahd2ChMap_Tbl),
-			TRUE
-			);
-
-
-	for(i =0;i<gChains_ctrl.chRecNum;i++)
-	{
-		gChains_ctrl.chCfg[i+gChains_ctrl.chCapNum].channel = i;
-	}
-
-/* Recv + Dec + SwMs + Dis */
-	if(chainsCfg->chRecNum > 0)
-	{
-
-		for(i=chainsCfg->chCapNum; i<chainsCfg->chNum; i++)
-		{
-			chainsCfg->displayRes[i-chainsCfg->chCapNum] = chainsCfg->displayRes[i];
-		}
-
-		Chains_displayCtrlInit(chainsCfg->displayRes);
-
-		System_LinkQueInfo queInfo;
-		queInfo.numCh = chainsCfg->chRecNum;
-
-		for (i=0; i<queInfo.numCh; i++) 
-		{
-			queInfo.chInfo[i].bufType           = SYSTEM_BUF_TYPE_VIDBITSTREAM;
-			queInfo.chInfo[i].codingformat      = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
-			queInfo.chInfo[i].height            = chainsCfg->chCfg[i + chainsCfg->chCapNum].outHeight;
-			queInfo.chInfo[i].width             = chainsCfg->chCfg[i + chainsCfg->chCapNum].outWidth;
-			queInfo.chInfo[i].memType           = SYSTEM_MT_TILEDMEM;
-			queInfo.chInfo[i].dataFormat        = SYSTEM_DF_YUV420P;
-			queInfo.chInfo[i].scanFormat        = SYSTEM_SF_PROGRESSIVE;
-		}
-
-		ipcBitsOutHostPrm.baseCreateParams.numOutQue                    = 1;
-		ipcBitsOutHostPrm.baseCreateParams.numChPerOutQue[0]            = queInfo.numCh;
-		ipcBitsOutHostPrm.baseCreateParams.outQueParams[0].nextLink     = ipcBitsInVideoId;
-		Chains_ipcBitsInitCreateParams_BitsOutHLOS(&ipcBitsOutHostPrm, &queInfo);
-
-		ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkId       = ipcBitsOutHostId;
-		ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkQueId    = 0;
-		ipcBitsInVideoPrm.baseCreateParams.numOutQue                    = 1;
-		ipcBitsInVideoPrm.baseCreateParams.numChPerOutQue[0]            = queInfo.numCh;
-		ipcBitsInVideoPrm.baseCreateParams.outQueParams[0].nextLink     = decId;
-		Chains_ipcBitsInitCreateParams_BitsInRTOS(&ipcBitsInVideoPrm, TRUE);
-
-		for (i = 0; i < queInfo.numCh; i++)
-		{
-			decPrm.chCreateParams[i].format                               = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
-			decPrm.chCreateParams[i].profile                              = IH264VDEC_PROFILE_ANY;
-			decPrm.chCreateParams[i].targetMaxWidth                       = chainsCfg->chCfg[i+ chainsCfg->chCapNum].outWidth;
-			decPrm.chCreateParams[i].targetMaxHeight                      = chainsCfg->chCfg[i+ chainsCfg->chCapNum].outHeight;
-			decPrm.chCreateParams[i].fieldMergeDecodeEnable               = FALSE;
-			decPrm.chCreateParams[i].algCreateStatus                      = DEC_LINK_ALG_CREATE_STATUS_CREATE;
-			decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = chainsCfg->chCfg[i+ chainsCfg->chCapNum].encFrameRate;
-			decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate   = chainsCfg->chCfg[i+ chainsCfg->chCapNum].bitRate;
-			decPrm.chCreateParams[i].numBufPerCh                          = 0;
-			decPrm.chCreateParams[i].tilerEnable                          = TRUE;
-		}
-
-		decPrm.inQueParams.prevLinkId    = ipcBitsInVideoId;
-		decPrm.inQueParams.prevLinkQueId = 0;
-		decPrm.outQueParams.nextLink     = ipcOutVideoId;
-
-		ipcOutVideoPrm.inQueParams.prevLinkId    = decId;
-		ipcOutVideoPrm.inQueParams.prevLinkQueId = 0;
-		ipcOutVideoPrm.numOutQue                 = 1;
-		ipcOutVideoPrm.outQueParams[0].nextLink  = ipcInVpssId;
-		ipcOutVideoPrm.notifyNextLink            = TRUE;
-		ipcOutVideoPrm.notifyPrevLink            = FALSE;
-		ipcOutVideoPrm.noNotifyMode              = FALSE;
-
-		ipcInVpssPrm.inQueParams.prevLinkId      = ipcOutVideoId;
-		ipcInVpssPrm.inQueParams.prevLinkQueId   = 0;
-		ipcInVpssPrm.numOutQue                   = 1;
-		ipcInVpssPrm.outQueParams[0].nextLink    = swMsId;
-		ipcInVpssPrm.notifyNextLink              = TRUE;
-		ipcInVpssPrm.notifyPrevLink              = TRUE;
-		ipcInVpssPrm.noNotifyMode                = FALSE;
-
-		swMsPrm.numSwMsInst               = 1;
-		swMsPrm.swMsInstId[0]             = SYSTEM_SW_MS_SC_INST_VIP0_SC;
-		swMsPrm.inQueParams.prevLinkId    = ipcInVpssId;
-		swMsPrm.inQueParams.prevLinkQueId = 0;
-		swMsPrm.outQueParams.nextLink     = displayId;
-		swMsPrm.lineSkipMode              = FALSE;
-		swMsPrm.enableLayoutGridDraw      = TRUE;
-		swMsPrm.layoutPrm.outputFPS       = chainsCfg->chCfg[chainsCfg->chCapNum].outFrameRate;
-		swMsPrm.maxInputQueLen            = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
-		swMsPrm.maxOutRes                 = chainsCfg->displayRes[0];
-		swMsPrm.numOutBuf                 = 0;
-		swMsPrm.enableOuputDup            = FALSE;
-		swMsPrm.enableProcessTieWithDisplay = TRUE;
-
-		Chains_swMsGenerateLayoutParams(0, 1, &swMsPrm);
-
-		displayPrm.numInputQueues                = 1;
-		displayPrm.activeQueue                   = 0;
-		displayPrm.inQueParams[0].prevLinkId     = swMsId;
-		displayPrm.inQueParams[0].prevLinkQueId  = 0;
-		displayPrm.displayRes                    = chainsCfg->displayRes[0];
-		displayPrm.forceFieldSeparatedInputMode  = FALSE;
-
-	}
-
-	/*
-	 * Create Links
-	 */
-
-	if (chainsCfg->chRecNum > 0)
-	{
-		System_linkCreate(ipcBitsOutHostId,&ipcBitsOutHostPrm,sizeof(ipcBitsOutHostPrm));
-		System_linkCreate(ipcBitsInVideoId,&ipcBitsInVideoPrm,sizeof(ipcBitsInVideoPrm));
-		System_linkCreate(decId, &decPrm, sizeof(decPrm));
-		System_linkCreate(ipcOutVideoId, &ipcOutVideoPrm, sizeof(ipcOutVideoPrm));
-		System_linkCreate(ipcInVpssId, &ipcInVpssPrm, sizeof(ipcInVpssPrm));
-		System_linkCreate(swMsId, &swMsPrm, sizeof(swMsPrm));
-		System_linkCreate(displayId, &displayPrm, sizeof(displayPrm));
-	}
-
-	/*
-	 * Start Links
-	 */
-	if (chainsCfg->chRecNum > 0)
-	{
-
-		System_linkStart(displayId);
-		Vdis_start();
-		System_linkStart(swMsId);
-		System_linkStart(ipcInVpssId);
-		System_linkStart(ipcOutVideoId);
-		System_linkStart(decId);
-		System_linkStart(ipcBitsInVideoId);
-		System_linkStart(ipcBitsOutHostId);
-	}
-
-	while(1)
-	{
-		char ch;
-		ch = Chains_RecvFourDecSwMsDisMenu();
-		if(ch=='0')
-			break;
-
-		UInt32 swinId,dwinId,tmpwinId;
-		if(ch == '1') 
-		{
-
-			Chains_swMsGenerateLayoutParams(0, 1, &swMsPrm);
-			/* SWMS cmd to Switch layout from current one to a new layout */
-			System_linkControl(swMsId,
-					SYSTEM_SW_MS_LINK_CMD_SWITCH_LAYOUT , &swMsPrm.layoutPrm, sizeof(swMsPrm.layoutPrm) , TRUE);
-		}
-		if(ch == '2') 
-		{
-
-			Chains_swMsGenerateLayoutParams(0, 2, &swMsPrm);
-
-			/* SWMS cmd to Switch layout from current one to a new layout */
-			System_linkControl(swMsId,
-					SYSTEM_SW_MS_LINK_CMD_SWITCH_LAYOUT , &swMsPrm.layoutPrm, sizeof(swMsPrm.layoutPrm) , TRUE);
-		
-		}
-		if(ch == '3') 
-		{
-			Chains_swMsGenerateLayoutParams(0, 3, &swMsPrm);
-
-			/* SWMS cmd to Switch layout from current one to a new layout */
-			System_linkControl(swMsId,
-					SYSTEM_SW_MS_LINK_CMD_SWITCH_LAYOUT , &swMsPrm.layoutPrm, sizeof(swMsPrm.layoutPrm) , TRUE);
-		
-	
-		}
-		if(ch == '4') 
-		{
-
-			swinId	= Chains_getIntValue("Src Window Id : ", 0, chainsCfg->chRecNum - 1, 0);
-			dwinId  = Chains_getIntValue("Dest Window Id : ", 0, chainsCfg->chRecNum - 1, 0);
-
-			tmpwinId = swMsPrm.layoutPrm.winInfo[swinId].channelNum ;
-			swMsPrm.layoutPrm.winInfo[swinId].channelNum = swMsPrm.layoutPrm.winInfo[dwinId].channelNum ;
-			swMsPrm.layoutPrm.winInfo[dwinId].channelNum = tmpwinId;
-
-			/* SWMS cmd to Switch layout from current one to a new layout */
-			System_linkControl(swMsId,
-					SYSTEM_SW_MS_LINK_CMD_SWITCH_LAYOUT , &swMsPrm.layoutPrm, sizeof(swMsPrm.layoutPrm) , TRUE);
-		}
-		if(ch == '5') 
-		{
-			SwMsLink_WinInfo winInfo;
-			for(winInfo.winId = 0; winInfo.winId < 4;winInfo.winId++){
-				winInfo.startX	= 1920/2*(winInfo.winId%2);
-				winInfo.startY	= 1080/2*(winInfo.winId/2);
-				winInfo.width	= 1920/2;
-				winInfo.height	= 1080/2;
-
-
-				System_linkControl(swMsId,
-						SYSTEM_SW_MS_LINK_CMD_SET_CROP_PARAM , &winInfo, sizeof(winInfo) , TRUE);
-			}
-		}
-		if(ch == '6') 
-		{
-			SwMsLink_WinInfo winInfo;
-			winInfo.winId	= Chains_getIntValue("Window Id : ", 0, chainsCfg->chRecNum - 1, 0);
-			winInfo.startX	= Chains_getIntValue("startX : ", 0, 1920, 0);
-			winInfo.startY	= Chains_getIntValue("startY : ", 0, 1080, 0);
-			winInfo.width	= Chains_getIntValue("width : ", 0, 1920, 1920/2);
-			winInfo.height	= Chains_getIntValue("height : ", 0, 1080, 1080/2);
-
-
-			System_linkControl(swMsId,
-					SYSTEM_SW_MS_LINK_CMD_SET_CROP_PARAM , &winInfo, sizeof(winInfo) , TRUE);
-		}
-	}
-
-	Chains_ipcBitsStop();
-	/*
-	 * Stop Links
-	 */
-	if (chainsCfg->chRecNum > 0)
-	{
-		System_linkStop(ipcBitsOutHostId);
-		System_linkStop(ipcBitsInVideoId);
-		System_linkStop(decId);
-		System_linkStop(ipcOutVideoId);
-		System_linkStop(ipcInVpssId);
-		System_linkStop(swMsId);
-		Vdis_stop();
-		System_linkStop(displayId);
-	}
-	/*
-	 * Delete Links
-	 */
-	if (chainsCfg->chRecNum > 0) 
-	{
-		System_linkDelete(ipcBitsOutHostId);
-		System_linkDelete(ipcBitsInVideoId);
-		System_linkDelete(decId);
-		System_linkDelete(ipcOutVideoId);
-		System_linkDelete(ipcInVpssId);
-		System_linkDelete(swMsId);
-		System_linkDelete(displayId);
-
-		Chains_displayCtrlDeInit();
-	}
-
-	Chains_ipcBitsExit();
-}
-
-#if defined(__cplusplus)
-}
-#endif
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_RecvOneDecDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_RecvOneDecDis.c
deleted file mode 100644
index 6bd8cb0..0000000
--- a/dvr_rdk/demos/link_api_demos/chains/chains_RecvOneDecDis.c
+++ /dev/null
@@ -1,346 +0,0 @@
-/** ============================================================================
- *
- *  chains_RecvOneSwMsDis.c
- *
- *  Author     : zzx
- *
- *  Date       : July 23, 2013
- *
- *  Description: ipcBitsOutHost->ipcBitsInVideo->
- *  dec->ipcOutVideo->ipcInVpss->sel->swMs->display
- *  ============================================================================
- */
-
-/*  --------------------- Include system headers ---------------------------- */
-
-/*  --------------------- Include user headers   ---------------------------- */
-
-#include <mcfw/interfaces/ti_vcap.h>
-#include <demos/link_api_demos/common/chains.h>
-
-#if defined(__cplusplus)
-extern "C" {
-#endif
-
-/*
- *  --------------------- Macro definition -------------------------------------
- */
-
-/** ============================================================================
- *  @Macro:         Macro name
- *
- *  @Description:   Description of this macro.
- *  ============================================================================
- */
-
-/*
- *  --------------------- Structure definition ---------------------------------
- */
-
-/** ----------------------------------------------------------------------------
- *  @Name:          Structure name
- *
- *  @Description:   Description of the structure.
- *
- *  @Field:         Field1 member
- *
- *  @Field          Field2 member
- *  ----------------------------------------------------------------------------
- */
-
-/*
- *  --------------------- Global variable definition ---------------------------
- */
-
-/** ----------------------------------------------------------------------------
- *  @Name:          systemVid_encDecIvaChMapTbl
- *
- *  @Description:   Data structure to assign the video channles to all 3 IVA-HDs.
- * -----------------------------------------------------------------------------
- */
-
-static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
-{
-	.isPopulated = 1,
-	.ivaMap[0] =
-	{
-		.EncNumCh  = 0,
-		.EncChList = {0},
-		.DecNumCh  = 2,
-		.DecChList = {0,1},
-	},
-	.ivaMap[1] =
-	{
-		.EncNumCh  = 0,
-		.EncChList = {0},
-		.DecNumCh  = 2,
-		.DecChList = {2,3},
-	},
-	.ivaMap[2] =
-	{
-		.EncNumCh  = 0,
-		.EncChList = {0},
-		.DecNumCh  = 3,
-		.DecChList = {4,5},
-	},
-};
-
-/*
- *  --------------------- Public function definition ---------------------------
- */
-
-Void Chains_RecvOneDecDis(Chains_Ctrl *chainsCfg)
-{
-
-	IpcBitsOutLinkHLOS_CreateParams  	ipcBitsOutHostPrm;
-	IpcBitsInLinkRTOS_CreateParams   	ipcBitsInVideoPrm;
-	DecLink_CreateParams              	decPrm;
-	IpcLink_CreateParams              	ipcOutVideoPrm;
-	IpcLink_CreateParams              	ipcInVpssPrm;
-	SelectLink_CreateParams           	selPrm;
-	SwMsLink_CreateParams             	swMsPrm;
-	DisplayLink_CreateParams          	displayPrm;
-
-	UInt32 ipcBitsOutHostId;
-	UInt32 ipcBitsInVideoId;
-	UInt32 decId;
-	UInt32 ipcOutVideoId;
-	UInt32 ipcInVpssId;
-	UInt32 selId;
-	UInt32 swMsId;
-	UInt32 displayId;
-
-	int i;
-
-	CHAINS_INIT_STRUCT(IpcBitsOutLinkHLOS_CreateParams,ipcBitsOutHostPrm);
-	CHAINS_INIT_STRUCT(IpcBitsInLinkRTOS_CreateParams,ipcBitsInVideoPrm);
-	CHAINS_INIT_STRUCT(DecLink_CreateParams,decPrm);
-	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoPrm);
-	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssPrm);
-	CHAINS_INIT_STRUCT(SelectLink_CreateParams,selPrm);
-	CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm);
-	CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm);
-
-	ipcBitsOutHostId    = SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0;
-	ipcBitsInVideoId    = SYSTEM_VIDEO_LINK_ID_IPC_BITS_IN_0;
-	decId               = SYSTEM_LINK_ID_VDEC_0;
-	ipcOutVideoId    	= SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_0;
-	ipcInVpssId      	= SYSTEM_VPSS_LINK_ID_IPC_IN_M3_0;
-	selId               = SYSTEM_VPSS_LINK_ID_SELECT_0;
-	swMsId   	        = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
-	displayId			= SYSTEM_LINK_ID_DISPLAY_0;
-
-
-	Chains_ipcBitsInit();
-
-/* Update channel to IVAHD mapping */
-	System_linkControl(
-			SYSTEM_LINK_ID_M3VIDEO,
-			SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
-			&systemVid_encDecIvaChMapTbl,
-			sizeof(SystemVideo_Ivahd2ChMap_Tbl),
-			TRUE
-			);
-
-
-	for(i =0;i<gChains_ctrl.chRecNum;i++)
-	{
-		gChains_ctrl.chCfg[i+gChains_ctrl.chCapNum].channel = i;
-	}
-
-/* Recv + Dec + Sel + SwMs + Dis */
-	if(chainsCfg->chRecNum > 0)
-	{
-
-		for(i=chainsCfg->chCapNum; i<chainsCfg->chNum; i++)
-		{
-			chainsCfg->displayRes[i-chainsCfg->chCapNum] = chainsCfg->displayRes[i];
-		}
-
-		Chains_displayCtrlInit(chainsCfg->displayRes);
-
-		System_LinkQueInfo queInfo;
-		queInfo.numCh = chainsCfg->chRecNum;
-
-		for (i=0; i<queInfo.numCh; i++) 
-		{
-			queInfo.chInfo[i].bufType           = SYSTEM_BUF_TYPE_VIDBITSTREAM;
-			queInfo.chInfo[i].codingformat      = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
-			queInfo.chInfo[i].width             = chainsCfg->chCfg[i + chainsCfg->chCapNum].outWidth;
-			queInfo.chInfo[i].height            = chainsCfg->chCfg[i + chainsCfg->chCapNum].outHeight;
-			queInfo.chInfo[i].memType           = SYSTEM_MT_TILEDMEM;
-			queInfo.chInfo[i].dataFormat        = SYSTEM_DF_YUV420P;
-			queInfo.chInfo[i].scanFormat        = SYSTEM_SF_PROGRESSIVE;
-		}
-
-		ipcBitsOutHostPrm.baseCreateParams.numOutQue                    = 1;
-		ipcBitsOutHostPrm.baseCreateParams.numChPerOutQue[0]            = queInfo.numCh;
-		ipcBitsOutHostPrm.baseCreateParams.outQueParams[0].nextLink     = ipcBitsInVideoId;
-		Chains_ipcBitsInitCreateParams_BitsOutHLOS(&ipcBitsOutHostPrm, &queInfo);
-
-		ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkId       = ipcBitsOutHostId;
-		ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkQueId    = 0;
-		ipcBitsInVideoPrm.baseCreateParams.numOutQue                    = 1;
-		ipcBitsInVideoPrm.baseCreateParams.numChPerOutQue[0]            = queInfo.numCh;
-		ipcBitsInVideoPrm.baseCreateParams.outQueParams[0].nextLink     = decId;
-		Chains_ipcBitsInitCreateParams_BitsInRTOS(&ipcBitsInVideoPrm, TRUE);
-
-
-		for (i = 0; i < queInfo.numCh; i++)
-		{
-			decPrm.chCreateParams[i].format                               = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
-			decPrm.chCreateParams[i].profile                              = IH264VDEC_PROFILE_ANY;
-			decPrm.chCreateParams[i].targetMaxWidth                       = chainsCfg->chCfg[i+ chainsCfg->chCapNum].outWidth;
-			decPrm.chCreateParams[i].targetMaxHeight                      = chainsCfg->chCfg[i+ chainsCfg->chCapNum].outHeight;
-			decPrm.chCreateParams[i].fieldMergeDecodeEnable               = FALSE;
-			decPrm.chCreateParams[i].algCreateStatus                      = DEC_LINK_ALG_CREATE_STATUS_CREATE;
-			decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = chainsCfg->chCfg[i+ chainsCfg->chCapNum].encFrameRate;
-			decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate   = chainsCfg->chCfg[i+ chainsCfg->chCapNum].bitRate;
-			decPrm.chCreateParams[i].numBufPerCh                          = 0;
-			decPrm.chCreateParams[i].tilerEnable                          = TRUE;
-		}
-
-		decPrm.inQueParams.prevLinkId    = ipcBitsInVideoId;
-		decPrm.inQueParams.prevLinkQueId = 0;
-		decPrm.outQueParams.nextLink     = ipcOutVideoId;
-
-		ipcOutVideoPrm.inQueParams.prevLinkId    = decId;
-		ipcOutVideoPrm.inQueParams.prevLinkQueId = 0;
-		ipcOutVideoPrm.numOutQue                 = 1;
-		ipcOutVideoPrm.outQueParams[0].nextLink  = ipcInVpssId;
-		ipcOutVideoPrm.notifyNextLink            = TRUE;
-		ipcOutVideoPrm.notifyPrevLink            = FALSE;
-		ipcOutVideoPrm.noNotifyMode              = FALSE;
-
-		ipcInVpssPrm.inQueParams.prevLinkId      = ipcOutVideoId;
-		ipcInVpssPrm.inQueParams.prevLinkQueId   = 0;
-		ipcInVpssPrm.numOutQue                   = 1;
-		ipcInVpssPrm.outQueParams[0].nextLink    = selId;
-		ipcInVpssPrm.notifyNextLink              = TRUE;
-		ipcInVpssPrm.notifyPrevLink              = TRUE;
-		ipcInVpssPrm.noNotifyMode                = FALSE;
-
-		selPrm.inQueParams.prevLinkId      		 = ipcInVpssId;
-		selPrm.inQueParams.prevLinkQueId   		 = 0;
-		selPrm.numOutQue                   		 = 1;
-
-		selPrm.outQueParams[0].nextLink    		 = swMsId;
-		selPrm.outQueChInfo[0].outQueId    		 = 0;
-		selPrm.outQueChInfo[0].numOutCh    		 = 1;
-		selPrm.outQueChInfo[0].inChNum[0]  		 = 0;
-
-		swMsPrm.numSwMsInst              		 = 1;
-		swMsPrm.swMsInstId[0]            		 = SYSTEM_SW_MS_SC_INST_VIP1_SC;
-		swMsPrm.inQueParams.prevLinkId   		 = selId;
-		swMsPrm.inQueParams.prevLinkQueId		 = 0;
-		swMsPrm.outQueParams.nextLink    		 = displayId;
-		swMsPrm.lineSkipMode             		 = FALSE;
-		swMsPrm.enableLayoutGridDraw     		 = TRUE;
-		swMsPrm.layoutPrm.outputFPS      		 = chainsCfg->chCfg[chainsCfg->chCapNum].outFrameRate;
-		swMsPrm.maxInputQueLen           		 = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
-		swMsPrm.maxOutRes                		 = chainsCfg->displayRes[0];
-		swMsPrm.numOutBuf                		 = 0;
-
-		Chains_swMsGenerateLayoutParams(0, 2, &swMsPrm);
-
-		displayPrm.numInputQueues                = 1;
-		displayPrm.activeQueue                   = 0;
-		displayPrm.inQueParams[0].prevLinkId     = swMsId;
-		displayPrm.inQueParams[0].prevLinkQueId  = 0;
-		displayPrm.displayRes                    = chainsCfg->displayRes[0];
-		displayPrm.forceFieldSeparatedInputMode  = FALSE;
-
-	}
-	/*
-	 * Create Links
-	 */
-	if (chainsCfg->chRecNum > 0)
-	{
-		System_linkCreate(ipcBitsOutHostId,&ipcBitsOutHostPrm,sizeof(ipcBitsOutHostPrm));
-		System_linkCreate(ipcBitsInVideoId,&ipcBitsInVideoPrm,sizeof(ipcBitsInVideoPrm));
-		System_linkCreate(decId, &decPrm, sizeof(decPrm));
-		System_linkCreate(ipcOutVideoId, &ipcOutVideoPrm, sizeof(ipcOutVideoPrm));
-		System_linkCreate(ipcInVpssId, &ipcInVpssPrm, sizeof(ipcInVpssPrm));
-		System_linkCreate(selId, &selPrm, sizeof(selPrm));
-		System_linkCreate(swMsId, &swMsPrm, sizeof(swMsPrm));
-		System_linkCreate(displayId, &displayPrm, sizeof(displayPrm));
-	}
-
-	/*
-	 * Start Links
-	 */
-	if (chainsCfg->chRecNum > 0)
-	{
-
-		Vdis_start();
-		System_linkStart(displayId);
-		System_linkStart(swMsId);
-		System_linkStart(selId);
-		System_linkStart(ipcInVpssId);
-		System_linkStart(ipcOutVideoId);
-		System_linkStart(decId);
-		System_linkStart(ipcBitsInVideoId);
-		System_linkStart(ipcBitsOutHostId);
-	}
-
-	while(1)
-	{
-		char ch;
-		int chId;
-		ch = Chains_RecvOneDecDisMenu();
-		if(ch=='0')
-			break;
-
-		if(ch == '1') 
-		{
-
-			chId   = Chains_getIntValue("Channel Id : ", 0, chainsCfg->chRecNum - 1, 0);
-
-			selPrm.outQueChInfo[0].inChNum[0] = chId;
-
-			/* Dynamically change channels mapped to a output que */
-			System_linkControl(selId,
-					SELECT_LINK_CMD_SET_OUT_QUE_CH_INFO , &selPrm.outQueChInfo[0],sizeof(selPrm.outQueChInfo[0]) , TRUE);
-		}
-
-	}
-
-	Chains_ipcBitsStop();
-	/*
-	 * Stop Links
-	 */
-	if (chainsCfg->chRecNum > 0)
-	{
-		System_linkStop(ipcBitsOutHostId);
-		System_linkStop(ipcBitsInVideoId);
-		System_linkStop(decId);
-		System_linkStop(ipcOutVideoId);
-		System_linkStop(ipcInVpssId);
-		System_linkStop(selId);
-		System_linkStop(swMsId);
-		Vdis_stop();
-		System_linkStop(displayId);
-	}
-
-	/*
-	 * Delete Links
-	 */
-	if (chainsCfg->chRecNum > 0) {
-		System_linkDelete(ipcBitsOutHostId);
-		System_linkDelete(ipcBitsInVideoId);
-		System_linkDelete(decId);
-		System_linkDelete(ipcOutVideoId);
-		System_linkDelete(ipcInVpssId);
-		System_linkDelete(selId);
-		System_linkDelete(swMsId);
-		System_linkDelete(displayId);
-
-		Chains_displayCtrlDeInit();
-	}
-
-	Chains_ipcBitsExit();
-}
-
-#if defined(__cplusplus)
-}
-#endif
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_SelCapNsfEncDecSwMsDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_SelCapNsfEncDecSwMsDis.c
deleted file mode 100644
index 4673887..0000000
--- a/dvr_rdk/demos/link_api_demos/chains/chains_SelCapNsfEncDecSwMsDis.c
+++ /dev/null
@@ -1,338 +0,0 @@
-/** ============================================================================
- *
- *  Chains_SelCapNsfEncDecSwMsDis.c
- *
- *  Author     : zzx
- *
- *  Date       : July 21, 2014
- *
- *  Description:	Cap + Enc + Dec + SwMs + Display
- *
- *			|-vipInst0->|
- *	capture-|   		|->nsf->enc->dec->swMs0->display0
- *			|-vipInst1->|
- *
- *
- *  ============================================================================
- */
-
-
-#include <demos/link_api_demos/common/chains.h>
-#include <mcfw/interfaces/ti_vcap.h>
-
-static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
-{
-    .isPopulated = 1,
-    .ivaMap[0] =
-    {
-        .EncNumCh  = 10,
-        .EncChList = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0 , 0, 0},
-        .DecNumCh  = 0,
-        .DecChList = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
-    },
-    .ivaMap[1] =
-    {
-        .EncNumCh  = 0,
-        .EncChList = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31},
-        .DecNumCh  = 12,
-        .DecChList = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0 , 0, 0},
-    },
-    .ivaMap[2] =
-    {
-        .EncNumCh  = 6,
-        .EncChList = {10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
-        .DecNumCh  = 4,
-        .DecChList = {12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
-    },
-};
-
-Void Chains_SelCapNsfEncDecSwMsDis(Chains_Ctrl *chainsCfg)
-{
-    CaptureLink_CreateParams    capturePrm;
-    CaptureLink_VipInstParams   *pCaptureInstPrm;
-    CaptureLink_OutParams       *pCaptureOutPrm;
-    NsfLink_CreateParams        nsfPrm;
-    SwMsLink_CreateParams       swMsPrm;
-    DisplayLink_CreateParams    displayPrm;
-    EncLink_CreateParams        encPrm;
-    DecLink_CreateParams        decPrm;
-    IpcLink_CreateParams        ipcOutVpssPrm;
-    IpcLink_CreateParams        ipcInVpssPrm;
-    IpcLink_CreateParams        ipcOutVideoPrm;
-    IpcLink_CreateParams        ipcInVideoPrm;
-
-    UInt32 captureId, displayId;
-    UInt32 nsfId, swMsId;
-    UInt32 vipInstId;
-    UInt32 encId, decId;
-    UInt32 ipcOutVpssId, ipcInVpssId;
-    UInt32 ipcOutVideoId, ipcInVideoId;
-
-	int i;
-
-    CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
-    CHAINS_INIT_STRUCT(NsfLink_CreateParams,nsfPrm);
-    CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm);
-    CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVpssPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVideoPrm);
-    CHAINS_INIT_STRUCT(EncLink_CreateParams,encPrm);
-    CHAINS_INIT_STRUCT(DecLink_CreateParams,decPrm);
-
-    captureId = SYSTEM_LINK_ID_CAPTURE;
-    nsfId     = SYSTEM_LINK_ID_NSF_0;
-    swMsId    = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
-    displayId = SYSTEM_LINK_ID_DISPLAY_0;
-
-    encId        = SYSTEM_LINK_ID_VENC_0;
-    decId        = SYSTEM_LINK_ID_VDEC_0;
-
-    ipcOutVpssId = SYSTEM_VPSS_LINK_ID_IPC_OUT_M3_0;
-    ipcInVideoId = SYSTEM_VIDEO_LINK_ID_IPC_IN_M3_0;
-    ipcOutVideoId= SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_0;
-    ipcInVpssId  = SYSTEM_VPSS_LINK_ID_IPC_IN_M3_0;
-
-
-	for(i =0;i<gChains_ctrl.chRecNum;i++)
-	{
-		gChains_ctrl.chCfg[i+gChains_ctrl.chCapNum].channel = i;
-	}
-
-	System_linkControl(
-			SYSTEM_LINK_ID_M3VIDEO,
-			SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
-			&systemVid_encDecIvaChMapTbl,
-			sizeof(SystemVideo_Ivahd2ChMap_Tbl),
-			TRUE
-			);
-
-	VCAP_PARAMS_S  prm;
-	Vcap_params_init(&prm);
-	capturePrm.numVipInst 				= chainsCfg->chCapNum;
-	capturePrm.tilerEnable              = FALSE;
-	capturePrm.numBufsPerCh             = CAPTURE_LINK_NUM_BUFS_PER_CH_DEFAULT;
-	capturePrm.numExtraBufs             = 0;
-	capturePrm.maxBlindAreasPerCh       = 0;
-	capturePrm.isPalMode                = FALSE;
-	capturePrm.enableSdCrop             = FALSE;
-	capturePrm.doCropInCapture          = FALSE;
-
-    for(i=0; i<capturePrm.numVipInst; i++)
-    {
-
-#if defined(TI816X_ETVH)
-		vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-		pCaptureInstPrm						= &capturePrm.vipInst[i];
-		pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-#if defined(TI816X_ETVS)
-		vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
-		pCaptureInstPrm						= &capturePrm.vipInst[i];
-		pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
-		pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
-#endif
-#if defined(TI8107_INS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-
-
-		prm.channelParams[i].deviceId = vipInstId;
-		prm.enableConfigExtVideoDecoder = TRUE;
-		prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
-
-		pCaptureInstPrm->vipInstId          = vipInstId%SYSTEM_CAPTURE_INST_MAX;
-		pCaptureInstPrm->inDataFormat       = SYSTEM_DF_YUV422P;
-		pCaptureInstPrm->standard           = chainsCfg->chCfg[i].inStd;
-		pCaptureInstPrm->numOutput          = 1;
-		pCaptureInstPrm->numChPerOutput     = 1;
-
-		pCaptureOutPrm                      = &pCaptureInstPrm->outParams[0];
-        pCaptureOutPrm->dataFormat          = SYSTEM_DF_YUV422I_YUYV;
-        pCaptureOutPrm->scEnable            = FALSE;
-        pCaptureOutPrm->outQueId            = 0;
-    }
-    capturePrm.outQueParams[0].nextLink = nsfId;
-
-    nsfPrm.inQueParams.prevLinkId    = captureId;
-    nsfPrm.inQueParams.prevLinkQueId = 0;
-    nsfPrm.bypassNsf                 = FALSE;
-    nsfPrm.tilerEnable               = TRUE;
-    nsfPrm.numOutQue                 = 1;
-    nsfPrm.outQueParams[0].nextLink  = ipcOutVpssId;
-    nsfPrm.numBufsPerCh              = 0;
-
-    ipcOutVpssPrm.inQueParams.prevLinkId    = nsfId;
-    ipcOutVpssPrm.inQueParams.prevLinkQueId = 0;
-    ipcOutVpssPrm.numOutQue                 = 1;
-    ipcOutVpssPrm.numChPerOutQue[0]         = 1;
-    ipcOutVpssPrm.outQueParams[0].nextLink  = ipcInVideoId;
-    ipcOutVpssPrm.notifyNextLink            = TRUE;
-    ipcOutVpssPrm.notifyPrevLink            = FALSE;
-    ipcOutVpssPrm.noNotifyMode              = FALSE;
-    ipcOutVpssPrm.numChPerOutQue[0]         = 0;
-    ipcOutVpssPrm.equallyDivideChAcrossOutQues = FALSE;
-
-    ipcInVideoPrm.inQueParams.prevLinkId    = ipcOutVpssId;
-    ipcInVideoPrm.inQueParams.prevLinkQueId = 0;
-    ipcInVideoPrm.numOutQue                 = 1;
-    ipcInVideoPrm.numChPerOutQue[0]         = 1;
-    ipcInVideoPrm.outQueParams[0].nextLink  = encId;
-    ipcInVideoPrm.notifyNextLink            = TRUE;
-    ipcInVideoPrm.notifyPrevLink            = FALSE;
-    ipcInVideoPrm.noNotifyMode              = FALSE;
-    ipcInVideoPrm.numChPerOutQue[0]         = 0;
-    ipcInVideoPrm.equallyDivideChAcrossOutQues = FALSE;
-
-    for (i=0; i<chainsCfg->chCapNum; i++) {
-        encPrm.chCreateParams[i].format                             = chainsCfg->chCfg[i].encFormat;
-        encPrm.chCreateParams[i].profile                            = chainsCfg->chCfg[i].encProfile;
-        encPrm.chCreateParams[i].dataLayout                         = IVIDEO_FIELD_SEPARATED;
-        encPrm.chCreateParams[i].fieldMergeEncodeEnable             = FALSE;
-        encPrm.chCreateParams[i].enableAnalyticinfo                 = FALSE;
-        encPrm.chCreateParams[i].enableWaterMarking                 = FALSE;
-        encPrm.chCreateParams[i].encodingPreset                     = XDM_USER_DEFINED;
-        encPrm.chCreateParams[i].rateControlPreset                  = IVIDEO_USER_DEFINED;
-        encPrm.chCreateParams[i].enableHighSpeed                    = FALSE;
-        encPrm.chCreateParams[i].defaultDynamicParams.interFrameInterval  = 1;
-        encPrm.chCreateParams[i].defaultDynamicParams.intraFrameInterval  = chainsCfg->chCfg[i].intraFrameInterval;
-        encPrm.chCreateParams[i].defaultDynamicParams.inputFrameRate      = chainsCfg->chCfg[i].inFrameRate;
-        encPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate     = chainsCfg->chCfg[i].encFrameRate;
-        encPrm.chCreateParams[i].defaultDynamicParams.targetBitRate       = chainsCfg->chCfg[i].bitRate;
-        encPrm.chCreateParams[i].defaultDynamicParams.mvAccuracy          = IVIDENC2_MOTIONVECTOR_QUARTERPEL;
-        encPrm.chCreateParams[i].defaultDynamicParams.rcAlg               = chainsCfg->chCfg[i].rateCtrl;
-        encPrm.chCreateParams[i].defaultDynamicParams.qpMin               = 0;
-        encPrm.chCreateParams[i].defaultDynamicParams.qpMax               = 51;
-        encPrm.chCreateParams[i].defaultDynamicParams.qpInit              = -1;
-        encPrm.chCreateParams[i].defaultDynamicParams.vbrDuration         = 8;
-        encPrm.chCreateParams[i].defaultDynamicParams.vbrSensitivity      = 0;
-	}
-	encPrm.inQueParams.prevLinkId   = ipcInVideoId;
-	encPrm.inQueParams.prevLinkQueId= 0;
-	encPrm.outQueParams.nextLink    = decId;
-	encPrm.numBufPerCh[0]           = 0;
-
-	for(i=chainsCfg->chCapNum; i<chainsCfg->chNum; i++)
-	{
-		chainsCfg->displayRes[i-chainsCfg->chCapNum] = chainsCfg->displayRes[i];
-	}
-
-	Chains_displayCtrlInit(chainsCfg->displayRes);
-
-
-	for (i=0; i<chainsCfg->chRecNum; i++) {
-		decPrm.chCreateParams[i].format                               = chainsCfg->chCfg[i].encFormat;
-		decPrm.chCreateParams[i].profile                              = IH264VDEC_PROFILE_ANY;
-		decPrm.chCreateParams[i].targetMaxWidth                       = chainsCfg->chCfg[i].inWidth;
-		decPrm.chCreateParams[i].targetMaxHeight                      = chainsCfg->chCfg[i].inHeight;
-		decPrm.chCreateParams[i].fieldMergeDecodeEnable               = TRUE;
-		decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = chainsCfg->chCfg[i].encFrameRate;
-		decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate   = chainsCfg->chCfg[i].bitRate;
-		decPrm.chCreateParams[i].numBufPerCh                          = 0;
-	}
-	decPrm.inQueParams.prevLinkId    = encId;
-	decPrm.inQueParams.prevLinkQueId = 0;
-    decPrm.outQueParams.nextLink     = ipcOutVideoId;
-
-    ipcOutVideoPrm.inQueParams.prevLinkId    = decId;
-    ipcOutVideoPrm.inQueParams.prevLinkQueId = 0;
-    ipcOutVideoPrm.numOutQue                 = 1;
-    ipcOutVideoPrm.outQueParams[0].nextLink  = ipcInVpssId;
-    ipcOutVideoPrm.notifyNextLink            = TRUE;
-    ipcOutVideoPrm.notifyPrevLink            = FALSE;
-    ipcOutVideoPrm.noNotifyMode              = FALSE;
-    ipcOutVideoPrm.numChPerOutQue[0]         = 0;
-    ipcOutVideoPrm.equallyDivideChAcrossOutQues = FALSE;
-
-    ipcInVpssPrm.inQueParams.prevLinkId    = ipcOutVideoId;
-    ipcInVpssPrm.inQueParams.prevLinkQueId = 0;
-    ipcInVpssPrm.numOutQue                 = 1;
-    ipcInVpssPrm.outQueParams[0].nextLink  = swMsId;
-    ipcInVpssPrm.notifyNextLink            = TRUE;
-    ipcInVpssPrm.notifyPrevLink            = FALSE;
-    ipcInVpssPrm.noNotifyMode              = FALSE;
-    ipcInVpssPrm.equallyDivideChAcrossOutQues = FALSE;
-    ipcInVpssPrm.numChPerOutQue[0]         = 0;
-
-    swMsPrm.numSwMsInst               = 1;
-    swMsPrm.swMsInstId[0]             = SYSTEM_SW_MS_SC_INST_SC5;
-    swMsPrm.inQueParams.prevLinkId    = ipcInVpssId;
-    swMsPrm.inQueParams.prevLinkQueId = 0;
-    swMsPrm.outQueParams.nextLink     = displayId;
-    swMsPrm.lineSkipMode              = FALSE;
-    swMsPrm.enableLayoutGridDraw      = TRUE;
-    swMsPrm.layoutPrm.outputFPS       = chainsCfg->chCfg[0].outFrameRate;
-    swMsPrm.maxInputQueLen            = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
-    swMsPrm.maxOutRes                 = chainsCfg->displayRes[0];
-    swMsPrm.numOutBuf                 = 0;
-
-    Chains_swMsGenerateLayoutParams(0, 1, &swMsPrm);
-
-	displayPrm.numInputQueues                = 1;
-	displayPrm.activeQueue                   = 0;
-	displayPrm.inQueParams[0].prevLinkId    = swMsId;
-	displayPrm.inQueParams[0].prevLinkQueId = 0;
-	displayPrm.displayRes                   = chainsCfg->displayRes[0];
-	displayPrm.displayId                    	= DISPLAY_LINK_DISPLAY_AUTO_SELECT;
-
-	System_linkCreate(captureId, &capturePrm, sizeof(capturePrm));
-	System_linkCreate(nsfId, &nsfPrm, sizeof(nsfPrm));
-	System_linkCreate(ipcOutVpssId, &ipcOutVpssPrm, sizeof(ipcOutVpssPrm));
-	System_linkCreate(ipcInVideoId, &ipcInVideoPrm, sizeof(ipcInVideoPrm));
-	System_linkCreate(encId, &encPrm, sizeof(encPrm));
-
-	System_linkCreate(decId, &decPrm, sizeof(decPrm));
-	System_linkCreate(ipcOutVideoId, &ipcOutVideoPrm, sizeof(ipcOutVideoPrm));
-	System_linkCreate(ipcInVpssId, &ipcInVpssPrm, sizeof(ipcInVpssPrm));
-	System_linkCreate(swMsId, &swMsPrm, sizeof(swMsPrm));
-	System_linkCreate(displayId, &displayPrm, sizeof(displayPrm));
-
-
-	System_linkStart(displayId);
-	Vdis_start();
-	System_linkStart(swMsId);
-	System_linkStart(decId);
-	System_linkStart(encId);
-	System_linkStart(nsfId);
-	System_linkStart(captureId);
-	Vcap_init(&prm);
-	Vcap_start();
-
-
-	while(1)
-	{
-		char ch;
-		ch = Chains_menuRunTime();
-		if(ch=='0')
-			break;
-		if(ch=='v')
-			System_linkControl(captureId, CAPTURE_LINK_CMD_FORCE_RESET, NULL, 0, TRUE);
-		if(ch=='p')
-			System_linkControl(captureId, CAPTURE_LINK_CMD_PRINT_ADV_STATISTICS, NULL, 0, TRUE);
-	}
-
-	System_linkStop(captureId);
-	Vcap_stop();
-	System_linkStop(nsfId);
-	System_linkStop(encId);
-	System_linkStop(decId);
-	System_linkStop(swMsId);
-	System_linkStop(displayId);
-	Vdis_stop();
-
-    System_linkDelete(captureId);
-    System_linkDelete(nsfId);
-    System_linkDelete(ipcOutVpssId);
-    System_linkDelete(ipcInVideoId);
-    System_linkDelete(encId);
-    System_linkDelete(decId);
-    System_linkDelete(ipcOutVideoId);
-    System_linkDelete(ipcInVpssId);
-    System_linkDelete(swMsId);
-    System_linkDelete(displayId);
-
-    Chains_displayCtrlDeInit();
-}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_SelCapSelRecv.c b/dvr_rdk/demos/link_api_demos/chains/chains_SelCapSelRecv.c
deleted file mode 100644
index 4c12dee..0000000
--- a/dvr_rdk/demos/link_api_demos/chains/chains_SelCapSelRecv.c
+++ /dev/null
@@ -1,616 +0,0 @@
-/** ============================================================================
- *
- *  Chains_SelCapSelRecv.c
- *
- *  Author     : zzx
- *
- *  Date       : July 21, 2014
- *
- *  Description:	Cap + Enc + Send
- *  				Net + Dec + Display
- *			|-vipInst0->|
- *	capture-|   		|->dup->enc->send
- *			|-vipInst1->|
- *
- *					  |->swms0->display0
- *	receive->dec->sel-|
- *					  |->swms1->display1
- *  ============================================================================
- */
-
-
-#include <demos/link_api_demos/common/chains.h>
-#include <mcfw/interfaces/ti_vcap.h>
-
-static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
-{
-    .isPopulated = 1,
-    .ivaMap[0] =
-    {
-        .EncNumCh  = 1,
-        .EncChList = {0},
-        .DecNumCh  = 0,
-        .DecChList = {0},
-    },
-    .ivaMap[1] =
-    {
-        .EncNumCh  = 0,
-        .EncChList = {0},
-        .DecNumCh  = 1,
-        .DecChList = {0},
-    },
-    .ivaMap[2] =
-    {
-        .EncNumCh  = 1,
-        .EncChList = {1},
-        .DecNumCh  = 1,
-        .DecChList = {1},
-    },
-};
-
-Void Chains_SelCapSelRecv(Chains_Ctrl *chainsCfg)
-{
-
-	 CaptureLink_CreateParams            capturePrm;
-	 CaptureLink_VipInstParams           *pCaptureInstPrm;
-	 CaptureLink_OutParams               *pCaptureOutPrm;
-	 NsfLink_CreateParams				 nsfPrm;
-	 DupLink_CreateParams                dupPrm;
-	 IpcLink_CreateParams                ipcOutVpssPrm;
-	 IpcLink_CreateParams                ipcInVideoPrm;
-	 EncLink_CreateParams                encPrm;
-	 IpcBitsOutLinkRTOS_CreateParams     ipcBitsOutVideoPrm;
-	 IpcBitsInLinkHLOS_CreateParams      ipcBitsInHostPrm;
-
-	 UInt32 captureId, vipInstId;
-	 UInt32 nsfId,dupId;
-	 UInt32 ipcOutVpssId;
-	 UInt32 ipcInVideoId;
-	 UInt32 encId;
-	 UInt32 ipcBitsOutVideoId;
-	 UInt32 ipcBitsInHostId;
-
-	 IpcBitsOutLinkHLOS_CreateParams   ipcBitsOutHostPrm;
-	 IpcBitsInLinkRTOS_CreateParams    ipcBitsInVideoPrm;
-	 DecLink_CreateParams              decPrm;
-	 IpcLink_CreateParams              ipcOutVideoEncPrm;
-	 IpcLink_CreateParams              ipcInVpssEncPrm;
-     SelectLink_CreateParams           selPrm;
-	 SwMsLink_CreateParams             swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-	 DisplayLink_CreateParams          displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-
-	 UInt32 ipcBitsOutHostId;
-	 UInt32 ipcBitsInVideoId;
-	 UInt32 decId;
-	 UInt32 ipcOutVideoEncId;
-	 UInt32 ipcInVpssEncId;
-     UInt32 selId;
-	 UInt32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
-	 UInt32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
-
-	 int i;
-
-	 for(i =0;i<gChains_ctrl.chRecNum;i++)
-	 {
-		gChains_ctrl.chCfg[i+gChains_ctrl.chCapNum].channel = i;
-	 }
-
-	Chains_ipcBitsInit();
-	System_linkControl(
-		SYSTEM_LINK_ID_M3VIDEO,
-		SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
-		&systemVid_encDecIvaChMapTbl,
-		sizeof(SystemVideo_Ivahd2ChMap_Tbl),
-		TRUE
-	);
-
-	/*
-	 * Local capture + Enc + send
-	 */
-	VCAP_PARAMS_S  prm;
-	Vcap_params_init(&prm);
-	if(chainsCfg->chCapNum > 0)
-	{
-		CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
-		CHAINS_INIT_STRUCT(NsfLink_CreateParams,nsfPrm);
-		CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVpssPrm);
-		CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVideoPrm);
-		CHAINS_INIT_STRUCT(EncLink_CreateParams,encPrm);
-		CHAINS_INIT_STRUCT(IpcBitsOutLinkRTOS_CreateParams,ipcBitsOutVideoPrm);
-		CHAINS_INIT_STRUCT(IpcBitsInLinkHLOS_CreateParams,ipcBitsInHostPrm);
-
-		captureId     = SYSTEM_LINK_ID_CAPTURE;
-		nsfId     	  = SYSTEM_LINK_ID_NSF_0;
-		dupId         =SYSTEM_VPSS_LINK_ID_DUP_0;
-		ipcOutVpssId  = SYSTEM_VPSS_LINK_ID_IPC_OUT_M3_0;
-		ipcInVideoId  = SYSTEM_VIDEO_LINK_ID_IPC_IN_M3_0;
-		encId         = SYSTEM_LINK_ID_VENC_0;
-		ipcBitsOutVideoId   = SYSTEM_VIDEO_LINK_ID_IPC_BITS_OUT_0;
-		ipcBitsInHostId     = SYSTEM_HOST_LINK_ID_IPC_BITS_IN_0;
-
-		capturePrm.numVipInst               = chainsCfg->chCapNum;
-		capturePrm.tilerEnable              = TRUE;
-		capturePrm.numBufsPerCh             = 16;
-		capturePrm.numExtraBufs             = 0;
-		capturePrm.maxBlindAreasPerCh       = 0;
-		capturePrm.isPalMode                = FALSE;
-		capturePrm.enableSdCrop             = FALSE;
-		capturePrm.doCropInCapture          = FALSE;
-
-
-		for(i=0; i<capturePrm.numVipInst; i++)
-		{
-#if defined(TI816X_ETVH)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-#if defined(TI816X_ETVS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
-			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
-#endif
-#if defined(TI8107_INS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-
-			prm.channelParams[i].deviceId = vipInstId;
-			prm.enableConfigExtVideoDecoder = TRUE;
-			prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
-
-			pCaptureInstPrm->vipInstId          = vipInstId%SYSTEM_CAPTURE_INST_MAX;
-			pCaptureInstPrm->inDataFormat       = SYSTEM_DF_YUV422P;
-			pCaptureInstPrm->standard           = chainsCfg->chCfg[i].inStd;
-			pCaptureInstPrm->numOutput          = 1;
-			pCaptureInstPrm->numChPerOutput     = 1;
-
-			pCaptureOutPrm                      = &pCaptureInstPrm->outParams[0];
-			pCaptureOutPrm->dataFormat          = SYSTEM_DF_YUV422I_YUYV;
-			pCaptureOutPrm->scEnable            = FALSE;
-			pCaptureOutPrm->outQueId            = 0;
-		}
-		capturePrm.outQueParams[0].nextLink     = nsfId;
-
-		nsfPrm.inQueParams.prevLinkId    = captureId;
-		nsfPrm.inQueParams.prevLinkQueId = 0;
-		nsfPrm.bypassNsf                 = TRUE;
-		nsfPrm.tilerEnable               = TRUE;
-		nsfPrm.numOutQue                 = 1;
-		nsfPrm.outQueParams[0].nextLink  = dupId;
-		nsfPrm.numBufsPerCh              = 0;
-
-		dupPrm.inQueParams.prevLinkId           = nsfId;
-		dupPrm.inQueParams.prevLinkQueId        = 0;
-		dupPrm.numOutQue                        = 1;
-		dupPrm.outQueParams[0].nextLink         = ipcOutVpssId;
-		dupPrm.notifyNextLink                   = TRUE;
-
-		ipcOutVpssPrm.inQueParams.prevLinkId    = dupId;
-		ipcOutVpssPrm.inQueParams.prevLinkQueId = 0;
-		ipcOutVpssPrm.outQueParams[0].nextLink  = ipcInVideoId;
-		ipcOutVpssPrm.numOutQue                 = 1;
-		ipcOutVpssPrm.numChPerOutQue[0]         = 0;
-		ipcOutVpssPrm.notifyNextLink            = TRUE;
-		ipcOutVpssPrm.notifyPrevLink            = FALSE;
-		ipcOutVpssPrm.noNotifyMode              = FALSE;
-		ipcOutVpssPrm.equallyDivideChAcrossOutQues = FALSE;
-
-		ipcInVideoPrm.inQueParams.prevLinkId    = ipcOutVpssId;
-		ipcInVideoPrm.inQueParams.prevLinkQueId = 0;
-		ipcInVideoPrm.outQueParams[0].nextLink  = encId;
-		ipcInVideoPrm.numOutQue                 = 1;
-		ipcInVideoPrm.numChPerOutQue[0]         = 0;
-		ipcInVideoPrm.notifyNextLink            = TRUE;
-		ipcInVideoPrm.notifyPrevLink            = FALSE;
-		ipcInVideoPrm.noNotifyMode              = FALSE;
-		ipcInVideoPrm.equallyDivideChAcrossOutQues = FALSE;
-
-		for (i=0; i<chainsCfg->chCapNum; i++) {
-			encPrm.chCreateParams[i].format                             = chainsCfg->chCfg[i].encFormat;
-			encPrm.chCreateParams[i].profile                            = chainsCfg->chCfg[i].encProfile;
-			encPrm.chCreateParams[i].dataLayout                         = IVIDEO_FIELD_SEPARATED;
-			encPrm.chCreateParams[i].fieldMergeEncodeEnable             = FALSE;
-			encPrm.chCreateParams[i].enableAnalyticinfo                 = FALSE;
-			encPrm.chCreateParams[i].enableWaterMarking                 = FALSE;
-			encPrm.chCreateParams[i].encodingPreset                     = XDM_USER_DEFINED;
-			encPrm.chCreateParams[i].rateControlPreset                  = IVIDEO_USER_DEFINED;
-			encPrm.chCreateParams[i].enableHighSpeed                    = FALSE;
-			encPrm.chCreateParams[i].defaultDynamicParams.interFrameInterval  = 1;
-			encPrm.chCreateParams[i].defaultDynamicParams.intraFrameInterval  = chainsCfg->chCfg[i].intraFrameInterval;
-			encPrm.chCreateParams[i].defaultDynamicParams.inputFrameRate      = chainsCfg->chCfg[i].inFrameRate;
-			encPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate     = chainsCfg->chCfg[i].encFrameRate;
-			encPrm.chCreateParams[i].defaultDynamicParams.targetBitRate       = chainsCfg->chCfg[i].bitRate;
-			encPrm.chCreateParams[i].defaultDynamicParams.mvAccuracy          = IVIDENC2_MOTIONVECTOR_QUARTERPEL;
-			encPrm.chCreateParams[i].defaultDynamicParams.rcAlg               = chainsCfg->chCfg[i].rateCtrl;
-			encPrm.chCreateParams[i].defaultDynamicParams.qpMin               = 0;
-			encPrm.chCreateParams[i].defaultDynamicParams.qpMax               = 51;
-			encPrm.chCreateParams[i].defaultDynamicParams.qpInit              = -1;
-			encPrm.chCreateParams[i].defaultDynamicParams.vbrDuration         = 8;
-			encPrm.chCreateParams[i].defaultDynamicParams.vbrSensitivity      = 0;
-		}
-		encPrm.inQueParams.prevLinkId   = ipcInVideoId;
-		encPrm.inQueParams.prevLinkQueId= 0;
-		encPrm.outQueParams.nextLink    = ipcBitsOutVideoId;
-		encPrm.numBufPerCh[0]           = 0;
-
-		ipcBitsOutVideoPrm.baseCreateParams.inQueParams.prevLinkId      = encId;
-		ipcBitsOutVideoPrm.baseCreateParams.inQueParams.prevLinkQueId   = 0;
-		ipcBitsOutVideoPrm.baseCreateParams.outQueParams[0].nextLink    = ipcBitsInHostId;
-		ipcBitsOutVideoPrm.baseCreateParams.numOutQue                   = 1;
-		ipcBitsOutVideoPrm.baseCreateParams.notifyNextLink              = FALSE;
-		ipcBitsOutVideoPrm.baseCreateParams.notifyPrevLink              = FALSE;
-		ipcBitsOutVideoPrm.baseCreateParams.noNotifyMode                = TRUE;
-		Chains_ipcBitsInitCreateParams_BitsOutRTOS(&ipcBitsOutVideoPrm,FALSE);
-
-		ipcBitsInHostPrm.baseCreateParams.inQueParams.prevLinkId        = ipcBitsOutVideoId;
-		ipcBitsInHostPrm.baseCreateParams.inQueParams.prevLinkQueId     = 0;
-		ipcBitsInHostPrm.baseCreateParams.numOutQue                     = 1;
-		ipcBitsInHostPrm.baseCreateParams.numChPerOutQue[0]             = 0;
-		ipcBitsInHostPrm.baseCreateParams.notifyNextLink                = FALSE;
-		ipcBitsInHostPrm.baseCreateParams.notifyPrevLink                = FALSE;
-		ipcBitsInHostPrm.baseCreateParams.noNotifyMode                  = TRUE;
-		Chains_ipcBitsInitCreateParams_BitsInHLOS(&ipcBitsInHostPrm);
-    }
-
-    //Network
-     if(chainsCfg->chRecNum > 0)
-     {
-		CHAINS_INIT_STRUCT(IpcBitsOutLinkHLOS_CreateParams,ipcBitsOutHostPrm);
-		CHAINS_INIT_STRUCT(IpcBitsInLinkRTOS_CreateParams,ipcBitsInVideoPrm);
-		CHAINS_INIT_STRUCT(DecLink_CreateParams,decPrm);
-		CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoEncPrm);
-		CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssEncPrm);
-        CHAINS_INIT_STRUCT(SelectLink_CreateParams,selPrm);
-		for (i=0; i<CHAINS_SW_MS_MAX_DISPLAYS; i++) {
-			CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
-			CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
-		}
-
-		ipcBitsOutHostId    = SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0;
-		ipcBitsInVideoId    = SYSTEM_VIDEO_LINK_ID_IPC_BITS_IN_0;
-		decId               = SYSTEM_LINK_ID_VDEC_0;
-		ipcOutVideoEncId    = SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_1;
-		ipcInVpssEncId      = SYSTEM_VPSS_LINK_ID_IPC_IN_M3_1;
-        selId               = SYSTEM_VPSS_LINK_ID_SELECT_0;
-		swMsId[0]           = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
-		swMsId[1]           = SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
-		displayId[0]        = SYSTEM_LINK_ID_DISPLAY_0;
-		displayId[1]        = SYSTEM_LINK_ID_DISPLAY_1;
-
-        for(i=chainsCfg->chCapNum; i<chainsCfg->chNum; i++)
-        {
-        	chainsCfg->displayRes[i-chainsCfg->chCapNum] = chainsCfg->displayRes[i];
-        }
-
-		Chains_displayCtrlInit(chainsCfg->displayRes);
-
-		System_LinkQueInfo queInfo;
-		queInfo.numCh = chainsCfg->chRecNum;
-
-		for (i=0; i<chainsCfg->chRecNum; i++) {
-			queInfo.chInfo[i].bufType           = SYSTEM_BUF_TYPE_VIDBITSTREAM;
-			queInfo.chInfo[i].codingformat      = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
-			queInfo.chInfo[i].height            = chainsCfg->chCfg[i + chainsCfg->chCapNum].outHeight;
-			queInfo.chInfo[i].width             = chainsCfg->chCfg[i + chainsCfg->chCapNum].outWidth;
-			queInfo.chInfo[i].memType           = SYSTEM_MT_TILEDMEM;
-			queInfo.chInfo[i].dataFormat        = SYSTEM_DF_YUV420P;
-			queInfo.chInfo[i].scanFormat        = SYSTEM_SF_PROGRESSIVE;
-		}
-
-		ipcBitsOutHostPrm.baseCreateParams.numOutQue                    = 1;
-		ipcBitsOutHostPrm.baseCreateParams.numChPerOutQue[0]            = chainsCfg->chRecNum;
-		ipcBitsOutHostPrm.baseCreateParams.outQueParams[0].nextLink     = ipcBitsInVideoId;
-		Chains_ipcBitsInitCreateParams_BitsOutHLOS(&ipcBitsOutHostPrm, &queInfo);
-
-		ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkId       = ipcBitsOutHostId;
-		ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkQueId    = 0;
-		ipcBitsInVideoPrm.baseCreateParams.numOutQue                    = 1;
-		ipcBitsInVideoPrm.baseCreateParams.numChPerOutQue[0]            = chainsCfg->chRecNum;
-		ipcBitsInVideoPrm.baseCreateParams.outQueParams[0].nextLink     = decId;
-		Chains_ipcBitsInitCreateParams_BitsInRTOS(&ipcBitsInVideoPrm, TRUE);
-
-		for (i=0; i<chainsCfg->chRecNum; i++) {
-			decPrm.chCreateParams[i].format                               = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
-			decPrm.chCreateParams[i].profile                              = IH264VDEC_PROFILE_ANY;
-			decPrm.chCreateParams[i].targetMaxWidth                       = chainsCfg->chCfg[i + chainsCfg->chCapNum].outWidth;
-			decPrm.chCreateParams[i].targetMaxHeight                      = chainsCfg->chCfg[i + chainsCfg->chCapNum].outHeight;
-			decPrm.chCreateParams[i].fieldMergeDecodeEnable               = FALSE;
-			decPrm.chCreateParams[i].algCreateStatus                      = DEC_LINK_ALG_CREATE_STATUS_CREATE;
-			decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFrameRate;
-			decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate   = chainsCfg->chCfg[i + chainsCfg->chCapNum].bitRate;
-			decPrm.chCreateParams[i].numBufPerCh                          = 0;
-			decPrm.chCreateParams[i].tilerEnable                          = TRUE;
-		}
-
-		decPrm.inQueParams.prevLinkId    = ipcBitsInVideoId;
-		decPrm.inQueParams.prevLinkQueId = 0;
-		decPrm.outQueParams.nextLink     = ipcOutVideoEncId;
-
-		ipcOutVideoEncPrm.inQueParams.prevLinkId    = decId;
-		ipcOutVideoEncPrm.inQueParams.prevLinkQueId = 0;
-		ipcOutVideoEncPrm.numOutQue                 = 1;
-		ipcOutVideoEncPrm.outQueParams[0].nextLink  = ipcInVpssEncId;
-		ipcOutVideoEncPrm.notifyNextLink            = TRUE;
-		ipcOutVideoEncPrm.notifyPrevLink            = FALSE;
-		ipcOutVideoEncPrm.noNotifyMode              = FALSE;
-
-		ipcInVpssEncPrm.inQueParams.prevLinkId      = ipcOutVideoEncId;
-		ipcInVpssEncPrm.inQueParams.prevLinkQueId   = 0;
-		ipcInVpssEncPrm.numOutQue                   = 1;
-		ipcInVpssEncPrm.outQueParams[0].nextLink    = selId;
-		ipcInVpssEncPrm.notifyNextLink              = TRUE;
-		ipcInVpssEncPrm.notifyPrevLink              = TRUE;//modify
-		ipcInVpssEncPrm.noNotifyMode                = FALSE;
-
-
-        selPrm.inQueParams.prevLinkId       = ipcInVpssEncId;
-        selPrm.inQueParams.prevLinkQueId    = 0;
-        selPrm.numOutQue                    = 2;
-        selPrm.outQueParams[0].nextLink     = swMsId[0];
-        selPrm.outQueChInfo[0].outQueId     = 0;
-        selPrm.outQueChInfo[0].numOutCh     = 1;
-        selPrm.outQueChInfo[0].inChNum[0]   = 0;
-        selPrm.outQueParams[1].nextLink     = swMsId[1];
-        selPrm.outQueChInfo[1].outQueId     = 1;
-        selPrm.outQueChInfo[1].numOutCh     = 1;
-        selPrm.outQueChInfo[1].inChNum[0]   = 1;
-
-        for (i=0; i<chainsCfg->chRecNum; i++) {
-            swMsPrm[i].numSwMsInst               = 1;
-            swMsPrm[i].swMsInstId[0]             = (i!=0) ? SYSTEM_SW_MS_SC_INST_VIP1_SC : SYSTEM_SW_MS_SC_INST_DEI_SC_NO_DEI;
-            swMsPrm[i].inQueParams.prevLinkId    = selId;
-            swMsPrm[i].inQueParams.prevLinkQueId = i;
-            swMsPrm[i].outQueParams.nextLink     = displayId[i];
-            swMsPrm[i].lineSkipMode              = FALSE;
-            swMsPrm[i].enableLayoutGridDraw      = TRUE;
-            swMsPrm[i].layoutPrm.outputFPS       = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFrameRate;
-            swMsPrm[i].maxInputQueLen            = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
-            swMsPrm[i].maxOutRes                 = chainsCfg->displayRes[i];
-            swMsPrm[i].numOutBuf                 = 0;
-            Chains_swMsGenerateLayoutParams(i, 2, &swMsPrm[i]);
-
-            displayPrm[i].numInputQueues                = 1;
-            displayPrm[i].activeQueue                   = 0;
-            displayPrm[i].inQueParams[0].prevLinkId     = swMsId[i];
-            displayPrm[i].inQueParams[0].prevLinkQueId  = 0;
-            displayPrm[i].displayRes                    = chainsCfg->displayRes[i];
-            displayPrm[i].displayId                    	= DISPLAY_LINK_DISPLAY_AUTO_SELECT;
-            displayPrm[i].forceFieldSeparatedInputMode  = FALSE;
-
-        }
-     }
-
-     /*
-      * Create Links
-      */
-	if (chainsCfg->chCapNum > 0)
-	{
-		System_linkCreate(captureId, &capturePrm, sizeof(capturePrm));
-		System_linkCreate(nsfId, &nsfPrm, sizeof(nsfPrm));
-		System_linkCreate(dupId, &dupPrm, sizeof(dupPrm));
-		System_linkCreate(ipcOutVpssId, &ipcOutVpssPrm, sizeof(ipcOutVpssPrm));
-		System_linkCreate(ipcInVideoId, &ipcInVideoPrm, sizeof(ipcInVideoPrm));
-		System_linkCreate(encId, &encPrm, sizeof(encPrm));
-		System_linkCreate(ipcBitsOutVideoId, &ipcBitsOutVideoPrm, sizeof(ipcBitsOutVideoPrm));
-		System_linkCreate(ipcBitsInHostId, &ipcBitsInHostPrm, sizeof(ipcBitsInHostPrm));
-	}
-
-    if (chainsCfg->chRecNum > 0)
-    {
-        System_linkCreate(ipcBitsOutHostId,&ipcBitsOutHostPrm,sizeof(ipcBitsOutHostPrm));
-        System_linkCreate(ipcBitsInVideoId,&ipcBitsInVideoPrm,sizeof(ipcBitsInVideoPrm));
-        System_linkCreate(decId, &decPrm, sizeof(decPrm));
-        System_linkCreate(ipcOutVideoEncId, &ipcOutVideoEncPrm, sizeof(ipcOutVideoEncPrm));
-        System_linkCreate(ipcInVpssEncId, &ipcInVpssEncPrm, sizeof(ipcInVpssEncPrm));
-        //System_linkCreate(dupEncId, &dupEncPrm, sizeof(dupEncPrm));
-        System_linkCreate(selId, &selPrm, sizeof(selPrm));
-        for(i=0; i<chainsCfg->chRecNum; i++)
-        {
-            System_linkCreate(swMsId[i], &swMsPrm[i], sizeof(swMsPrm[i]));
-            System_linkCreate(displayId[i], &displayPrm[i], sizeof(displayPrm[i]));
-        }
-    }
-
-	 /*
-	  * Start Links
-	  */
-	if (chainsCfg->chCapNum > 0)
-	{
-		System_linkStart(ipcBitsInHostId);
-		System_linkStart(ipcBitsOutVideoId);
-		System_linkStart(encId);
-		System_linkStart(ipcInVideoId);
-		System_linkStart(ipcOutVpssId);
-		System_linkStart(dupId);
-		System_linkStart(nsfId);
-		System_linkStart(captureId);
-		Vcap_init(&prm);
-		Vcap_start();
-	}
-
-	if (chainsCfg->chRecNum > 0)
-    {
-		for(i=0; i<chainsCfg->chRecNum; i++)
-		{
-			System_linkStart(displayId[i]);
-		}
-		Vdis_start();
-		for(i=0; i<chainsCfg->chRecNum; i++)
-		{
-			System_linkStart(swMsId[i]);
-		}
-		//System_linkStart(dupEncId);
-        System_linkStart(selId);
-		System_linkStart(ipcInVpssEncId);
-		System_linkStart(ipcOutVideoEncId);
-		System_linkStart(decId);
-		System_linkStart(ipcBitsInVideoId);
-		System_linkStart(ipcBitsOutHostId);
-	}
-
-
-	while(1)
-	{
-		char ch;
-		//ch = Chains_SelCapSelRecvmenu();
-          ch = Chains_menuRunTime();
-		if(ch=='0')
-			break;
-
-
-		if(ch == '2') 
-		{
-			if(captureId!=SYSTEM_LINK_ID_INVALID)
-			{
-				System_linkControl(captureId,
-						CAPTURE_LINK_CMD_PRINT_ADV_STATISTICS,
-						NULL, 0, TRUE);
-			}
-
-		
-			for(i=0; i<OSA_ARRAYSIZE(swMsId); i++)
-			{
-				if(swMsId[i]!=SYSTEM_LINK_ID_INVALID)
-				{
-					System_linkControl(swMsId[i],
-							SYSTEM_SW_MS_LINK_CMD_PRINT_STATISTICS,
-							NULL, 0, TRUE);
-				}
-			}
-
-			for(i=0; i<OSA_ARRAYSIZE(displayId); i++)
-			{
-				if(displayId[i]!=SYSTEM_LINK_ID_INVALID)
-				{
-					System_linkControl(displayId[i],
-							DISPLAY_LINK_CMD_PRINT_STATISTICS,
-							NULL, 0, TRUE);
-				}
-			}
-
-			OSA_waitMsecs(2000); // allow for print to complete
-
-			if(encId != SYSTEM_LINK_ID_INVALID)
-			{
-				System_linkControl(encId,
-						ENC_LINK_CMD_PRINT_IVAHD_STATISTICS,
-						NULL, 0, TRUE);
-			}
-			else if (decId !=SYSTEM_LINK_ID_INVALID)
-			{
-				System_linkControl(decId,
-						DEC_LINK_CMD_PRINT_IVAHD_STATISTICS,
-						NULL, 0, TRUE);
-			}
-
-			if(encId != SYSTEM_LINK_ID_INVALID)
-			{
-				System_linkControl(encId,
-						ENC_LINK_CMD_PRINT_STATISTICS,
-						NULL, 0, TRUE);
-			}
-			if(decId != SYSTEM_LINK_ID_INVALID)
-			{
-				System_linkControl(decId,
-						DEC_LINK_CMD_PRINT_STATISTICS,
-						NULL, 0, TRUE);
-			}
-
-			OSA_waitMsecs(3000); // allow for print to complete
-
-			UInt32 gChains_enabledProcs[] = {
-				SYSTEM_LINK_ID_M3VPSS,
-				SYSTEM_LINK_ID_M3VIDEO,
-				SYSTEM_LINK_ID_DSP,
-			};
-
-			for(i=0; i<sizeof(gChains_enabledProcs)/sizeof(gChains_enabledProcs[0]); i++)
-			{
-				SystemCommon_PrintStatus printStatus;
-
-				memset(&printStatus, 0, sizeof(printStatus));
-
-				printStatus.printCpuLoad = TRUE;
-				printStatus.printTskLoad = TRUE;
-				System_linkControl(
-						gChains_enabledProcs[i],
-						SYSTEM_COMMON_CMD_PRINT_STATUS,
-						&printStatus,
-						sizeof(printStatus),
-						TRUE);
-				System_linkControl(
-						gChains_enabledProcs[i],
-						SYSTEM_COMMON_CMD_CPU_LOAD_CALC_RESET,
-						NULL,
-						0,
-						TRUE);
-
-				OSA_waitMsecs(500); // allow for print to complete
-			}
-
-
-		}
-	}
-
-
-	Chains_ipcBitsStop();
-
-	 if (chainsCfg->chCapNum > 0) {
-		 System_linkStop(captureId);
-		 Vcap_stop();
-		 System_linkStop(nsfId);
-		 System_linkStop(dupId);
-		 System_linkStop(ipcOutVpssId);
-		 System_linkStop(ipcInVideoId);
-		 System_linkStop(encId);
-		 System_linkStop(ipcBitsOutVideoId);
-		 System_linkStop(ipcBitsInHostId);
-	 }
-
-	 if (chainsCfg->chRecNum > 0) {
-		 System_linkStop(ipcBitsOutHostId);
-		 System_linkStop(ipcBitsInVideoId);
-		 System_linkStop(decId);
-		 System_linkStop(ipcOutVideoEncId);
-		 System_linkStop(ipcInVpssEncId);
-		 //System_linkStop(dupEncId);
-         System_linkStop(selId);
-		 for(i=0; i<chainsCfg->chRecNum; i++){
-			 System_linkStop(swMsId[i]);
-			 System_linkStop(displayId[i]);
-		 }
-		 Vdis_stop();
-	 }
-
-	 if (chainsCfg->chCapNum > 0) {
-		 System_linkDelete(captureId);
-		 System_linkDelete(nsfId);
-		 System_linkDelete(dupId);
-		 System_linkDelete(ipcOutVpssId);
-		 System_linkDelete(ipcInVideoId);
-		 System_linkDelete(encId);
-		 System_linkDelete(ipcBitsOutVideoId);
-		 System_linkDelete(ipcBitsInHostId);
-	 }
-
-	 if (chainsCfg->chRecNum > 0) {
-		 System_linkDelete(ipcBitsOutHostId);
-		 System_linkDelete(ipcBitsInVideoId);
-		 System_linkDelete(decId);
-		 System_linkDelete(ipcOutVideoEncId);
-		 System_linkDelete(ipcInVpssEncId);
-		 //System_linkDelete(dupEncId);
-		 System_linkDelete(selId);
-		 for(i=0; i<chainsCfg->chRecNum; i++){
-			 System_linkDelete(swMsId[i]);
-			 System_linkDelete(displayId[i]);
-		 }
-
-		 Chains_displayCtrlDeInit();
-	 }
-
-	 Chains_ipcBitsExit();
-}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_doubleChCapEncSend.c b/dvr_rdk/demos/link_api_demos/chains/chains_doubleChCapEncSend.c
deleted file mode 100644
index cb3a8a4..0000000
--- a/dvr_rdk/demos/link_api_demos/chains/chains_doubleChCapEncSend.c
+++ /dev/null
@@ -1,352 +0,0 @@
-/** ============================================================================
- *
- *  Chains_doubleChCapEncSend.c
- *
- *  Author     : zzx
- *
- *  Date       : July 19, 2014
- *
- *  Description:	Cap + Enc + Send
- *
- * 				 |->enc->send
- *  capture->dup-|
- *  			 |		 |->swMs0->display0
- *  			 |->dup2-|
- *  			 		 |->swMs1->display1
- *  ============================================================================
- */
-
-
-#include <mcfw/interfaces/ti_vcap.h>
-#include <demos/link_api_demos/common/chains.h>
-
-static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
-{
-    .isPopulated = 1,
-    .ivaMap[0] =
-    {
-        .EncNumCh  = 1,
-        .EncChList = {0},
-        .DecNumCh  = 0,
-        .DecChList = {0},
-    },
-    .ivaMap[1] =
-    {
-        .EncNumCh  = 1,
-        .EncChList = {1},
-        .DecNumCh  = 0,
-        .DecChList = {0},
-    },
-    .ivaMap[2] =
-    {
-        .EncNumCh  = 2,
-        .EncChList = {2,3},
-        .DecNumCh  = 0,
-        .DecChList = {0},
-    },
-};
-
-Void Chains_doubleChCapEncSend(Chains_Ctrl *chainsCfg)
-{
-    CaptureLink_CreateParams            capturePrm;
-    CaptureLink_VipInstParams           *pCaptureInstPrm;
-    CaptureLink_OutParams               *pCaptureOutPrm;
-    DupLink_CreateParams                dupPrm;
-    DupLink_CreateParams                dup2Prm;
-    SwMsLink_CreateParams               swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-    DisplayLink_CreateParams            displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-    IpcLink_CreateParams                ipcOutVpssPrm;
-    IpcLink_CreateParams                ipcInVideoPrm;
-    EncLink_CreateParams                encPrm;
-    IpcBitsOutLinkRTOS_CreateParams     ipcBitsOutVideoPrm;
-    IpcBitsInLinkHLOS_CreateParams      ipcBitsInHostPrm;
-
-    UInt32 captureId, vipInstId;
-    UInt32 dupId;
-    UInt32 dup2Id;
-    UInt32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
-    UInt32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
-    UInt32 ipcOutVpssId;
-    UInt32 ipcInVideoId;
-    UInt32 encId;
-    UInt32 ipcBitsOutVideoId;
-    UInt32 ipcBitsInHostId;
-
-    UInt32 i;
-    char   ch;
-    
-	
-	Chains_ipcBitsInit();
-	
-	
-    CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
-    for (i=0; i<CHAINS_SW_MS_MAX_DISPLAYS; i++) {
-        CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
-        CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
-    }
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVpssPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVideoPrm);
-    CHAINS_INIT_STRUCT(EncLink_CreateParams,encPrm);
-    CHAINS_INIT_STRUCT(IpcBitsOutLinkRTOS_CreateParams,ipcBitsOutVideoPrm);
-    CHAINS_INIT_STRUCT(IpcBitsInLinkHLOS_CreateParams,ipcBitsInHostPrm);
-    
-	
-	captureId     = SYSTEM_LINK_ID_CAPTURE;
-    dupId         = SYSTEM_VPSS_LINK_ID_DUP_0;
-    dup2Id        = SYSTEM_VPSS_LINK_ID_DUP_1;
-    swMsId[0]     = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
-    swMsId[1]     = SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
-    displayId[0]  = SYSTEM_LINK_ID_DISPLAY_0;
-    displayId[1]  = SYSTEM_LINK_ID_DISPLAY_1;
-
-    encId         = SYSTEM_LINK_ID_VENC_0;
-    ipcOutVpssId  = SYSTEM_VPSS_LINK_ID_IPC_OUT_M3_0;
-    ipcInVideoId  = SYSTEM_VIDEO_LINK_ID_IPC_IN_M3_0;
-    ipcBitsOutVideoId   = SYSTEM_VIDEO_LINK_ID_IPC_BITS_OUT_0;
-    ipcBitsInHostId     = SYSTEM_HOST_LINK_ID_IPC_BITS_IN_0;
-
-    System_linkControl(
-        SYSTEM_LINK_ID_M3VIDEO,
-        SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
-        &systemVid_encDecIvaChMapTbl,
-        sizeof(SystemVideo_Ivahd2ChMap_Tbl),
-        TRUE
-    );
-
-
-	VCAP_PARAMS_S  prm;
-	Vcap_params_init(&prm);
-
-	capturePrm.numVipInst = chainsCfg->chCapNum;
-	capturePrm.tilerEnable              = FALSE;
-	capturePrm.numBufsPerCh             = 16;
-	capturePrm.numExtraBufs             = 0;
-	capturePrm.maxBlindAreasPerCh       = 0;
-	capturePrm.isPalMode                = FALSE;
-	capturePrm.enableSdCrop             = FALSE;
-	capturePrm.doCropInCapture          = FALSE;
-
-	for(i=0; i<capturePrm.numVipInst; i++)
-	{
-#if defined(TI816X_ETVH)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-#if defined(TI816X_ETVS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
-			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
-#endif
-#if defined(TI8107_INS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-
-		prm.channelParams[i].deviceId		= vipInstId;
-		prm.enableConfigExtVideoDecoder 	= TRUE;
-		prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
-
-		pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
-		pCaptureInstPrm->inScanFormat		= SYSTEM_SF_PROGRESSIVE;
-		pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
-		pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
-		pCaptureInstPrm->numOutput			= 1;
-		pCaptureInstPrm->numChPerOutput		= 1;
-
-
-		pCaptureOutPrm                      = &pCaptureInstPrm->outParams[0];
-		pCaptureOutPrm->dataFormat          = SYSTEM_DF_YUV420SP_UV;
-		pCaptureOutPrm->scEnable            = FALSE;
-		pCaptureOutPrm->outQueId            = 0;
-	}
-	capturePrm.outQueParams[0].nextLink     = dupId;
-
-    System_linkCreate(captureId, &capturePrm, sizeof(capturePrm));
-
-    dupPrm.inQueParams.prevLinkId           = captureId;
-    dupPrm.inQueParams.prevLinkQueId        = 0;
-    dupPrm.numOutQue                        = 2;
-    dupPrm.outQueParams[0].nextLink         = ipcOutVpssId;
-    dupPrm.outQueParams[1].nextLink         = dup2Id;
-    dupPrm.notifyNextLink                   = TRUE;
-
-    ipcOutVpssPrm.inQueParams.prevLinkId    = dupId;
-    ipcOutVpssPrm.inQueParams.prevLinkQueId = 0;
-    ipcOutVpssPrm.numOutQue                 = 1;
-    ipcOutVpssPrm.numChPerOutQue[0]         = 1;
-    ipcOutVpssPrm.outQueParams[0].nextLink  = ipcInVideoId;
-    ipcOutVpssPrm.notifyNextLink            = TRUE;
-    ipcOutVpssPrm.notifyPrevLink            = FALSE;
-    ipcOutVpssPrm.noNotifyMode              = FALSE;
-    ipcOutVpssPrm.numChPerOutQue[0]         = 0;
-    ipcOutVpssPrm.equallyDivideChAcrossOutQues = FALSE;
-
-    ipcInVideoPrm.inQueParams.prevLinkId    = ipcOutVpssId;
-    ipcInVideoPrm.inQueParams.prevLinkQueId = 0;
-    ipcInVideoPrm.numOutQue                 = 1;
-    ipcInVideoPrm.numChPerOutQue[0]         = 1;
-    ipcInVideoPrm.outQueParams[0].nextLink  = encId;
-    ipcInVideoPrm.notifyNextLink            = TRUE;
-    ipcInVideoPrm.notifyPrevLink            = FALSE;
-    ipcInVideoPrm.noNotifyMode              = FALSE;
-    ipcInVideoPrm.numChPerOutQue[0]         = 0;
-    ipcInVideoPrm.equallyDivideChAcrossOutQues = FALSE;
-
-    for (i=0; i<gChains_ctrl.chNum; i++) {
-        encPrm.chCreateParams[i].format                             = chainsCfg->chCfg[i].encFormat;
-        encPrm.chCreateParams[i].profile                            = chainsCfg->chCfg[i].encProfile;
-        encPrm.chCreateParams[i].dataLayout                         = IVIDEO_FIELD_SEPARATED;
-        encPrm.chCreateParams[i].fieldMergeEncodeEnable             = FALSE;
-        encPrm.chCreateParams[i].enableAnalyticinfo                 = FALSE;
-        encPrm.chCreateParams[i].enableWaterMarking                 = FALSE;
-        encPrm.chCreateParams[i].encodingPreset                     = XDM_USER_DEFINED;
-        encPrm.chCreateParams[i].rateControlPreset                  = IVIDEO_USER_DEFINED;
-        encPrm.chCreateParams[i].enableHighSpeed                    = FALSE;
-        encPrm.chCreateParams[i].defaultDynamicParams.interFrameInterval  = 1;
-        encPrm.chCreateParams[i].defaultDynamicParams.intraFrameInterval  = chainsCfg->chCfg[i].intraFrameInterval;
-        encPrm.chCreateParams[i].defaultDynamicParams.inputFrameRate      = chainsCfg->chCfg[i].inFrameRate;
-        encPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate     = chainsCfg->chCfg[i].encFrameRate;
-        encPrm.chCreateParams[i].defaultDynamicParams.targetBitRate       = chainsCfg->chCfg[i].bitRate;
-        encPrm.chCreateParams[i].defaultDynamicParams.mvAccuracy          = IVIDENC2_MOTIONVECTOR_QUARTERPEL;
-        encPrm.chCreateParams[i].defaultDynamicParams.rcAlg               = chainsCfg->chCfg[i].rateCtrl;
-        encPrm.chCreateParams[i].defaultDynamicParams.qpMin               = 0;
-        encPrm.chCreateParams[i].defaultDynamicParams.qpMax               = 51;
-        encPrm.chCreateParams[i].defaultDynamicParams.qpInit              = -1;
-        encPrm.chCreateParams[i].defaultDynamicParams.vbrDuration         = 8;
-        encPrm.chCreateParams[i].defaultDynamicParams.vbrSensitivity      = 0;
-    }
-    encPrm.inQueParams.prevLinkId   = ipcInVideoId;
-    encPrm.inQueParams.prevLinkQueId= 0;
-    encPrm.outQueParams.nextLink    = ipcBitsOutVideoId;
-    encPrm.numBufPerCh[0]           = 0;
-
-    ipcBitsOutVideoPrm.baseCreateParams.inQueParams.prevLinkId      = encId;
-    ipcBitsOutVideoPrm.baseCreateParams.inQueParams.prevLinkQueId   = 0;
-    ipcBitsOutVideoPrm.baseCreateParams.numOutQue                   = 1;
-    ipcBitsOutVideoPrm.baseCreateParams.numChPerOutQue[0]           = 1;
-    ipcBitsOutVideoPrm.baseCreateParams.outQueParams[0].nextLink    = ipcBitsInHostId;
-    ipcBitsOutVideoPrm.baseCreateParams.notifyNextLink              = FALSE;
-    ipcBitsOutVideoPrm.baseCreateParams.notifyPrevLink              = FALSE;
-    ipcBitsOutVideoPrm.baseCreateParams.noNotifyMode                = TRUE;
-    Chains_ipcBitsInitCreateParams_BitsOutRTOS(&ipcBitsOutVideoPrm,FALSE);
-
-    ipcBitsInHostPrm.baseCreateParams.inQueParams.prevLinkId        = ipcBitsOutVideoId;
-    ipcBitsInHostPrm.baseCreateParams.inQueParams.prevLinkQueId     = 0;
-    ipcBitsInHostPrm.baseCreateParams.numOutQue                     = 1;
-    ipcBitsInHostPrm.baseCreateParams.numChPerOutQue[0]             = 1;
-    ipcBitsInHostPrm.baseCreateParams.notifyNextLink                = FALSE;
-    ipcBitsInHostPrm.baseCreateParams.notifyPrevLink                = FALSE;
-    ipcBitsInHostPrm.baseCreateParams.noNotifyMode                  = TRUE;
-    Chains_ipcBitsInitCreateParams_BitsInHLOS(&ipcBitsInHostPrm);
-
-    Chains_displayCtrlInit(chainsCfg->displayRes);
-    System_linkCreate(dupId, &dupPrm, sizeof(dupPrm));
-    System_linkCreate(ipcOutVpssId, &ipcOutVpssPrm, sizeof(ipcOutVpssPrm));
-    System_linkCreate(ipcInVideoId, &ipcInVideoPrm, sizeof(ipcInVideoPrm));
-    System_linkCreate(encId, &encPrm, sizeof(encPrm));
-    System_linkCreate(ipcBitsOutVideoId, &ipcBitsOutVideoPrm, sizeof(ipcBitsOutVideoPrm));
-    System_linkCreate(ipcBitsInHostId, &ipcBitsInHostPrm, sizeof(ipcBitsInHostPrm));
-
-    dup2Prm.inQueParams.prevLinkId           = dupId;
-    dup2Prm.inQueParams.prevLinkQueId        = 1;
-    dup2Prm.numOutQue                        = 2;
-    dup2Prm.outQueParams[0].nextLink         = swMsId[0];
-    dup2Prm.outQueParams[1].nextLink         = swMsId[1];
-    dup2Prm.notifyNextLink                   = TRUE;
-
-
-    for (i=0; i<2; i++) {
-        swMsPrm[i].numSwMsInst               = 1;
-        swMsPrm[i].swMsInstId[0]             = SYSTEM_SW_MS_SC_INST_SC5;
-        swMsPrm[i].inQueParams.prevLinkId    = dup2Id;
-        swMsPrm[i].inQueParams.prevLinkQueId = i;
-        swMsPrm[i].outQueParams.nextLink     = displayId[i];
-        swMsPrm[i].lineSkipMode              = FALSE;
-        swMsPrm[i].enableLayoutGridDraw      = TRUE;
-        swMsPrm[i].layoutPrm.outputFPS       = chainsCfg->chCfg[i].inFrameRate;
-        swMsPrm[i].maxInputQueLen            = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
-        swMsPrm[i].maxOutRes                 = chainsCfg->displayRes[i];
-        swMsPrm[i].numOutBuf                 = 0;
-		Chains_swMsGenerateLayoutParams(i,1,&swMsPrm[i]);
-
-		displayPrm[i].numInputQueues                = 1;
-        displayPrm[i].activeQueue                   = 0;
-        displayPrm[i].inQueParams[0].prevLinkId     = swMsId[i];
-        displayPrm[i].inQueParams[0].prevLinkQueId  = 0;
-        displayPrm[i].displayRes                    = chainsCfg->displayRes[i];
-        displayPrm[i].forceFieldSeparatedInputMode  = FALSE;
-    }
-
-    System_linkCreate(dup2Id, &dup2Prm, sizeof(dup2Prm));
-   
-	for (i=0; i<2; i++) {
-        System_linkCreate(swMsId[i], &swMsPrm[i], sizeof(swMsPrm[i]));
-        System_linkCreate(displayId[i], &displayPrm[i], sizeof(displayPrm[i]));
-    }
-
-    Chains_memPrintHeapStatus();
-
-    {
-        System_linkStart(encId);
-		Vdis_start();
-        for (i=0; i<2; i++) {
-            System_linkStart(displayId[i]);
-            System_linkStart(swMsId[i]);
-        }
-        
-		System_linkStart(dup2Id);
-        System_linkStart(dupId);
-		Vcap_init(&prm);
-		Vcap_start();
-        System_linkStart(captureId);
-
-        while(1)
-        {
-            ch = Chains_menuRunTime();
-            if(ch=='0')
-                break;
-            if(ch=='v')
-                System_linkControl(captureId, CAPTURE_LINK_CMD_FORCE_RESET, NULL, 0, TRUE);
-            if(ch=='p')
-                System_linkControl(captureId, CAPTURE_LINK_CMD_PRINT_ADV_STATISTICS, NULL, 0, TRUE);
-        }
-
-        Chains_ipcBitsStop();
-        
-		Vcap_stop();
-		System_linkStop(captureId);
-        
-		System_linkStop(dupId);
-        System_linkStop(dup2Id);
-		Vdis_stop();
-        for (i=0; i<2; i++) {
-            System_linkStop(swMsId[i]);
-            System_linkStop(displayId[i]);
-        }
-        
-		System_linkStop(encId);
-        System_linkStop(ipcBitsOutVideoId);
-        System_linkStop(ipcBitsInHostId);
-    }
-
-    System_linkDelete(captureId);
-    System_linkDelete(dupId);
-    System_linkDelete(dup2Id);
-    for (i=0; i<2; i++) {
-        System_linkDelete(swMsId[i]);
-        System_linkDelete(displayId[i]);
-    }
-    System_linkDelete(ipcOutVpssId);
-    System_linkDelete(ipcInVideoId);
-    System_linkDelete(encId);
-    System_linkDelete(ipcBitsOutVideoId);
-    System_linkDelete(ipcBitsInHostId);
-    
-	
-	Chains_ipcBitsExit();
-
-    Chains_displayCtrlDeInit();
-}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_doubleChRecvDecDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_doubleChRecvDecDis.c
deleted file mode 100644
index 06147f9..0000000
--- a/dvr_rdk/demos/link_api_demos/chains/chains_doubleChRecvDecDis.c
+++ /dev/null
@@ -1,271 +0,0 @@
-/** ============================================================================
- *
- *  Chains_doubleChCapEncSend.c
- *
- *  Author     : zzx
- *
- *  Date       : July 19, 2014
- *
- *  Description:	Cap + Enc + Send
- *
- * 				 |->enc->send
- *  capture->dup-|
- *  			 |		 |->swMs0->display0
- *  			 |->dup2-|
- *  			 		 |->swMs1->display1
- *  ============================================================================
- */
-
-#include <mcfw/interfaces/ti_vcap.h>
-#include <demos/link_api_demos/common/chains.h>
-
-static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
-{
-    .isPopulated = 1,
-    .ivaMap[0] =
-    {
-        .EncNumCh  = 0,
-        .EncChList = {0},
-        .DecNumCh  = 1,
-        .DecChList = {1},
-    },
-    .ivaMap[1] =
-    {
-        .EncNumCh  = 0,
-        .EncChList = {0},
-        .DecNumCh  = 1,
-        .DecChList = {0},
-    },
-    .ivaMap[2] =
-    {
-        .EncNumCh  = 1,
-        .EncChList = {0},
-        .DecNumCh  = 2,
-        .DecChList = {2, 3},
-    },
-};
-
-
-Void Chains_doubleChRecvDecDis(Chains_Ctrl *chainsCfg)
-{
-    IpcBitsOutLinkHLOS_CreateParams   ipcBitsOutHostPrm;
-    IpcBitsInLinkRTOS_CreateParams    ipcBitsInVideoPrm;
-    DecLink_CreateParams              decPrm;
-    IpcLink_CreateParams              ipcOutVideoPrm;
-    IpcLink_CreateParams              ipcInVpssPrm;
-    SelectLink_CreateParams           selPrm;
-    SwMsLink_CreateParams             swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-    DisplayLink_CreateParams          displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-
-    UInt32 ipcBitsOutHostId;
-    UInt32 ipcBitsInVideoId;
-    UInt32 decId;
-    UInt32 ipcOutVideoId;
-    UInt32 ipcInVpssId;
-    UInt32 selId;
-    UInt32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
-    UInt32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
-
-    UInt32 i;
-    Char   ch;
-
-    CHAINS_INIT_STRUCT(IpcBitsOutLinkHLOS_CreateParams,ipcBitsOutHostPrm);
-    CHAINS_INIT_STRUCT(IpcBitsInLinkRTOS_CreateParams,ipcBitsInVideoPrm);
-    CHAINS_INIT_STRUCT(DecLink_CreateParams,decPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssPrm);
-    CHAINS_INIT_STRUCT(SelectLink_CreateParams,selPrm);
-    for (i=0; i<CHAINS_SW_MS_MAX_DISPLAYS; i++) {
-        CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
-        CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
-    }
-    ipcBitsOutHostId    = SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0;
-    ipcBitsInVideoId    = SYSTEM_VIDEO_LINK_ID_IPC_BITS_IN_0;
-    decId               = SYSTEM_LINK_ID_VDEC_0;
-    ipcOutVideoId       = SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_0;
-    ipcInVpssId         = SYSTEM_VPSS_LINK_ID_IPC_IN_M3_0;
-    selId               = SYSTEM_VPSS_LINK_ID_SELECT_0;
-    swMsId[0]           = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
-    swMsId[1]           = SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
-    displayId[0]        = SYSTEM_LINK_ID_DISPLAY_0;
-    displayId[1]        = SYSTEM_LINK_ID_DISPLAY_1;
-
-    Chains_ipcBitsInit();
-    
-	System_linkControl(
-        SYSTEM_LINK_ID_M3VIDEO,
-        SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
-        &systemVid_encDecIvaChMapTbl,
-        sizeof(SystemVideo_Ivahd2ChMap_Tbl),
-        TRUE
-    );
-    
-	for(i =0;i<gChains_ctrl.chRecNum;i++)
-	{
-		gChains_ctrl.chCfg[i+gChains_ctrl.chCapNum].channel = i;
-	}
-
-
-	for(i = chainsCfg->chCapNum;i < chainsCfg->chNum; i++)
-	{
-		chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
-	}
-
-	Chains_displayCtrlInit(chainsCfg->displayRes);
-    
-	System_LinkQueInfo queInfo;
-    queInfo.numCh = chainsCfg->chNum;
-	
-	for (i=0; i<chainsCfg->chRecNum; i++) {
-		queInfo.chInfo[i].bufType           = SYSTEM_BUF_TYPE_VIDBITSTREAM;
-		queInfo.chInfo[i].codingformat      = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
-		queInfo.chInfo[i].height            = chainsCfg->chCfg[i + chainsCfg->chCapNum].outHeight;
-		queInfo.chInfo[i].width             = chainsCfg->chCfg[i + chainsCfg->chCapNum].outWidth;
-		queInfo.chInfo[i].memType           = SYSTEM_MT_TILEDMEM;
-		queInfo.chInfo[i].dataFormat        = SYSTEM_DF_YUV420P;
-		queInfo.chInfo[i].scanFormat        = SYSTEM_SF_PROGRESSIVE;
-	}
-
-	ipcBitsOutHostPrm.baseCreateParams.numOutQue                    = 1;
-	ipcBitsOutHostPrm.baseCreateParams.numChPerOutQue[0]            = chainsCfg->chRecNum;
-	ipcBitsOutHostPrm.baseCreateParams.outQueParams[0].nextLink     = ipcBitsInVideoId;
-	Chains_ipcBitsInitCreateParams_BitsOutHLOS(&ipcBitsOutHostPrm, &queInfo);
-
-	ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkId       = ipcBitsOutHostId;
-	ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkQueId    = 0;
-	ipcBitsInVideoPrm.baseCreateParams.numOutQue                    = 1;
-	ipcBitsInVideoPrm.baseCreateParams.numChPerOutQue[0]            = chainsCfg->chRecNum;
-	ipcBitsInVideoPrm.baseCreateParams.outQueParams[0].nextLink     = decId;
-	Chains_ipcBitsInitCreateParams_BitsInRTOS(&ipcBitsInVideoPrm, TRUE);
-
-	for (i=0; i<chainsCfg->chRecNum; i++) {
-		decPrm.chCreateParams[i].format                               = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
-		decPrm.chCreateParams[i].profile                              = IH264VDEC_PROFILE_ANY;
-		decPrm.chCreateParams[i].targetMaxWidth                       = chainsCfg->chCfg[i + chainsCfg->chCapNum].outWidth;
-		decPrm.chCreateParams[i].targetMaxHeight                      = chainsCfg->chCfg[i + chainsCfg->chCapNum].outHeight;
-		decPrm.chCreateParams[i].fieldMergeDecodeEnable               = FALSE;
-		decPrm.chCreateParams[i].algCreateStatus                      = DEC_LINK_ALG_CREATE_STATUS_CREATE;
-		decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFrameRate;
-		decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate   = chainsCfg->chCfg[i + chainsCfg->chCapNum].bitRate;
-		decPrm.chCreateParams[i].numBufPerCh                          = 0;
-		decPrm.chCreateParams[i].tilerEnable                          = TRUE;
-	}
-
-	decPrm.inQueParams.prevLinkId    = ipcBitsInVideoId;
-	decPrm.inQueParams.prevLinkQueId = 0;
-	decPrm.outQueParams.nextLink     = ipcOutVideoId;
-
-    ipcOutVideoPrm.inQueParams.prevLinkId    = decId;
-    ipcOutVideoPrm.inQueParams.prevLinkQueId = 0;
-    ipcOutVideoPrm.numOutQue                 = 1;
-    ipcOutVideoPrm.outQueParams[0].nextLink  = ipcInVpssId;
-    ipcOutVideoPrm.notifyNextLink            = TRUE;
-    ipcOutVideoPrm.notifyPrevLink            = FALSE;
-    ipcOutVideoPrm.noNotifyMode              = FALSE;
-
-    ipcInVpssPrm.inQueParams.prevLinkId      = ipcOutVideoId;
-    ipcInVpssPrm.inQueParams.prevLinkQueId   = 0;
-    ipcInVpssPrm.numOutQue                   = 1;
-    ipcInVpssPrm.outQueParams[0].nextLink    = selId;
-    ipcInVpssPrm.notifyNextLink              = TRUE;
-    ipcInVpssPrm.notifyPrevLink              = TRUE;
-    ipcInVpssPrm.noNotifyMode                = FALSE;
-
-    selPrm.inQueParams.prevLinkId       = ipcInVpssId;
-    selPrm.inQueParams.prevLinkQueId    = 0;
-    selPrm.numOutQue                    = 2;
-    selPrm.outQueParams[0].nextLink     = swMsId[0];
-    selPrm.outQueChInfo[0].outQueId     = 0;
-    selPrm.outQueChInfo[0].numOutCh     = 1;
-    selPrm.outQueChInfo[0].inChNum[0]   = 0;
-    selPrm.outQueParams[1].nextLink     = swMsId[1];
-    selPrm.outQueChInfo[1].outQueId     = 1;
-    selPrm.outQueChInfo[1].numOutCh     = 1;
-    selPrm.outQueChInfo[1].inChNum[0]   = 1;
-
-    for (i=0; i<chainsCfg->chNum; i++) {
-        swMsPrm[i].numSwMsInst               = 1;
-        swMsPrm[i].swMsInstId[0]             = (i==0) ? SYSTEM_SW_MS_SC_INST_VIP1_SC : SYSTEM_SW_MS_SC_INST_DEI_SC_NO_DEI;
-        swMsPrm[i].inQueParams.prevLinkId    = selId;
-        swMsPrm[i].inQueParams.prevLinkQueId = i;
-        swMsPrm[i].outQueParams.nextLink     = displayId[i];
-        swMsPrm[i].lineSkipMode              = FALSE;
-        swMsPrm[i].enableLayoutGridDraw      = TRUE;
-        swMsPrm[i].layoutPrm.outputFPS       = chainsCfg->chCfg[i].outFrameRate;
-        swMsPrm[i].maxInputQueLen            = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
-        swMsPrm[i].maxOutRes                 = chainsCfg->displayRes[i];
-        swMsPrm[i].numOutBuf                 = 0;
-        Chains_swMsGenerateLayoutParams(0, 2, &swMsPrm[i]);
-
-        displayPrm[i].numInputQueues                = 1;
-        displayPrm[i].activeQueue                   = 0;
-        displayPrm[i].inQueParams[0].prevLinkId     = swMsId[i];
-        displayPrm[i].inQueParams[0].prevLinkQueId  = 0;
-        displayPrm[i].displayRes                    = chainsCfg->displayRes[i];
-        displayPrm[i].forceFieldSeparatedInputMode  = FALSE;
-
-        //chains_avsync_set_avs_params(0, swMsId[i], displayId[i], chainsCfg->chNum);
-    }
-
-	System_linkCreate(ipcBitsOutHostId,&ipcBitsOutHostPrm,sizeof(ipcBitsOutHostPrm));
-	System_linkCreate(ipcBitsInVideoId,&ipcBitsInVideoPrm,sizeof(ipcBitsInVideoPrm));
-	System_linkCreate(decId, &decPrm, sizeof(decPrm));
-	System_linkCreate(ipcOutVideoId, &ipcOutVideoPrm, sizeof(ipcOutVideoPrm));
-	System_linkCreate(ipcInVpssId, &ipcInVpssPrm, sizeof(ipcInVpssPrm));
-	System_linkCreate(selId, &selPrm, sizeof(selPrm));
-	for (i=0; i<chainsCfg->chNum; i++) {
-		System_linkCreate(swMsId[i], &swMsPrm[i], sizeof(swMsPrm[i]));
-		System_linkCreate(displayId[i], &displayPrm[i], sizeof(displayPrm[i]));
-	}
-
-
-	Vdis_start();
-	for (i=0; i<chainsCfg->chNum; i++) 
-	{
-		System_linkStart(displayId[i]);
-		System_linkStart(swMsId[i]);
-	}
-	
-	System_linkStart(selId);
-	System_linkStart(ipcInVpssId);
-	System_linkStart(ipcOutVideoId);
-	System_linkStart(decId);
-	System_linkStart(ipcBitsInVideoId);
-	System_linkStart(ipcBitsOutHostId);
-
-	while(1)
-	{
-		ch = Chains_menuRunTime();
-		if(ch=='0')
-			break;
-	}
-
-	Chains_ipcBitsStop();
-
-	System_linkStop(ipcBitsOutHostId);
-	System_linkStop(ipcBitsInVideoId);
-	System_linkStop(decId);
-	System_linkStop(ipcOutVideoId);
-	System_linkStop(ipcInVpssId);
-	System_linkStop(selId);
-	Vdis_stop();
-	for (i=0; i<chainsCfg->chNum; i++) {
-		System_linkStop(swMsId[i]);
-		System_linkStop(displayId[i]);
-	}
-
-	System_linkDelete(ipcBitsOutHostId);
-	System_linkDelete(ipcBitsInVideoId);
-	System_linkDelete(decId);
-	System_linkDelete(ipcOutVideoId);
-	System_linkDelete(ipcInVpssId);
-	System_linkDelete(selId);
-	for (i=0; i<chainsCfg->chNum; i++) {
-		System_linkDelete(swMsId[i]);
-		System_linkDelete(displayId[i]);
-	}
-
-	Chains_displayCtrlDeInit();
-	
-	Chains_ipcBitsExit();
-}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_singleChCapOsdDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_singleChCapOsdDis.c
deleted file mode 100644
index 392c38f..0000000
--- a/dvr_rdk/demos/link_api_demos/chains/chains_singleChCapOsdDis.c
+++ /dev/null
@@ -1,361 +0,0 @@
-/** ============================================================================
- *
- *  chains_CapSwMsDis.c
- *
- *  Author     : zzx
- *
- *  Date       : June 25, 2013
- *
- *  Description:	Cap + SwMs + Dis
- *
- *  capture->swMs->display
- *  ============================================================================
- */
-
-/*  --------------------- Include user headers   ---------------------------- */
-
-#include <mcfw/interfaces/ti_vcap.h>
-#include <demos/link_api_demos/common/chains.h>
-#include <demos/link_api_demos/common/ti_swosd_logo_224x30_yuv422i.h>
-
-/*
- *  --------------------- Macro definition -------------------------------------
- */
-
-#define LOGO_WINID                  (0)
-#define DATE_WINID                  (1)
-#define TIME_WINID                  (2)
-#define CHANNEL_NAME_WINID          (3)
-
-
-
-Void Chains_singleChCapOsdDis(Chains_Ctrl *chainsCfg)
-{
-
-	CaptureLink_CreateParams	capturePrm;
-	CaptureLink_VipInstParams	*pCaptureInstPrm;
-	CaptureLink_OutParams       *pCaptureOutPrm;
-	IpcFramesOutLinkRTOS_CreateParams   ipcFramesOutVpssPrm;
-	IpcFramesInLinkRTOS_CreateParams    ipcFramesInDspPrm;
-	AlgLink_CreateParams      	osdPrm;
-
-	DupLink_CreateParams                dupPrm;
-	SwMsLink_CreateParams		swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-	DisplayLink_CreateParams	displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-
-	Uint32 captureId,vipInstId;
-	Uint32 ipcFramesOutVpssId;
-	Uint32 ipcFramesInDspId;
-	UInt32 osdId;
-	UInt32 dupId;
-	Uint32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
-	Uint32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
-	Uint32 i,j;
-
-	Ptr osdWinSrAddr[ALG_LINK_OSD_MAX_CH][CHAINS_OSD_NUM_WINDOWS];
-	Ptr osdWinBuPtr[ALG_LINK_OSD_MAX_CH][CHAINS_OSD_NUM_WINDOWS];
-
-
-	CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
-	CHAINS_INIT_STRUCT(IpcFramesOutLinkRTOS_CreateParams,ipcFramesOutVpssPrm);
-	CHAINS_INIT_STRUCT(IpcFramesInLinkRTOS_CreateParams,ipcFramesInDspPrm);
-	CHAINS_INIT_STRUCT(AlgLink_CreateParams,osdPrm);
-
-	for(i = 0; i < CHAINS_SW_MS_MAX_DISPLAYS; i++)
-	{
-		CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
-		CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
-
-	}
-	captureId 		= SYSTEM_LINK_ID_CAPTURE;
-	ipcFramesOutVpssId = SYSTEM_VPSS_LINK_ID_IPC_FRAMES_OUT_0;
-	ipcFramesInDspId   = SYSTEM_DSP_LINK_ID_IPC_FRAMES_IN_0;
-	osdId     		= SYSTEM_LINK_ID_ALG_0;
-	dupId         	=SYSTEM_VPSS_LINK_ID_DUP_0;
-	swMsId[0] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
-	swMsId[1] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
-	swMsId[2] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_2;
-	displayId[0]	= SYSTEM_LINK_ID_DISPLAY_0;
-	displayId[1]	= SYSTEM_LINK_ID_DISPLAY_1;
-	displayId[2]	= SYSTEM_LINK_ID_DISPLAY_2;
-
-
-
-	for(i = 0; i < gChains_ctrl.chRecNum; i++)
-	{
-		gChains_ctrl.chCfg[i + gChains_ctrl.chCapNum].channel = i;
-
-	}
-
-	/* capture + swMs + display */
-
-	VCAP_PARAMS_S  prm;
-	Vcap_params_init(&prm);
-	if(chainsCfg->chCapNum > 0)
-	{
-		capturePrm.numVipInst 				= chainsCfg->chCapNum;
-		capturePrm.tilerEnable              = FALSE;
-		capturePrm.numBufsPerCh             = 16;
-		capturePrm.numExtraBufs             = 0;
-		capturePrm.maxBlindAreasPerCh       = 0;
-		capturePrm.isPalMode                = FALSE;
-		capturePrm.enableSdCrop             = FALSE;
-		capturePrm.doCropInCapture          = FALSE;
-
-		for(i = 0; i< capturePrm.numVipInst; i++)
-		{
-			
-#if defined(TI816X_ETVH)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-#if defined(TI816X_ETVS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
-			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
-#endif
-#if defined(TI8107_INS)
-			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
-			pCaptureInstPrm						= &capturePrm.vipInst[i];
-			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-#endif
-
-			prm.channelParams[i].deviceId		= vipInstId;
-			prm.enableConfigExtVideoDecoder 	= TRUE;
-			prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
-
-			pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
-			pCaptureInstPrm->inScanFormat		= SYSTEM_SF_PROGRESSIVE;
-			pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
-			pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
-			pCaptureInstPrm->numOutput			= 1;
-
-			pCaptureOutPrm						= &pCaptureInstPrm->outParams[0];
-			pCaptureOutPrm->dataFormat			= SYSTEM_DF_YUV422I_YUYV;
-			pCaptureOutPrm->scEnable			= FALSE;
-			pCaptureOutPrm->outQueId			= 0;
-
-			capturePrm.outQueParams[0].nextLink	= ipcFramesOutVpssId;
-		}
-	}
-
-
-	ipcFramesOutVpssPrm.baseCreateParams.inQueParams.prevLinkId     = captureId;
-	ipcFramesOutVpssPrm.baseCreateParams.inQueParams.prevLinkQueId  = 0;
-	ipcFramesOutVpssPrm.baseCreateParams.notifyPrevLink             = FALSE;
-
-	ipcFramesOutVpssPrm.baseCreateParams.numOutQue                  = 1;
-	ipcFramesOutVpssPrm.baseCreateParams.outQueParams[0].nextLink   = dupId;
-	ipcFramesOutVpssPrm.baseCreateParams.notifyNextLink             = TRUE;
-
-	ipcFramesOutVpssPrm.baseCreateParams.processLink                = ipcFramesInDspId;
-	ipcFramesOutVpssPrm.baseCreateParams.notifyProcessLink          = TRUE;
-	ipcFramesOutVpssPrm.baseCreateParams.noNotifyMode               = FALSE;
-
-	ipcFramesInDspPrm.baseCreateParams.inQueParams.prevLinkId       = ipcFramesOutVpssId;
-	ipcFramesInDspPrm.baseCreateParams.inQueParams.prevLinkQueId    = 0;
-	ipcFramesInDspPrm.baseCreateParams.numOutQue                    = 1;
-	ipcFramesInDspPrm.baseCreateParams.outQueParams[0].nextLink     = osdId;
-	ipcFramesInDspPrm.baseCreateParams.notifyPrevLink               = FALSE;
-	ipcFramesInDspPrm.baseCreateParams.notifyNextLink               = TRUE;
-	ipcFramesInDspPrm.baseCreateParams.noNotifyMode                 = FALSE;
-
-	osdPrm.enableOSDAlg                     = TRUE;
-	osdPrm.enableSCDAlg                     = FALSE;
-	osdPrm.inQueParams.prevLinkId           = ipcFramesInDspId;
-	osdPrm.inQueParams.prevLinkQueId        = 0;
-
-	for(i=0; i<1; i++)//numWindows
-	{
-		/* set osd window max width and height */
-		osdPrm.osdChCreateParams[i].maxWidth    = CHAINS_OSD_WIN_MAX_WIDTH;
-		osdPrm.osdChCreateParams[i].maxHeight   = CHAINS_OSD_WIN_MAX_HEIGHT;
-
-		/* set osd window params */
-		AlgLink_OsdChWinParams * chWinPrm       = &osdPrm.osdChCreateParams[i].chDefaultParams;
-
-		chWinPrm->chId                          = i;
-		chWinPrm->numWindows                    = CHAINS_OSD_NUM_WINDOWS;
-
-		chWinPrm->colorKey[0]                   = 0xfa; /* Y */
-		chWinPrm->colorKey[1]                   = 0x7e; /* U */
-		chWinPrm->colorKey[2]                   = 0x7d; /* V */
-
-		
-		for(j=0; j < chWinPrm->numWindows; j++)
-		{
-			Chains_createBuf(&chWinPrm->winPrm[j].addr[0][0],
-					&osdWinBuPtr[i][j], &osdWinSrAddr[i][j], CHAINS_OSD_WIN_MAX_WIDTH *
-					CHAINS_OSD_WIN_MAX_HEIGHT*2, SYSTEM_IPC_SR_NON_CACHED_DEFAULT);
-
-			unsigned char *tmp = (unsigned char *)osdWinBuPtr[0][j];
-			int k;
-			for(k = 0; k < (CHAINS_OSD_WIN_MAX_WIDTH * CHAINS_OSD_WIN_MAX_HEIGHT *2); k++)
-			{
-				if(k % 4 == 0 || k % 4 == 2)
-					tmp[k] = 0xfa;
-				if(k % 4 == 1)
-					tmp[k] = 0x7e;
-				if(k % 4 == 3)
-					tmp[k] = 0x7d;
-
-			}
-
-			chWinPrm->winPrm[j].startX             = CHAINS_OSD_WIN0_STARTX;
-			chWinPrm->winPrm[j].startY             = CHAINS_OSD_WIN0_STARTY + (CHAINS_OSD_WIN_HEIGHT + CHAINS_OSD_WIN0_STARTY)*j;
-			chWinPrm->winPrm[j].format             = SYSTEM_DF_YUV422I_YUYV;
-			chWinPrm->winPrm[j].width              = CHAINS_OSD_WIN_WIDTH;
-			chWinPrm->winPrm[j].height             = CHAINS_OSD_WIN_HEIGHT;
-			chWinPrm->winPrm[j].lineOffset         = CHAINS_OSD_WIN_PITCH;
-			chWinPrm->winPrm[j].globalAlpha        = CHAINS_OSD_GLOBAL_ALPHA;
-			chWinPrm->winPrm[j].transperencyEnable = CHAINS_OSD_TRANSPARENCY;
-			chWinPrm->winPrm[j].enableWin          = CHAINS_OSD_ENABLE_WIN;
-
-			
-			if(j == LOGO_WINID)
-			{
-				memcpy(osdWinBuPtr[i][j], gMCFW_swosdTiLogoYuv422i, sizeof(gMCFW_swosdTiLogoYuv422i));
-			}
-		}
-
-	}
-
-
-
-
-
-
-	/*********************************************************************/
-	dupPrm.inQueParams.prevLinkId           = ipcFramesOutVpssId;
-	dupPrm.inQueParams.prevLinkQueId        = 0;
-	dupPrm.numOutQue                        = chainsCfg->chRecNum;
-	dupPrm.outQueParams[0].nextLink         = swMsId[0];
-	dupPrm.outQueParams[1].nextLink         = swMsId[1];
-	dupPrm.notifyNextLink                   = TRUE;
-
-	if(chainsCfg->chRecNum > 0)
-	{
-
-		for(i = chainsCfg->chCapNum; i < chainsCfg->chNum; i++)
-		{
-			chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
-		}
-		
-		Chains_displayCtrlInit(chainsCfg->displayRes);
-
-		for(i = 0; i< chainsCfg->chRecNum; i++)
-		{
-			swMsPrm[i].numSwMsInst					= 1;
-			swMsPrm[i].swMsInstId[0]				= (0 == i)? SYSTEM_SW_MS_SC_INST_DEIHQ_SC_NO_DEI: SYSTEM_SW_MS_SC_INST_DEI_SC_NO_DEI;
-			swMsPrm[i].inQueParams.prevLinkId		= dupId;
-			swMsPrm[i].inQueParams.prevLinkQueId	= i;
-			swMsPrm[i].outQueParams.nextLink		= displayId[i];
-			swMsPrm[i].lineSkipMode					= FALSE;
-			swMsPrm[i].enableLayoutGridDraw			= TRUE;
-			swMsPrm[i].layoutPrm.outputFPS			= chainsCfg->chCfg[i + chainsCfg->chCapNum].outFrameRate;
-			swMsPrm[i].maxInputQueLen				= SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
-			swMsPrm[i].maxOutRes					= chainsCfg->displayRes[i];
-
-			Chains_swMsGenerateLayoutParams(i,2,&swMsPrm[i]);
-
-			displayPrm[i].numInputQueues				= 1;
-			displayPrm[i].activeQueue					= 0;
-			displayPrm[i].inQueParams[0].prevLinkId		= swMsId[i];
-			displayPrm[i].inQueParams[0].prevLinkQueId	= 0;
-			displayPrm[i].displayRes					= chainsCfg->displayRes[i];
-
-
-		}
-	}
-	/* links create */
-	if(chainsCfg->chCapNum > 0)
-	{
-		System_linkCreate(captureId, &capturePrm,sizeof(capturePrm));
-		System_linkCreate(ipcFramesOutVpssId, &ipcFramesOutVpssPrm, sizeof(ipcFramesOutVpssPrm));
-		System_linkCreate(ipcFramesInDspId, &ipcFramesInDspPrm, sizeof(ipcFramesInDspPrm));
-		System_linkCreate(osdId, &osdPrm, sizeof(osdPrm));
-	}
-
-	if(chainsCfg->chRecNum > 0)
-	{
-		System_linkCreate(dupId, &dupPrm, sizeof(dupPrm));
-		for(i = 0; i < chainsCfg->chRecNum; i++)
-		{
-			System_linkCreate(swMsId[i],&swMsPrm[i],sizeof(swMsPrm[i]));
-			System_linkCreate(displayId[i],&displayPrm[i],sizeof(displayPrm[i]));
-		}
-	}
-
-	/* links start */
-	if(chainsCfg->chRecNum > 0)
-	{
-		Vdis_start();
-		for(i = 0; i < chainsCfg->chRecNum; i++)
-		{
-			System_linkStart(displayId[i]);
-			System_linkStart(swMsId[i]);
-		}
-		System_linkStart(dupId);
-	}
-
-	if(chainsCfg->chCapNum > 0)
-	{
-		System_linkStart(osdId);
-		System_linkStart(ipcFramesInDspId);
-		System_linkStart(ipcFramesOutVpssId);
-		Vcap_init(&prm);
-		Vcap_start();
-		System_linkStart(captureId);
-	}
-
-	while(1)
-	{
-		char ch;
-		ch = Chains_menuRunTime();
-		if(ch=='0')
-			break;
-	}
-
-	
-	/* links stop */
-	if(chainsCfg->chCapNum > 0)
-	{
-		Vcap_stop();
-		System_linkStop(captureId);
-		System_linkStop(ipcFramesOutVpssId);
-		System_linkStop(ipcFramesInDspId);
-		System_linkStop(osdId);
-	}
-	if(chainsCfg->chRecNum > 0)
-	{
-		System_linkStop(dupId);
-		Vdis_stop();
-		for(i = 0; i < chainsCfg->chRecNum; i++)
-		{
-			System_linkStop(swMsId[i]);
-			System_linkStop(displayId[i]);
-		}
-	}
-	/* links delete */
-	if(chainsCfg->chCapNum > 0)
-	{
-		System_linkDelete(captureId);
-		System_linkDelete(ipcFramesOutVpssId);
-		System_linkDelete(ipcFramesInDspId);
-		System_linkDelete(osdId);
-	}
-	if(chainsCfg->chRecNum > 0)
-	{
-		 System_linkDelete(dupId);
-		for(i = 0; i < chainsCfg->chRecNum; i++)
-		{
-			System_linkDelete(swMsId[i]);	
-			System_linkDelete(displayId[i]);	
-		}
-
-		Chains_displayCtrlDeInit();
-	}
-
-}
diff --git a/dvr_rdk/demos/link_api_demos/common/MAKEFILE.MK b/dvr_rdk/demos/link_api_demos/common/MAKEFILE.MK
index 07ca61e..8998f93 100755
--- a/dvr_rdk/demos/link_api_demos/common/MAKEFILE.MK
+++ b/dvr_rdk/demos/link_api_demos/common/MAKEFILE.MK
@@ -3,7 +3,9 @@ include $(dvr_rdk_PATH)/makerules/common_header_a8.mk
 
 INCLUDE+= $(MCFW_INC) $(OSA_INC) $(SYSLINK_INC) $(CODEC_INC)
 
-LIBS=$(LIB_DIR)/dvr_rdk_demo_link_api.a $(MCFW_LIBS) $(RPE_LIBS) 
+LIBS=$(LIB_DIR)/dvr_rdk_demo_link_api.a $(MCFW_LIBS) $(RPE_LIBS) \
+	 video_subsys/lib/libvideosubdev.a \
+	 video_subsys/lib/libmdin325a.a \
 
 include $(dvr_rdk_PATH)/makerules/common_footer_a8.mk
 
diff --git a/dvr_rdk/demos/link_api_demos/common/chains.h b/dvr_rdk/demos/link_api_demos/common/chains.h
index 1a36e92..f3ce142 100644
--- a/dvr_rdk/demos/link_api_demos/common/chains.h
+++ b/dvr_rdk/demos/link_api_demos/common/chains.h
@@ -10,6 +10,7 @@
 
 
 #include <osa.h>
+#include <osa_thr.h>
 
 #include <link_api/system.h>
 #include <link_api/system_common.h>
@@ -30,16 +31,28 @@
 #include <link_api/encLink.h>
 #include <link_api/decLink.h>
 #include <link_api/selectLink.h>
+#include <link_api/helloWorldLink.h>
 
+#include <common_def/ti_vdis_common_def.h>
+#include <common_def/ti_vcap_common_def.h>
 
+#include <ti_vdis.h>
+
+#include <mcfw/src_linux/devices/inc/device.h>
+
+#include "video_subsys/inc/adv7441a.h"
+#include "video_subsys/inc/sii9233a.h"
+#include "video_subsys/inc/mdin325a.h"
+#include "video_subsys/inc/i2c_dev.h"
+#include "video_subsys/inc/video_const.h"
+#include "video_subsys/inc/video_subdev.h"
+#include "video_subsys/inc/video_timing.h"
 
 #include <demos/link_api_demos/common/chains_swMs.h>
 #include <demos/link_api_demos/common/chains_ipcBits.h>
 #include <demos/link_api_demos/common/chains_common.h>
 #include <demos/link_api_demos/common/chains_avsync.h>
 
-#include <demos/graphic/graphic.h>
-
 #include <ti/xdais/xdas.h>
 #include <ti/xdais/dm/xdm.h>
 #include <ti/xdais/dm/ivideo.h>
@@ -172,6 +185,12 @@ Void Chains_SelCapSelRecv(Chains_Ctrl *chainsCfg);
 Void Chains_singleChCapOsdDis(Chains_Ctrl *chainsCfg);
 Void Chains_CapdspDis(Chains_Ctrl *chainsCfg);
 
+Void Chains_HD1Sii9233a_1Adv7441a_CapSwMsSii9022aDis(Chains_Ctrl *chainsCfg);
+Void Chains_HD1Sii9233a_CapSwMsDis(Chains_Ctrl *chainsCfg);
+Void Chains_HD2Sii9233aCapSwMsSii9022aDis(Chains_Ctrl *chainsCfg);
+Void Chains_HD3Gv7601_1Adv7441a_Mdin325a_CapSwMsSii9022aDis(Chains_Ctrl *chainsCfg);
+Void Chains_HD4Gv7601CapSwMsSii9022aDis(Chains_Ctrl *chainsCfg);
+
 
 char Chains_CapSwMsDisMenu();
 char Chains_RecvOneDecDisMenu();
@@ -210,7 +229,7 @@ unsigned int Chains_AudioPlaybackInputRunTime(Bool playbackActiveFlag, Int8 maxA
 
 Int32 Chains_detectBoard();
 
-Int32 Chains_displayCtrlInit(UInt32 displayRes[]);
+Int32 Chains_displayCtrlInit(VDIS_DEV_PARAM_S *deviceParams, UInt32 videoEncoderId);
 Int32 Chains_displayCtrlDeInit();
 Int32 Chains_prfLoadCalcEnable(Bool enable, Bool printStatus, Bool printTskLoad);
 Int32 Chains_memPrintHeapStatus();
diff --git a/dvr_rdk/demos/link_api_demos/common/chains_main.c b/dvr_rdk/demos/link_api_demos/common/chains_main.c
index b8866af..e10d96d 100644
--- a/dvr_rdk/demos/link_api_demos/common/chains_main.c
+++ b/dvr_rdk/demos/link_api_demos/common/chains_main.c
@@ -303,17 +303,11 @@ char gChains_menuMainVs[] = {
 
 char gChains_menuMainCh[] = {
     "\r\n"
-	"\r\n  0: Select Cap + Dis                                      (VIP:  2x Sii9233a)"
-	"\r\n  1: Select Cap + SwMs + Dis                               (VIP:  2x Sii9233a)"
-	"\r\n  2: Double Cap + Enc + Send                               (VIP:  2x Sii9233a)"
-	"\r\n  3: Double Recv + Dec + Dis                               (VIP:  2x Sii9233a)"
-	"\r\n  4: Select Cap + NSF + Enc + Dec + SwMs + Dis             (VIP:  2x Sii9233a)"
-	"\r\n  5: Single Recv + Dec + Dis                               (VIP:  2x Sii9233a)"
-	"\r\n  6: Four   Recv + Dec + SwMs + Dis                        (VIP:  2x Sii9233a)"
-	"\r\n  7: Select Cap + Enc + Dec + Dis                          (VIP:  2x Sii9233a)"
-	"\r\n  8: Select Cap + Enc and Select Dec + Dis                 (VIP:  2x Sii9233a)"
-	"\r\n  9: Select Cap + OSD + SwMs + Dis                         (VIP:  2x Sii9233a)"
-	"\r\n  10: Select Cap + DSP + Dis                               (VIP:  2x Sii9233a)"
+	"\r\n  0: Chains_HD1Sii9233a_1Adv7441a_CapSwMsSii9022aDis                          "
+	"\r\n  1: Chains_HD1Sii9233a_CapSwMsDis                                            "
+	"\r\n  2: Chains_HD2Sii9233aCapSwMsSii9022aDis                                     "
+	"\r\n  3: Chains_HD3Gv7601_1Adv7441a_Mdin325a_CapSwMsSii9022aDis                   "
+	"\r\n  4: Chains_HD4Gv7601CapSwMsSii9022aDis                                       "
     "\r\n "
     "\r\n s: System Settings "
     "\r\n "
@@ -355,12 +349,12 @@ Void Chains_menuMainRunCh(int demoId)
 			}
 
 
-			Chains_run(Chains_CapDis);
+			Chains_run(Chains_HD1Sii9233a_1Adv7441a_CapSwMsSii9022aDis);
 			break;
 
 		case 1:
-			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 4, 1);
-			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 2, 1);
+			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 1, 1);
+			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 1, 1);
 
 			for (i=0; i<gChains_ctrl.chCapNum; i++)
 			{
@@ -381,171 +375,16 @@ Void Chains_menuMainRunCh(int demoId)
 			}
 
 
-			Chains_run(Chains_CapSwMsDis);
+			Chains_run(Chains_HD1Sii9233a_CapSwMsDis);
 			break;
 
 		case 2:
 			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 2, 1);
-			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 0, 0);
-
-			for (i=0; i<gChains_ctrl.chCapNum; i++)
-			{
-				gChains_ctrl.chCfg[i].encFlag		= TRUE;
-				gChains_ctrl.chCfg[i].serverEnable 	= TRUE;
-				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
-			}
-
-			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
-
-			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
-			{
-				gChains_ctrl.chCfg[i].encFlag		= TRUE;
-				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].clientEnable 	= TRUE;
-				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
-			}
-
-
-			Chains_run(Chains_doubleChCapEncSend);
-			break;
-
-		case 3:
-			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 0, 0);
-			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 2, 2);
-
-			for (i=0; i<gChains_ctrl.chCapNum; i++)
-			{
-				gChains_ctrl.chCfg[i].encFlag		= TRUE;
-				gChains_ctrl.chCfg[i].serverEnable 	= TRUE;
-				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
-			}
-
-			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
-
-			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
-			{
-				gChains_ctrl.chCfg[i].encFlag		= TRUE;
-				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].clientEnable 	= TRUE;
-				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
-			}
-
-
-			Chains_run(Chains_doubleChRecvDecDis);
-			break;
-
-		case 4:
-			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 2, 1);
 			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 2, 1);
 
 			for (i=0; i<gChains_ctrl.chCapNum; i++)
 			{
-				gChains_ctrl.chCfg[i].encFlag		= TRUE;
-				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
-			}
-
-			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
-
-			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
-			{
-				gChains_ctrl.chCfg[i].encFlag		= TRUE;
-				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
-			}
-
-
-			Chains_run(Chains_SelCapNsfEncDecSwMsDis);
-			break;
-
-		case 5:
-			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 0, 0);
-			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 4, 1);
-
-			for (i=0; i<gChains_ctrl.chCapNum; i++)
-			{
-				gChains_ctrl.chCfg[i].encFlag		= TRUE;
-				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
-			}
-
-			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
-
-			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
-			{
-				gChains_ctrl.chCfg[i].encFlag		= TRUE;
-				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].clientEnable 	= TRUE;
-				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
-			}
-
-
-			Chains_run(Chains_RecvOneDecDis);
-			break;
-
-		case 6:
-			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 0, 0);
-			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 4, 1);
-
-			for (i=0; i<gChains_ctrl.chCapNum; i++)
-			{
-				gChains_ctrl.chCfg[i].encFlag		= TRUE;
-				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
-			}
-
-			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
-
-			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
-			{
-				gChains_ctrl.chCfg[i].encFlag		= TRUE;
-				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].clientEnable 	= TRUE;
-				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
-			}
-
-			Chains_run(Chains_RecvFourDecSwMsDis);
-			break;
-
-		case 7:
-			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 2, 1);
-			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 2, 1);
-
-			for (i=0; i<gChains_ctrl.chCapNum; i++)
-			{
-				gChains_ctrl.chCfg[i].encFlag		= TRUE;
-				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
-			}
-
-			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
-
-			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
-			{
-				gChains_ctrl.chCfg[i].encFlag		= TRUE;
-				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
-				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
-			}
-
-			Chains_run(Chains_CapEncDecDis);
-			break;
-
-
-		case 8:
-			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 3, 1);
-			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 2, 1);
-
-			for (i=0; i<gChains_ctrl.chCapNum; i++)
-			{
-				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].encFlag		= FALSE;
 				gChains_ctrl.chCfg[i].serverEnable 	= TRUE;
 				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
 				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
@@ -555,17 +394,17 @@ Void Chains_menuMainRunCh(int demoId)
 
 			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
 			{
-				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].encFlag		= FALSE;
 				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
 				gChains_ctrl.chCfg[i].clientEnable 	= TRUE;
 				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
 			}
 
 
-			Chains_run(Chains_SelCapSelRecv);
+			Chains_run(Chains_HD2Sii9233aCapSwMsSii9022aDis);
 			break;
 
-		case 9:
+		case 3:
 			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 4, 1);
 			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 2, 1);
 
@@ -588,10 +427,10 @@ Void Chains_menuMainRunCh(int demoId)
 			}
 
 
-			Chains_run(Chains_singleChCapOsdDis);
+			Chains_run(Chains_HD3Gv7601_1Adv7441a_Mdin325a_CapSwMsSii9022aDis);
 			break;
 
-		case 10:
+		case 4:
 			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 4, 1);
 			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 2, 1);
 
@@ -614,7 +453,7 @@ Void Chains_menuMainRunCh(int demoId)
 			}
 
 
-			Chains_run(Chains_CapdspDis);
+			Chains_run(Chains_HD4Gv7601CapSwMsSii9022aDis);
 			break;
 
 	}
@@ -668,7 +507,7 @@ Void Chains_main()
     }
 }
 
-Int32 Chains_displayCtrlInit(UInt32 displayRes[])
+Int32 Chains_displayCtrlInit(VDIS_DEV_PARAM_S *deviceParams, UInt32 videoEncoderId)
 {
     Int32   status = OSA_SOK, i;
 
@@ -678,25 +517,43 @@ Int32 Chains_displayCtrlInit(UInt32 displayRes[])
     
 	for (i = 0; i < SYSTEM_DC_MAX_VENC; i++)
     {
-        prm.deviceParams[i].resolution = displayRes[i];
+        prm.deviceParams[i].enable      = deviceParams[i].enable;
+        prm.deviceParams[i].resolution  = deviceParams[i].resolution;
+        prm.deviceParams[i].outputInfo.aFmt     = deviceParams[i].outputInfo.aFmt;
+        prm.deviceParams[i].outputInfo.dvoFmt   = deviceParams[i].outputInfo.dvoFmt;
+        prm.deviceParams[i].outputInfo.dataFormat  = deviceParams[i].outputInfo.dataFormat;
+        prm.deviceParams[i].outputInfo.vencNodeNum   = deviceParams[i].outputInfo.vencNodeNum;
     }
-
-   /* Setting SD resolution for SD VENC */
-   prm.deviceParams[SYSTEM_DC_VENC_SD].resolution = VSYS_STD_NTSC;
-
-    prm.deviceParams[SYSTEM_DC_VENC_HDMI].enable = TRUE;
-    prm.deviceParams[SYSTEM_DC_VENC_DVO2].enable = TRUE;
-    prm.deviceParams[SYSTEM_DC_VENC_HDCOMP].enable = TRUE;
-    prm.deviceParams[SYSTEM_DC_VENC_SD].enable = TRUE;
-
-	prm.enableLayoutGridDraw	= TRUE;
-    prm.enableConfigExtVideoEncoder = TRUE;
-    prm.enableConfigExtThsFilter = FALSE;
-    prm.enableEdgeEnhancement = TRUE;
-    prm.numChannels = 2;
-    prm.numUserChannels = 1;
-
-	Vdis_tiedVencInit(VDIS_DEV_HDCOMP,VDIS_DEV_DVO2,&prm);
+	
+    prm.numUserChannels             = 1;
+    prm.numChannels                 = 2;
+    prm.enableHdmiControl	        = TRUE;
+    prm.enableLayoutGridDraw	    = TRUE;
+    prm.enableEdgeEnhancement       = TRUE;
+    prm.enableConfigExtGv7600       = FALSE;
+    prm.enableConfigExtThsFilter    = FALSE;
+    prm.enableConfigExtVideoEncoder = FALSE;
+#if defined (TI_816X_BUILD)
+    prm.tiedDevicesMask = VDIS_VENC_DVO2 | VDIS_VENC_HDCOMP;
+    prm.deviceParams[VDIS_VENC_HDCOMP].resolution = prm.deviceParams[VDIS_DEV_DVO2].resolution;
+#endif
+#if defined (TI_814X_BUILD)
+    prm.tiedDevicesMask = VDIS_VENC_DVO2 | VDIS_VENC_HDMI;
+    prm.deviceParams[VDIS_VENC_DVO2].resolution = prm.deviceParams[VDIS_DEV_HDMI].resolution;
+#endif
+#if defined (TI_8107_BUILD)
+    prm.tiedDevicesMask = VDIS_VENC_HDMI | VDIS_VENC_HDCOMP;
+    prm.deviceParams[VDIS_VENC_HDCOMP].resolution = prm.deviceParams[VDIS_DEV_HDMI].resolution;
+#endif
+    prm.deviceParams[SYSTEM_DC_VENC_HDMI].colorSpaceMode = VDIS_CSC_MODE_HDTV_VIDEO_Y2R;
+    if (videoEncoderId == DEVICE_VID_ENC_SII9022A_DRV)
+        prm.enableConfigExtVideoEncoder = TRUE;
+    else if (videoEncoderId == DEVICE_VID_ENC_THSFILTER_DRV)
+        prm.enableConfigExtThsFilter    = TRUE;
+    else if (videoEncoderId == DEVICE_VID_ENC_GV7600_DRV)
+        prm.enableConfigExtGv7600       = TRUE;
+	
+	
 	Vdis_init(&prm);
 
 	status = System_linkControl(
diff --git a/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/adv7441a.h b/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/adv7441a.h
new file mode 100755
index 0000000..ccd60b5
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/adv7441a.h
@@ -0,0 +1,12 @@
+#ifndef __ADV7441A_H__
+#define __ADV7441A_H__
+
+#include "i2c_dev.h"
+#include "video_subdev.h"
+#include "video_const.h"
+
+video_subdev_obj *adv7441a_create(video_create_params *create_params);
+int adv7441a_delete (video_subdev_obj *pobj);
+int adv7441a_control(video_subdev_obj *pobj, uint32 cmd, ptr cmd_params);
+
+#endif /* __ADV7441A_H__ */
diff --git a/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/i2c_dev.h b/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/i2c_dev.h
new file mode 100755
index 0000000..92de085
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/i2c_dev.h
@@ -0,0 +1,26 @@
+#ifndef __I2C_DEV_H__
+#define __I2C_DEV_H__
+
+typedef  unsigned char          uint8;
+typedef  unsigned short         uint16;
+typedef  unsigned int           uint32;
+typedef  unsigned long long     uint64;
+
+#define  I2C_SUSS       (0)     /* i2c operation succeed */
+#define  I2C_FAIL       (-1)    /* i2c operation failed  */
+
+/*
+ * used for i2c operation such as i2c read and write
+ */ 
+typedef struct {
+    int     fd;
+} i2c_handle;
+
+int i2c_dev_open (i2c_handle *handle, uint32 inst_id);
+int i2c_dev_close(i2c_handle *handle);
+int i2c_dev_read (i2c_handle *handle, uint16 dev_addr, uint8 *reg_addr, uint8 *reg_value, uint32 reg_count);
+int i2c_dev_write(i2c_handle *handle, uint16 dev_addr, uint8 *reg_addr, uint8 *reg_value, uint32 reg_count);
+int i2c_dev_rawread (i2c_handle *handle, uint16 dev_addr, uint8 *reg_value, uint32 reg_count);
+int i2c_dev_rawwrite(i2c_handle *handle, uint16 dev_addr, uint8 *reg_value, uint32 reg_count);
+
+#endif /* __I2C_DEV_H__ */
diff --git a/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/mdin325a.h b/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/mdin325a.h
new file mode 100755
index 0000000..231ba15
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/mdin325a.h
@@ -0,0 +1,20 @@
+//----------------------------------------------------------------------------------------------------------------------
+// (C) Copyright 2010  Macro Image Technology Co., LTd. , All rights reserved
+// 
+// This source code is the property of Macro Image Technology and is provided
+// pursuant to a Software License Agreement. This code's reuse and distribution
+// without Macro Image Technology's permission is strictly limited by the confidential
+// information provisions of the Software License Agreement.
+//-----------------------------------------------------------------------------------------------------------------------
+//
+// File Name   		:  MDINBUS.H
+// Description 		:  This file contains typedefine for the driver files	
+// Ref. Docment		: 
+// Revision History 	:
+
+#ifndef		__MDIN325A_H__
+#define		__MDIN324A_H__
+
+unsigned int Mdin325_Config(int frameWidth,int frameHeight,int frameInterval);
+
+#endif		//__MDIN324A_H__
diff --git a/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/sii9233a.h b/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/sii9233a.h
new file mode 100755
index 0000000..88a93ee
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/sii9233a.h
@@ -0,0 +1,12 @@
+#ifndef __SII9233A_H__
+#define __SII9233A_H__
+
+#include "i2c_dev.h"
+#include "video_subdev.h"
+#include "video_const.h"
+
+video_subdev_obj *sii9233a_create(video_create_params *create_params);
+int sii9233a_delete (video_subdev_obj *pobj);
+int sii9233a_control(video_subdev_obj *pobj, uint32 cmd, ptr cmd_params);
+
+#endif /* __SII9233A_H__ */
diff --git a/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/video_const.h b/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/video_const.h
new file mode 100755
index 0000000..d74fbd8
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/video_const.h
@@ -0,0 +1,365 @@
+#ifndef __VIDEO_CONST_H__
+#define __VIDEO_CONST_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * brief video interface mode 
+ */
+typedef enum
+{
+    /* 8bit  - BT656 standard */
+    VIDEO_IF_MODE_8BIT = 0,
+    /* 16bit - BT1120 standard */
+    VIDEO_IF_MODE_16BIT,
+    /* 24bit */
+    VIDEO_IF_MODE_24BIT,
+    /* maximum modes */
+    VIDEO_IF_MODE_MAX
+} video_if_mode;
+
+/*
+ * brief video data format
+ */
+typedef enum
+{
+    /* YUV 422 interleaved format - UYVY */
+    VIDEO_DF_YUV422I_UYVY = 0x0000,
+    /* YUV 422 interleaved format - YUYV */
+    VIDEO_DF_YUV422I_YUYV,
+    /* YUV 422 interleaved format - YVYU */
+    VIDEO_DF_YUV422I_YVYU,
+    /* YUV 422 interleaved format - VYUY */
+    VIDEO_DF_YUV422I_VYUY,
+    /* YUV 422 semi-planar - Y separate, UV interleaved */
+    VIDEO_DF_YUV422SP_UV,
+    /* YUV 422 semi-planar - Y separate, VU interleaved */
+    VIDEO_DF_YUV422SP_VU,
+    /* YUV 422 planar - Y, U and V separate. */
+    VIDEO_DF_YUV422P,
+    /* YUV 420 semi-planar - Y separate, UV interleaved */
+    VIDEO_DF_YUV420SP_UV,
+    /* YUV 420 semi-planar - Y separate, VU interleaved */
+    VIDEO_DF_YUV420SP_VU,
+    /* YUV 420 planar - Y, U and V separate */
+    VIDEO_DF_YUV420P,
+    /* YUV 444 planar - Y, U and V separate */
+    VIDEO_DF_YUV444P,
+    /* YUV 444 interleaved - YUVYUV */
+    VIDEO_DF_YUV444I,
+    
+    /* RGB565 16-bit - 5-bits R, 6-bits G, 5-bits B */
+    VIDEO_DF_RGB16_565 = 0x1000,
+    /* ARGB1555 16-bit - 5-bits R, 5-bits G, 5-bits B, 1-bit alpha (MSB) */
+    VIDEO_DF_ARGB16_1555,
+    /* RGBA5551 16-bit - 5-bits R, 5-bits G, 5-bits B, 1-bit alpha (LSB) */
+    VIDEO_DF_RGBA16_5551,
+    /* ARGB4444 16-bit - 4-bits R, 4-bits G, 4-bits B, 4-bit alpha (MSB) */
+    VIDEO_DF_ARGB16_4444,
+    /* RGBA4444 16-bit - 4-bits R, 4-bits G, 4-bits B, 4-bit alpha (LSB) */
+    VIDEO_DF_RGBA16_4444,
+    /* ARGB6666 24-bit - 6-bits R, 6-bits G, 6-bits B, 6-bit alpha (MSB) */
+    VIDEO_DF_ARGB24_6666,
+    /* RGBA6666 24-bit - 6-bits R, 6-bits G, 6-bits B, 6-bit alpha (LSB) */
+    VIDEO_DF_RGBA24_6666,
+    /* RGB24 24-bit - 8-bits R, 8-bits G, 8-bits B. */
+    VIDEO_DF_RGB24_888,
+    /* ARGB32 32-bit - 8-bits R, 8-bits G, 8-bits B, 8-bit alpha (MSB) */
+    VIDEO_DF_ARGB32_8888,
+    /* RGBA32 32-bit - 8-bits R, 8-bits G, 8-bits B, 8-bit alpha (LSB) */
+    VIDEO_DF_RGBA32_8888,
+    /* BGR565 16-bit -   5-bits B, 6-bits G, 5-bits R */
+    VIDEO_DF_BGR16_565,
+    /* ABGR1555 16-bit - 5-bits B, 5-bits G, 5-bits R, 1-bit alpha (MSB) */
+    VIDEO_DF_ABGR16_1555,
+    /* ABGR4444 16-bit - 4-bits B, 4-bits G, 4-bits R, 4-bit alpha (MSB) */
+    VIDEO_DF_ABGR16_4444,
+    /* BGRA5551 16-bit - 5-bits B, 5-bits G, 5-bits R, 1-bit alpha (LSB) */
+    VIDEO_DF_BGRA16_5551,
+    /* BGRA4444 16-bit - 4-bits B, 4-bits G, 4-bits R, 4-bit alpha (LSB) */
+    VIDEO_DF_BGRA16_4444,
+    /* ABGR6666 24-bit - 6-bits B, 6-bits G, 6-bits R, 6-bit alpha (MSB) */
+    VIDEO_DF_ABGR24_6666,
+    /* BGR888 24-bit - 8-bits B, 8-bits G, 8-bits R */
+    VIDEO_DF_BGR24_888,
+    /* ABGR8888 32-bit - 8-bits B, 8-bits G, 8-bits R, 8-bit alpha (MSB) */
+    VIDEO_DF_ABGR32_8888,
+    /* BGRA6666 24-bit - 6-bits B, 6-bits G, 6-bits R, 6-bit alpha (LSB) */
+    VIDEO_DF_BGRA24_6666,
+    /* BGRA8888 32-bit - 8-bits B, 8-bits G, 8-bits R, 8-bit alpha (LSB) */
+    VIDEO_DF_BGRA32_8888,
+    
+    /* BITMAP 8bpp. */
+    VIDEO_DF_BITMAP8 = 0x2000,
+    /* BITMAP 4bpp lower address in clut */
+    VIDEO_DF_BITMAP4_LOWER,
+    /* BITMAP 4bpp upper address in clut */
+    VIDEO_DF_BITMAP4_UPPER,
+    /* BITMAP 2bpp offset 0 in clut */
+    VIDEO_DF_BITMAP2_OFFSET0,
+    /* BITMAP 2bpp offset 1 in clut */
+    VIDEO_DF_BITMAP2_OFFSET1,
+    /* BITMAP 2bpp offset 2 in clut */
+    VIDEO_DF_BITMAP2_OFFSET2,
+    /* BITMAP 2bpp offset 3 in clut */
+    VIDEO_DF_BITMAP2_OFFSET3,
+    /* BITMAP 1bpp offset 0 in clut */
+    VIDEO_DF_BITMAP1_OFFSET0,
+    /* BITMAP 1bpp offset 1 in clut */
+    VIDEO_DF_BITMAP1_OFFSET1,
+    /* BITMAP 1bpp offset 2 in clut */
+    VIDEO_DF_BITMAP1_OFFSET2,
+    /* BITMAP 1bpp offset 3 in clut */
+    VIDEO_DF_BITMAP1_OFFSET3,
+    /* BITMAP 1bpp offset 4 in clut */
+    VIDEO_DF_BITMAP1_OFFSET4,
+    /* BITMAP 1bpp offset 5 in clut */
+    VIDEO_DF_BITMAP1_OFFSET5,
+    /* BITMAP 1bpp offset 6 in clut */
+    VIDEO_DF_BITMAP1_OFFSET6,
+    /* BITMAP 1bpp offset 7 in clut */
+    VIDEO_DF_BITMAP1_OFFSET7,
+    /* BITMAP 8bpp BGRA32 */
+    VIDEO_DF_BITMAP8_BGRA32,
+    /* BITMAP 4bpp BGRA32 lower address in clut */
+    VIDEO_DF_BITMAP4_BGRA32_LOWER,
+    /* BITMAP 4bpp BGRA32 upper address in clut */
+    VIDEO_DF_BITMAP4_BGRA32_UPPER,
+    /* BITMAP 2bpp BGRA32 offset 0 in clut */
+    VIDEO_DF_BITMAP2_BGRA32_OFFSET0,
+    /* BITMAP 2bpp BGRA32 offset 1 in clut */
+    VIDEO_DF_BITMAP2_BGRA32_OFFSET1,
+    /* BITMAP 2bpp BGRA32 offset 2 in clut */
+    VIDEO_DF_BITMAP2_BGRA32_OFFSET2,
+    /* BITMAP 2bpp BGRA32 offset 3 in clut */
+    VIDEO_DF_BITMAP2_BGRA32_OFFSET3,
+    /* BITMAP 1bpp BGRA32 offset 0 in clut */
+    VIDEO_DF_BITMAP1_BGRA32_OFFSET0,
+    /* BITMAP 1bpp BGRA32 offset 1 in clut */
+    VIDEO_DF_BITMAP1_BGRA32_OFFSET1,
+    /* BITMAP 1bpp BGRA32 offset 2 in clut */
+    VIDEO_DF_BITMAP1_BGRA32_OFFSET2,
+    /* BITMAP 1bpp BGRA32 offset 3 in clut */
+    VIDEO_DF_BITMAP1_BGRA32_OFFSET3,
+    /* BITMAP 1bpp BGRA32 offset 4 in clut */
+    VIDEO_DF_BITMAP1_BGRA32_OFFSET4,
+    /* BITMAP 1bpp BGRA32 offset 5 in clut */
+    VIDEO_DF_BITMAP1_BGRA32_OFFSET5,
+    /* BITMAP 1bpp BGRA32 offset 6 in clut */
+    VIDEO_DF_BITMAP1_BGRA32_OFFSET6,
+    /* BITMAP 1bpp BGRA32 offset 7 in clut */
+    VIDEO_DF_BITMAP1_BGRA32_OFFSET7,
+    /* bayer pattern */
+    VIDEO_DF_BAYER_RAW = 0x3000,
+    /* raw VBI data */
+    VIDEO_DF_RAW_VBI,
+    /* raw data - format not interpreted */
+    VIDEO_DF_RAW,
+    /* for future purpose */
+    VIDEO_DF_MISC,
+    /* invalid data format.used to initialize variables */
+    VIDEO_DF_INVALID
+} video_data_format;
+
+/*
+ * brief capture mode
+ */
+typedef enum
+{
+    /* single channel non multiplexed mode */
+    VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_EMBEDDED_SYNC = 0,
+    /* multi-channel line-multiplexed mode */
+    VIDEO_CAPTURE_MODE_MULTI_CH_LINE_MUX_EMBEDDED_SYNC,
+    /* multi-channel pixel muxed */
+    VIDEO_CAPTURE_MODE_MULTI_CH_PIXEL_MUX_EMBEDDED_SYNC,
+    /* single channel non multiplexed discrete sync mode with HSYNC and VBLK as control signals */
+    VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_HSYNC_VBLK,
+    /* single channel non multiplexed discrete sync mode with HSYNC and VSYNC as control signals */
+    VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_HSYNC_VSYNC,
+    /* single channel non multiplexed discrete sync mode with ACTVID and VBLK as control signals */
+    VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VBLK,
+    /* single channel non multiplexed discrete sync mode with ACTVID and VSYNC as control signals */
+    VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC,
+    /* multi-channel line-multiplexed mode - split line mode */
+    VIDEO_CAPTURE_MODE_MULTI_CH_LINE_MUX_SPLIT_LINE_EMBEDDED_SYNC,
+    /* maximum modes */
+    VIDEO_CAPTURE_MODE_MAX
+} video_capture_mode;
+
+/*
+ * brief video standards
+ */
+typedef enum
+{
+    /* 720x480 30FPS interlaced NTSC standard */
+    VIDEO_STD_NTSC = 0u,
+    /* 720x576 30FPS interlaced PAL standard */
+    VIDEO_STD_PAL,
+
+    /* 720x480 30FPS interlaced SD standard */
+    VIDEO_STD_480I,
+    /* 720x576 30FPS interlaced SD standard */
+    VIDEO_STD_576I,
+
+    /* interlaced, 360x120 per field NTSC, 360x144 per field PAL */
+    VIDEO_STD_CIF,
+    /* interlaced, 360x240 per field NTSC, 360x288 per field PAL */
+    VIDEO_STD_HALF_D1,
+    /* interlaced, 720x240 per field NTSC, 720x288 per field PAL */
+    VIDEO_STD_D1,
+
+    /* 720x480 60FPS progressive ED standard */
+    VIDEO_STD_480P,
+    /* 720x480 30FPS progressive ED standard */
+    VIDEO_STD_480P_30,
+    /* 720x576 50FPS progressive ED standard */
+    VIDEO_STD_576P,
+    /* 720x576 25FPS progressive ED standard */
+    VIDEO_STD_576P_25,
+
+    /* 1280x720 60FPS progressive HD standard */
+    VIDEO_STD_720P_60,
+    /* 1280x720 50FPS progressive HD standard */
+    VIDEO_STD_720P_50,
+    /* 1280x720 30FPS progressive HD standard */
+    VIDEO_STD_720P_30,
+    /* 1280x720 25FPS progressive HD standard */
+    VIDEO_STD_720P_25,
+    /* 1280x720 24FPS progressive HD standard */
+    VIDEO_STD_720P_24,
+
+    /* 1920x1080 30FPS interlaced HD standard */
+    VIDEO_STD_1080I_60,
+    /* 1920x1080 25FPS interlaced HD standard */
+    VIDEO_STD_1080I_50,
+
+    /* 1920x1080 60FPS progressive HD standard */
+    VIDEO_STD_1080P_60,
+    /* 1920x1080 50FPS progressive HD standard */
+    VIDEO_STD_1080P_50,
+    /* 1920x1080 30FPS progressive HD standard */
+    VIDEO_STD_1080P_30,
+    /* 1920x1080 25FPS progressive HD standard */
+    VIDEO_STD_1080P_25,
+    /* 1920x1080 24FPS progressive HD standard */
+    VIDEO_STD_1080P_24,
+
+    /* 640x480 60FPS VESA standard */
+    VIDEO_STD_VGA_60 = 0x100,
+    /* 640x480 72FPS VESA standard */
+    VIDEO_STD_VGA_72,
+    /* 640x480 75FPS VESA standard */
+    VIDEO_STD_VGA_75,
+    /* 640x480 85FPS VESA standard */
+    VIDEO_STD_VGA_85,
+
+    /* 800x480 60PFS VESA standard */
+    VIDEO_STD_WVGA_60,
+
+    /* 800x600 60FPS VESA standard */
+    VIDEO_STD_SVGA_60,
+    /* 800x600 72FPS VESA standard */
+    VIDEO_STD_SVGA_72,
+    /* 800x600 75FPS VESA standard */
+    VIDEO_STD_SVGA_75,
+    /* 800x600 85FPS VESA standard */
+    VIDEO_STD_SVGA_85,
+
+    /* 1024x600 70FPS standard */
+    VIDEO_STD_WSVGA_70,
+
+    /* 1024x768 60FPS VESA standard */
+    VIDEO_STD_XGA_60,
+    /* 1024x768 72FPS VESA standard */
+    VIDEO_STD_XGA_70,
+    /* 1024x768 75FPS VESA standard */
+    VIDEO_STD_XGA_75,
+    /* 1024x768 85FPS VESA standard */
+    VIDEO_STD_XGA_85,
+
+    /* 1368x768 60FPS VESA standard */
+    VIDEO_STD_1368_768_60,
+    /* 1366x768 60FPS VESA standard */
+    VIDEO_STD_1366_768_60,
+    /* 1360x768 60FPS VESA standard */
+    VIDEO_STD_1360_768_60,
+
+    /* 1280x800 60FPS VESA standard */
+    VIDEO_STD_WXGA_60,
+    /* 1280x800 75FPS VESA standard */
+    VIDEO_STD_WXGA_75,
+    /* 1280x800 85FPS VESA standard */
+    VIDEO_STD_WXGA_85,
+
+    /* 1440x900 60FPS VESA standard */
+    VIDEO_STD_1440_900_60,
+
+    VIDEO_STD_SXGA_60,
+    /* 1280x1024 60FPS VESA standard */
+    VIDEO_STD_SXGA_75,
+    /* 1280x1024 75FPS VESA standard */
+    VIDEO_STD_SXGA_85,
+    /* 1280x1024 85FPS VESA standard */
+
+    /* 1680x1050 60FFS VESA standard */
+    VIDEO_STD_WSXGAP_60,
+
+    /* 1400x1050 60FPS VESA standard */
+    VIDEO_STD_SXGAP_60,
+    /* 1400x1050 75FPS VESA standard */
+    VIDEO_STD_SXGAP_75,
+
+    /* 1600x1200 60FPS VESA standard */
+    VIDEO_STD_UXGA_60,
+    
+    /* 1920x1200 60FPS VESA standard */
+    VIDEO_STD_WUXGA_60,
+
+    /* interlaced, 2Ch D1, NTSC or PAL */
+    VIDEO_STD_MUX_2CH_D1 = 0x200,
+    /* interlaced, 2ch half D1, NTSC or PAL */
+    VIDEO_STD_MUX_2CH_HALF_D1,
+    /* interlaced, 2ch CIF, NTSC or PAL */
+    VIDEO_STD_MUX_2CH_CIF,
+    /* interlaced, 4Ch D1, NTSC or PAL */
+    VIDEO_STD_MUX_4CH_D1,
+    /* interlaced, 4Ch CIF, NTSC or PAL */
+    VIDEO_STD_MUX_4CH_CIF,
+    /* interlaced, 4Ch Half-D1, NTSC or PAL */
+    VIDEO_STD_MUX_4CH_HALF_D1,
+    /* interlaced, 8Ch CIF, NTSC or PAL */
+    VIDEO_STD_MUX_8CH_CIF,
+    /* interlaced, 8Ch Half-D1, NTSC or PAL */
+    VIDEO_STD_MUX_8CH_HALF_D1,
+    /* interlaced ,4Ch 960H, NTSC or PAL */
+    VIDEO_STD_MUX_4CH_960H,
+
+    /* auto-detect standard. used in capture mode */
+    VIDEO_STD_AUTO_DETECT = 0x300,
+    /* video timing is provided by the app. used in display mode */
+    VIDEO_STD_CUSTOM,
+    /* invalid standard used for initializations and error checks */
+    VIDEO_STD_INVALID = 0xFFFF
+} video_standard;
+
+/*
+ * brief video scan format
+ */
+typedef enum
+{
+    /* interlaced mode */
+    VIDEO_SF_INTERLACED = 0,
+    /* progressive mode */
+    VIDEO_SF_PROGRESSIVE,
+    /* maximum modes */
+    VIDEO_SF_MAX
+} video_scan_format;
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
+
+#endif /* __VIDEO_CONST_H__ */
+
diff --git a/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/video_subdev.h b/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/video_subdev.h
new file mode 100755
index 0000000..7c4418d
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/video_subdev.h
@@ -0,0 +1,114 @@
+#ifndef __VIDEO_SUBDEV_H__
+#define __VIDEO_SUBDEV_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include "i2c_dev.h"
+
+/* the below is used to define video id */
+#define VIDEO_DEV_BASE                  0x1000
+#define VIDEO_DEV_SII9233A_DRV          (VIDEO_DEV_BASE + 0)
+#define VIDEO_DEV_G7601_DRV             (VIDEO_DEV_BASE + 1)
+#define VIDEO_DEV_ADV7441_DRV           (VIDEO_DEV_BASE + 2)
+#define VIDEO_DEV_TVP7002               (VIDEO_DEV_BASE + 3)
+#define VIDEO_DEV_TVP5158               (VIDEO_DEV_BASE + 4)
+#define VIDEO_DEV_TVP5150               (VIDEO_DEV_BASE + 5)
+#define VIDEO_DEV_SII9022               (VIDEO_DEV_BASE + 0x50)
+#define VIDEO_DEV_GV7600                (VIDEO_DEV_BASE + 0x51) 
+
+/* the below is used to define video command */
+#define VIDEO_CMD_BASE                  0x2000
+/* init video hardware such as set factory mode and set edid */
+#define VIDEO_CMD_INIT                  (VIDEO_CMD_BASE + 0)
+/* get video's id info and hardware version */
+#define VIDEO_CMD_GET_CHIPID            (VIDEO_CMD_BASE + 1)
+/* get video's standard */ 
+#define VIDEO_CMD_GET_STATUS            (VIDEO_CMD_BASE + 2)
+/* set video mode such as interface mode, data format and capture mode */
+#define VIDEO_CMD_SET_MODE              (VIDEO_CMD_BASE + 3)
+/* start the video capture or display */
+#define VIDEO_CMD_START                 (VIDEO_CMD_BASE + 4)
+/* stop the video capture or display */
+#define VIDEO_CMD_STOP                  (VIDEO_CMD_BASE + 5)
+
+#define TRUE    1
+#define FALSE   0
+typedef void    *ptr;
+
+typedef enum {
+    VIDEO_ACTIVE_PORT_IS_NONE = 0,
+    VIDEO_ACTIVE_PORT_IS_CVBS,
+    VIDEO_ACTIVE_PORT_IS_SVIDEO,
+    VIDEO_ACTIVE_PORT_IS_VGA,
+    VIDEO_ACTIVE_PORT_IS_YPBPR,
+    VIDEO_ACTIVE_PORT_IS_SDI,
+    VIDEO_ACTIVE_PORT_IS_DVI,
+    VIDEO_ACTIVE_PORT_IS_HDMI,
+} active_port;
+
+typedef struct {
+    uint32  dev_id;
+    uint32 inst_id;
+    uint16 i2c_addr[2];
+} video_create_params;
+
+/*
+ * the video device 's hardware infomation
+ */ 
+typedef struct {
+    uint32 chipid;
+    uint32 chip_revision;
+    uint32 firmware_version;
+} video_chipid_params;
+
+/*
+ * the current video status
+ */
+typedef struct {
+    /* HDMI or VGA input */
+    uint32 active_port;
+    /* whether video is detected*/
+    uint32 detected;
+    uint32 width;
+    uint32 height;
+    uint32 framerate;
+    uint32 interval;
+    uint32 interlaced;
+    uint32 video_standard;
+    /* g_video_timing's index*/
+    uint32 index;
+    /* used for next video detected */
+    uint32 status_changed;
+} video_status_params;
+
+typedef struct {
+    /* 8bit 16bit or 24bit video interface mode */
+    uint32 video_if_mode; 
+    /* RGB or YUV data format such as YUV_422P */
+    uint32 video_data_format; 
+    /* multiplexing mode line mux mode or pixel mux mode */
+    uint32 video_capture_mode;
+    /* 1080P_60 or 720P_60 */
+    uint32 video_standard;
+    /* interlaced mode or progressive mode */
+    uint32 video_scan_format;
+} video_mode_params;
+
+/*
+ * represent the entire video device
+ */ 
+typedef struct {
+    i2c_handle          handle;
+    video_create_params create_params;
+    video_status_params status_params;
+    video_mode_params   mode_params;
+    uint32              power_on_init;
+} video_subdev_obj;
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
+
+#endif /* __VIDEO_SUBDEV_H__ */
diff --git a/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/video_timing.h b/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/video_timing.h
new file mode 100755
index 0000000..0589044
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/common/video_subsys/inc/video_timing.h
@@ -0,0 +1,46 @@
+#ifndef __VIDEO_TIMING_H__
+#define __VIDEO_TIMING_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include "i2c_dev.h"
+
+/*
+ * brief video standard's description and timings
+ */
+typedef struct {
+    char        *name;
+    uint32      video_standard;
+    /* active video frame width in pixels */
+    uint32      width;
+    /* active video frame height in lines */
+    uint32      height;
+    /* video frames per second */
+    uint32      framerate;
+    /* total video frame width in pixels */
+    uint32      total_width;
+    /* total video frame height in lines */
+    uint32      total_height;
+    /* pixel clock of video standard in khz */
+    uint32      pixelclock;
+    /* horizontal front porch */
+    uint32      hfrontporch;
+    /* horizontal back porch */
+    uint32      hbackporch;
+    /* horizontal sync length */
+    uint32      hsynclen;
+    /* vertical front porch */
+    uint32      vfrontporch;
+    /* vertical back porch */
+    uint32      vbackporch;
+    /* vertical sync length */
+    uint32      vsynclen;
+} video_timing_params;
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
+
+#endif /* __VIDEO_TIMING_H__ */
diff --git a/dvr_rdk/demos/link_api_demos/common/video_subsys/lib/libmdin325a.a b/dvr_rdk/demos/link_api_demos/common/video_subsys/lib/libmdin325a.a
new file mode 100755
index 0000000000000000000000000000000000000000..cc58bc520703be81917947f48b4714e6aad07287
GIT binary patch
literal 139856
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%0AfB!pyTI*hX
z^He!yOm!PEb<Kz2EH}N*!f$Xrw*-J^2Kfu9)i_zb8Vrf^7gB8=3I1C$K50E?i88zp
zZ^uLW8Gy$PoV%;}U@}|ry94+VBzh&F=6~E*g2%td!0!Vc@h>6into0OJf-vKI}9A-
z6+wKCA^%~Hi=^}Dj~Mvl@F#B4SFmzO=h0Uh_y+hB?*^ni&jS{rFle0mdgB!Qlg>|w
z#CWQo;k_<H>a*LRXZRB6-*evgnI9Twc*JMog;T#~c!OUzg5UQOF3J1;>L4t>t62fE
zT>m71^Ot^k*!i6e$X^k>4LA=AsdE(W0^)#-A3h8sY&Y;i;7y3%2FUmq12X-aRQw9y
z+VT7H#(3pHyebfWQvm;D0Iv<;4FO#4TywLmR#es8UXSY-`TITmY+?Mkix<@Kml6CW
z1n<|xZGEKhadnes<&0U?a}gduXV%wvzXSBH<^(crM)~Avy_7yGDQ8v8oP2$6ppVKx
zvXJbj+z0tILy63tD{si3dv{}9<2@n)Ti9$0aC<<Y+j}npCBwkopuSfymUr{0R>{=n
zsf!xhygs<4zO}WvRWvr&wl(SA_+EJ*>4Mh!deKUKz_s9E`_4AS4&ml7jU!*^e@wyI
zsKdm&01Jvy=Frg<j1f5T1BgzjPT}(AK;V0nzd#W$z+~beAmbN=@gRN+A>ywk1bvsn
zk13qLSf>9RLc}ja9WO%s!oeO4p$rqBqu?6Af{)|oFoj1@rWsxdSa1<;B2#!b@nX=S
zjFazPK++u}J`Qao>UP0++?+;Oih8498zAY}7T9RCml8r>?F!!pSb)v*J%otQn+prj
z(eZ}Df=e+cM4Q0)Y%3T)j}Y<802yx%A>wTyM7*7Z6Hvd<b})V&Amg(wVf-dS#OE)1
z8e0aww>)7&$ppEzJb;^xwx59yruY?NA?777a}B(}TXUyHay@V093nU`)^iVS*+g3`
z+M+D-aqY>CI<Rnpc`vOW0VcH$B<FJezK7hq=9-qjUWjmQ?PHX*#ta!Tr`58VYbHpW
z+(YUkud$CzYmDh+wcdxUTyLTkqL8<KlQs?Ksx&z7GY!eCtn5-cr<E1zpYuHGJC)@*
z`*Kg;dQFCNHf^y4)lynzNtajB(zRNv;yi8**A~*`ZxnM!l}}PPt3l6o8=bEu!#Jl*
zZF#0WKrcWaN<-fUdhW5vbr_VNb6CbeFQO00GHyjw8BdW1bt=9S?cBHgJg#-tcCX;C
zXB974pzF0vWAL^6;X6H$j&jgbF6ts#d7c7#*2yWLTM4>kG?#&<4m2vv*XbKr<4UI^
zG{sU!14*N)yZ+LMVZJZ3xdvy}Q#9$ap6dMXPY<c;HTLQJ^*FXeD2s9*gX^o*+j*#K
zOkXm+eGf8l%^?$eu9-RBx+}{v_d&S-q2+bq$M5G6mU!joNmvXDBR{w=pN#jnK%b1q
zumBJ0Cl!w;13Y*RfpTyiS<6wS>OrcuWYqw8<fyuripRYH9@G)#pxj!HT|>S4OWBg?
zV?lrizeOIBm(uBK@Sqi@RBii>0Ulb8NroJi;K6+1`GaI~RHWb$F?fVjT2kc;y7Yv+
z)oG#JS|3lLe6a4NO3Ua0@?iN$#RJ2T1Ua-mq&!Ne6VV2wE2laSg8gMZ>eT`~x8u12
zkM8S}^*y@3XWvs{^gRRVKQQ!5Yw;}H+i%D{5iKw4sP3=O-lXM`&PsPWD})%1p^T42
z8~QVxXA4+eWPg&zT4*}H>Bd1Jm0qovbUHNqQ(9X~$JbWpN-)&VW<GJOVi{u<ZLN*|
z83F%ve6=-3OewNi{>bNGsdpBU@*!_Vq>Hb|1t&Yb`Wy|W8geWnkgmay$1(8i6G*4l
zAEp{UzZ}HJ6v)T><FCsrWnkZ+#}c|s>$YR#sp-c;zd^YqFC9Ob^*Hu>*=RdbjVpEy
zkViTz$uBA%x}TKoAN<VrryG3>tyiaN!`M&umzK4ve@c}W_LKebm;)Z^EE}?)?2ku2
zc(8v;B?tS-{&?&`-!dc(5B8J&@#p}Lbos)5vOgYG;4wIj9PB6i<1y$=jFr;xU_VJ7
z`Pg@Hu!sI?k9WR7mlw7dV-yYjP*>Bo6)fjEF7rUw8@4(9$!cLvo6d@Q7;><kve8bA
zgDjBkF??f%J}+3W&TRzyNys2L2Ccy}9}oM?RDI<{$c%BRw2I038s}(wz7|pY!>Q(L
zx}C)mf^2V6(dl*y>B-I++uIJKeI7AN>1-Sz&q%=UEy~3AGq7*(ou|S1Se(J*yq$Ae
z8*|}I-PT}FTKYjpoDb>tN4HySb2wf}HTJ?j$y)>ERgG~=I$q2#ElaZedQX+LWchW6
zkw<#%0(re}DD*&{dOVY^-wIlorv=%d)%R562FythNZmo7{Dx_nINi9RzwwCu0gOkC
zIw$At)KNOU=zdp^2T0$a)!9e;vA)W54@LQ;g<hw`?$&D$sH5IlCN(G5<&bAPGSak5
zy4?ttjo@68>qN=Q#X$2p^a15_=mW^-_dD)n{${JW_A2N-)m-~@<l(n5*Vf~`6Dc3d
zQ9l0O{M44Lwe@&`F};O$%rUHnm!ll%HcdmWA$%3zPnE9aNEg?=qQ-g<Z(B3tA46Z8
zDt;^C%YG+`74!Ea&!?0;`unCV%M2Nrt~qJsnx^DR)`q<wxv=al^^{Dm<pH^Nq$x+|
zDY=r(i{6i1=ucD1wIU!_aT>W&wJG-*eT^=IY*S2&<5&xm^H;91@hl(v-fbo5|4=^V
z_@iXGJbOd`PWq!y#ymup8$S-lMzk<ZnxzSGz4ns+bt>*072aRj#&}Gw<FP&Mglx&y
zQ&OcH{=!T<&y}LRmTPn7x>yBe!FM<ol;^zAMo=z(GgY0@^uhLf81|>`p}s#_=TlDl
zO~u$M!me)Oxs=`c@K6q0NYVw*rIbXm2L}BhUuAsKVH_pSRXFCQ(uKS|B87RhM6h0*
za4v;(ltVlHUIGuk6Vj2c$a|Il8OG-_1*Iqc6{q;_RD?k`Zfi<Mx`CWGnGd>KbR<A6
zA0dm0c5P5pgp+c3MDb8B5j@nB)(Kw4O8jK|Tbc=Q<CVd_GyVUb^CslO^CZK4&U~?O
ztCDHC#**P^UzM}u8K8}boDbo7euDJdb)f)Geq9D$s_;64K92=MI*-24z{zhS_C!7B
zg;yCk!;esb(s|*>44mQNQ&q5%C&$1Uz88Z&&w26RFmQ&?!GOXH=b0gmGrZcb4_^E^
z2F~!E2CgDX!1Edm?{&VSq*t<ABhgn%$2{P9i+LU@|1;T(1NbW7q}_yv^j`^tKLh+A
zo*gRu`+@L10eoKoe+M}8s~C$@<UhzLkd$XAaOT$rK!%S2Wd7u%QV^dEocXa^h0g}0
z{#UB-yMR;QJ>W(9hk#SRZ3_1{uxmyAqN%)f_vYz1^HHO(ZI)IZYhmJ%_7`F1@%HI6
z<%thv{ZZc3dt(!9RVMmRttyu{2K%Q&0tYIRUh!-4^v!H~$2*jXS01!5sc`4;LjMym
z1lxOv!@reNpUpt1e|Uo|JQI*o{_zzMo*VfyuezyE;uv^MO`~UQGZ3-7e3nmd@GHOZ
zD&HHYWaKw|)#@Y|^nJoA8W*?V^3lYIIER2dD;VXq)kSzO#bb}gSql0WdS|ZazZ7{)
zoMnc%v^ojA3uS`-Y$yq7DVlJVf}032XxmA6KFYQ7pBVD!<`E*iL*d&1$^Rg6yp&<V
zn*3HOxKqI#^!4<wQt(R(@`iHy7ohAD&QoxMf;^{2|47*T&RQ%y6Yo~A5Q8z|4GL~j
z@Th{NJZpmRB?@j=Q1Gk?{3{eZsvystFg<K9Z7g<Gqn?qjQ^CW43}<`E@YOscg77yK
z451z}T%H-h%O=!AhVKESe-RegslNsVw<*X*p8iz|u2Jx?f+eWG44(~1J|Wa!;zbHp
z0n(rCD9@y<RsK7aKZ|xtZR3gDf8ZTa8NeBp!}u<ofB(Thtk-!8K{Z8d+dC#<T{RuU
z=+4Iz#)GORT`Ia_gfdQvM<(k&^ISWI@wr$*?ay<FrqkcO3ZD38iw+~*B^m+LblA7_
zWn=K8cy8p2a+;11&5Q4r0BHxtaT(KxVwrTDb{ur5&c4(9d=K?v`u9IhGbN$?TDu;z
TzT*N)*X!gtP+e(of5`s@+6zgx

literal 0
HcmV?d00001

diff --git a/dvr_rdk/demos/link_api_demos/common/video_subsys/lib/libvideosubdev.a b/dvr_rdk/demos/link_api_demos/common/video_subsys/lib/libvideosubdev.a
new file mode 100755
index 0000000000000000000000000000000000000000..c51f507779c7056537fb08719727f644e8b5b1ae
GIT binary patch
literal 44294
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
X3(s1J?CZTFLQX2EBe<8uIwbu6iOxk*

literal 0
HcmV?d00001

diff --git a/dvr_rdk/mcfw/interfaces/common_def/ti_vdis_common_def.h b/dvr_rdk/mcfw/interfaces/common_def/ti_vdis_common_def.h
index 03dd9bd..c05e18f 100755
--- a/dvr_rdk/mcfw/interfaces/common_def/ti_vdis_common_def.h
+++ b/dvr_rdk/mcfw/interfaces/common_def/ti_vdis_common_def.h
@@ -211,6 +211,9 @@ typedef struct
          VDIS_VENC_DVO2,
          VDIS_VENC_SD */
 
+    UInt32           enableConfigExtGv7600;
+    /**< When FALSE do not configure GV7600 from M3 / McFW side */
+
     UInt32           enableConfigExtThsFilter;
     /**< When FALSE do not configure THS from M3 / McFW side */
 
diff --git a/dvr_rdk/mcfw/src_linux/devices/inc/device.h b/dvr_rdk/mcfw/src_linux/devices/inc/device.h
index f074c46..2b913c5 100755
--- a/dvr_rdk/mcfw/src_linux/devices/inc/device.h
+++ b/dvr_rdk/mcfw/src_linux/devices/inc/device.h
@@ -74,6 +74,12 @@
 /** \brief HDMI SII9022a video encoder driver ID used at the time of FVID2_create() */
 #define DEVICE_VID_ENC_SII9022A_DRV   (DEVICE_VID_ENC_DRV_BASE + 0x0000u)
 
+/** \brief HDMI THSFILTER video encoder driver ID used at the time of FVID2_create() */
+#define DEVICE_VID_ENC_THSFILTER_DRV   (DEVICE_VID_ENC_DRV_BASE + 0x0001u)
+
+/** \brief HDMI GV7600 video encoder driver ID used at the time of FVID2_create() */
+#define DEVICE_VID_ENC_GV7600_DRV   (DEVICE_VID_ENC_DRV_BASE + 0x0002u)
+
 
 #define DEVICE_CA_BOARD_A1_IO_EXP_I2C_ADDR (0x21u)
 
diff --git a/dvr_rdk/mcfw/src_linux/devices/sii9233a/src/sii9233a_api.c b/dvr_rdk/mcfw/src_linux/devices/sii9233a/src/sii9233a_api.c
index bebb62b..91086ef 100755
--- a/dvr_rdk/mcfw/src_linux/devices/sii9233a/src/sii9233a_api.c
+++ b/dvr_rdk/mcfw/src_linux/devices/sii9233a/src/sii9233a_api.c
@@ -130,7 +130,7 @@ Device_Handle Device_sii9233aCreate (UInt8 drvId,UInt8 instId,
         memcpy ( &pObj->createArgs, vidDecCreateArgs,
                  sizeof (*vidDecCreateArgs));
 
-        status = OSA_i2cOpen(&pObj->i2cHandle, vidDecCreateArgs->deviceI2cInstId + 1);
+        status = OSA_i2cOpen(&pObj->i2cHandle, vidDecCreateArgs->deviceI2cInstId);
 
         OSA_assert(status==0);
     }
diff --git a/dvr_rdk/mcfw/src_linux/devices/src/devices.c b/dvr_rdk/mcfw/src_linux/devices/src/devices.c
index b0360a3..ee97445 100755
--- a/dvr_rdk/mcfw/src_linux/devices/src/devices.c
+++ b/dvr_rdk/mcfw/src_linux/devices/src/devices.c
@@ -14,262 +14,6 @@ UInt32 Device_getVidDecI2cAddr(UInt32 vidDecId, UInt32 vipInstId)
 
    UInt32 devAddr = 0;
 
-#ifdef TI814X_DVR
-    #if 1
-    UInt32 devAddrTvp5158[DEVICE_CAPT_INST_MAX] = { 0x5b, 0x5a, 0x59, 0x58 };
-    #else
-    UInt32 devAddrTvp5158[DEVICE_CAPT_INST_MAX] = { 0x58, 0x59, 0x5a, 0x5b };
-    #endif
-
-    switch (vidDecId)
-    {
-        case DEVICE_VID_DEC_TVP5158_DRV:
-
-            devAddr = devAddrTvp5158[vipInstId];
-            break;
-
-        default:
-           break;
-
-    }
-#endif
-
-#ifdef TI816X_DVR
-   UInt32 devAddrTvp5158[DEVICE_CAPT_INST_MAX] = { 0x5c, 0x5d, 0x5e, 0x5f };
-   UInt32 devAddrTw2968[DEVICE_CAPT_INST_MAX]  = { 0x28, 0x28, 0x2b, 0x2b };
-   UInt32 devAddrSii9135[DEVICE_CAPT_INST_MAX] = { 0x31, 0x00, 0x30, 0x00 };
-   UInt32 devAddrTvp7002[DEVICE_CAPT_INST_MAX] = { 0x5d, 0x00, 0x5c, 0x00 };
-   UInt8 devAddrSii9022[2u]                    = { 0x39, 0x39 };
-
-   switch (vidDecId)
-   {
-       case DEVICE_VID_DEC_TVP5158_DRV:
-           devAddr = devAddrTvp5158[vipInstId];
-           break;
-
-       case DEVICE_VID_DEC_TW2968_DRV:
-           devAddr = devAddrTw2968[vipInstId];
-           break;
-
-       case DEVICE_VID_DEC_SII9135_DRV:
-           devAddr = devAddrSii9135[vipInstId];
-           break;
-
-       case DEVICE_VID_DEC_TVP7002_DRV:
-           devAddr = devAddrTvp7002[vipInstId];
-           break;
-
-        case DEVICE_VID_ENC_SII9022A_DRV:
-            devAddr = devAddrSii9022[0];
-            break;
-
-       default:
-           break;
-   }
-#endif
-
-#ifdef TI816X_EVM
-    UInt32 devAddrTvp5158[DEVICE_CAPT_INST_MAX] = { 0x58, 0x5c, 0x5a, 0x5e };
-    UInt32 devAddrSii9135[DEVICE_CAPT_INST_MAX] = { 0x31, 0x00, 0x30, 0x00 };
-    UInt32 devAddrTvp7002[DEVICE_CAPT_INST_MAX] = { 0x5d, 0x00, 0x5c, 0x00 };
-    UInt8 devAddrSii9022[2u]                    = { 0x39, 0x39 };
-
-    switch (vidDecId)
-    {
-        case DEVICE_VID_DEC_TVP5158_DRV:
-
-            devAddr = devAddrTvp5158[vipInstId];
-            break;
-
-        case DEVICE_VID_DEC_SII9135_DRV:
-            devAddr = devAddrSii9135[vipInstId];
-            break;
-
-        case DEVICE_VID_DEC_TVP7002_DRV:
-            devAddr = devAddrTvp7002[vipInstId];
-            break;
-
-        case DEVICE_VID_ENC_SII9022A_DRV:
-            devAddr = devAddrSii9022[0];
-            break;
-
-        default:
-           break;
-
-    }
-#endif
-
-#if defined(TI816X_CZ) || defined(TI8107_INS)
-    UInt32 devAddrSii9233A[DEVICE_CAPT_INST_MAX] = { 0x30, 0x00, 0x31, 0x00 };
-
-    switch (vidDecId)
-    {
-        case DEVICE_VID_DEC_SII9233A_DRV:
-            devAddr = devAddrSii9233A[0];
-            break;
-
-        default:
-           break;
-    }
-#endif
-
-#ifdef TI816X_ETVH
-    UInt32 devAddrSii9233A[DEVICE_CAPT_INST_MAX] = { 0x30, 0x00, 0x31, 0x00 };
-    UInt8  devAddrSii9022[2u]                    = { 0x39, 0x39 };
-
-    switch (vidDecId)
-    {
-        case DEVICE_VID_DEC_SII9233A_DRV:
-            devAddr = devAddrSii9233A[vipInstId];
-            break;
-
-        case DEVICE_VID_ENC_SII9022A_DRV:
-            devAddr = devAddrSii9022[0];
-            break;
-
-        default:
-           break;
-
-    }
-#endif
-
-#ifdef TI816X_ETVS
-    UInt8  devAddrSii9022[2u]                    = { 0x39, 0x39 };
-
-    switch (vidDecId)
-    {
-        case DEVICE_VID_ENC_SII9022A_DRV:
-            devAddr = devAddrSii9022[0];
-            break;
-
-        default:
-           break;
-    }
-#endif
-
-#ifdef TI816X_ES
-    UInt8  devAddrSii9022[2u]                    = { 0x39, 0x39 };
-
-    switch (vidDecId)
-    {
-        case DEVICE_VID_ENC_SII9022A_DRV:
-            devAddr = devAddrSii9022[0];
-            break;
-
-        default:
-           break;
-    }
-#endif
-
-#ifdef TI816X_BTJX
-    UInt8  devAddrSii9022[2u]                    = { 0x39, 0x39 };
-
-    switch (vidDecId)
-    {
-        case DEVICE_VID_ENC_SII9022A_DRV:
-            devAddr = devAddrSii9022[0];
-            break;
-
-        default:
-           break;
-    }
-#endif
-
-#ifdef TI816X_SBTJX
-    UInt8  devAddrSii9022[2u]                    = { 0x39, 0x39 };
-
-    switch (vidDecId)
-    {
-        case DEVICE_VID_ENC_SII9022A_DRV:
-            devAddr = devAddrSii9022[0];
-            break;
-
-        default:
-           break;
-    }
-#endif
-
-#ifdef TI816X_HJ
-    UInt8  devAddrSii9022[2u]                    = { 0x39, 0x39 };
-
-    switch (vidDecId)
-    {
-        case DEVICE_VID_ENC_SII9022A_DRV:
-            devAddr = devAddrSii9022[0];
-            break;
-
-        default:
-           break;
-    }
-#endif
-
-#ifdef TI816X_VCS
-    UInt8  devAddrSii9022[2u]                    = { 0x39, 0x39 };
-
-    switch (vidDecId)
-    {
-        case DEVICE_VID_ENC_SII9022A_DRV:
-            devAddr = devAddrSii9022[0];
-            break;
-
-        default:
-           break;
-    }
-#endif
-
-#ifdef TI816X_VRS
-    UInt8  devAddrSii9022[2u]                    = { 0x39, 0x39 };
-
-    switch (vidDecId)
-    {
-        case DEVICE_VID_ENC_SII9022A_DRV:
-            devAddr = devAddrSii9022[0];
-            break;
-
-        default:
-           break;
-    }
-#endif
-
-#if defined (TI814X_EVM) || defined (TI8107_EVM) || defined (TI8107_DVR)
-
-#if defined(TI8107_UD_DVR)
-    UInt32 devAddrTvp5158[DEVICE_CAPT_INST_MAX] = { 0x5c, 0x5d, 0x5e, 0x5f };
-#elif defined (TI8107_BCH_120_DVR)
-    UInt32 devAddrTvp5158[DEVICE_CAPT_INST_MAX] = { 0x58, 0x59, 0x5a, 0x5b };
-#else
-    UInt32 devAddrTvp5158[DEVICE_CAPT_INST_MAX] = { 0x58, 0x5c, 0x5a, 0x5e };
-#endif
-
-    //TODO
-    UInt32 devAddrSii9135[DEVICE_CAPT_INST_MAX] = { 0x00, 0x00, 0x30, 0x00 };
-    UInt32 devAddrTvp7002[DEVICE_CAPT_INST_MAX] = { 0x5d, 0x00, 0x00, 0x00 };
-    UInt8  devAddrSii9022[2u]                   = { 0x39, 0x39 };
-
-    switch (vidDecId)
-    {
-        case DEVICE_VID_DEC_TVP5158_DRV:
-
-            devAddr = devAddrTvp5158[vipInstId];
-            break;
-
-        case DEVICE_VID_DEC_SII9135_DRV:
-            devAddr = devAddrSii9135[vipInstId];
-            break;
-
-        case DEVICE_VID_DEC_TVP7002_DRV:
-            devAddr = devAddrTvp7002[vipInstId];
-            break;
-
-        case DEVICE_VID_ENC_SII9022A_DRV:
-            devAddr = devAddrSii9022[0];
-            break;
-        default:
-            break;
-    }
-
-
-#endif
    return (devAddr);
 
 }
diff --git a/dvr_rdk/mcfw/src_linux/devices/tvp5158/src/tvp5158_api.c b/dvr_rdk/mcfw/src_linux/devices/tvp5158/src/tvp5158_api.c
index 453b46c..65e31a1 100755
--- a/dvr_rdk/mcfw/src_linux/devices/tvp5158/src/tvp5158_api.c
+++ b/dvr_rdk/mcfw/src_linux/devices/tvp5158/src/tvp5158_api.c
@@ -157,7 +157,7 @@ Device_Handle Device_tvp5158Create ( UInt8 drvId,
         memcpy ( &pObj->createArgs, vidDecCreateArgs,
                  sizeof ( *vidDecCreateArgs ) );
 
-        status = OSA_i2cOpen(&pObj->i2cHandle, I2C_DEFAULT_INST_ID);
+        status = OSA_i2cOpen(&pObj->i2cHandle, vidDecCreateArgs->deviceI2cInstId);
 
         OSA_assert(status==0);
     }
diff --git a/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vcap.c b/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vcap.c
index 3501d10..bd3c1ee 100755
--- a/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vcap.c
+++ b/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vcap.c
@@ -55,48 +55,6 @@ VCAP_MODULE_CONTEXT_S gVcapModuleContext;
 
 Void Vcap_params_init(VCAP_PARAMS_S * pContext)
 {
-    UInt16 devId, chnId, strmId;
-
-    memset(pContext, 0, sizeof(VCAP_PARAMS_S));
-#if defined (TI816X_CZ) || defined(TI816X_ETVH) || defined(TI8107_INS) || defined(TI816X_VCS)
-    for(devId = 0; devId < VCAP_DEV_MAX; devId++)
-    {
-        pContext->deviceParams[devId].portEnable = TRUE;
-        pContext->deviceParams[devId].videoCaptureMode   = SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_EMBEDDED_SYNC;
-        pContext->deviceParams[devId].videoIfMode = SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
-        pContext->deviceParams[devId].inDataFormat = SYSTEM_DF_YUV422P;
-    }
-#endif
-#if defined (TI816X_ETVS) || defined(TI816X_ES) || defined(TI816X_BTJX) || defined(TI816X_SBTJX) || defined(TI816X_HJ) || defined(TI816X_VRS)
-    for(devId = 0; devId < VCAP_DEV_MAX; devId++)
-    {
-        pContext->deviceParams[devId].portEnable = TRUE;
-        pContext->deviceParams[devId].videoCaptureMode   = SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
-        pContext->deviceParams[devId].videoIfMode = SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
-        pContext->deviceParams[devId].inDataFormat = SYSTEM_DF_YUV422P;
-    }
-#endif
- 
-    for(chnId = 0; chnId < VCAP_CHN_MAX; chnId++)
-    {
-        for(strmId=0; strmId<VCAP_STRM_MAX; strmId++)
-        {
-            pContext->channelParams[chnId].strmEnable[strmId]             = FALSE;
-            pContext->channelParams[chnId].strmFormat[strmId]             = VF_YUV422I_UYVY;
-            pContext->channelParams[chnId].strmResolution[strmId].start_X = 0;
-            pContext->channelParams[chnId].strmResolution[strmId].start_Y = 0;
-            pContext->channelParams[chnId].strmResolution[strmId].width   = 0;
-            pContext->channelParams[chnId].strmResolution[strmId].height  = 0;
-        }
-        pContext->channelParams[chnId].deviceId                   = 0;
-        pContext->channelParams[chnId].dynamicParams.contrast     = 0;
-        pContext->channelParams[chnId].dynamicParams.satauration  = 0;
-        pContext->channelParams[chnId].dynamicParams.brightness   = 0;
-        pContext->channelParams[chnId].dynamicParams.hue          = 0;
-    }
-
-    pContext->enableConfigExtVideoDecoder = FALSE;
-
 
 }
 
@@ -1780,60 +1738,6 @@ Int32 Vcap_configVideoDecoder(VCAP_DEVICE_CREATE_PARAM_S * deviceCreatePrm, UInt
 {
     Int32 status = 0;
 
-#ifdef TI816X_ETVH
-    Int32 i = 0,vipInstId;
-    VCAP_PARAMS_S *vcapConfig;
-    VCAP_DEVICE_CREATE_PARAM_S vidDecVideoCreatePrm[2];
-    
-    numDevices = 2;
-    vcapConfig = &gVcapModuleContext.vcapConfig;
-    for( i = 0 ; i < numDevices ; i ++) {
-        vipInstId                                           = SYSTEM_CAPTURE_INST_VIP0_PORTA + 2*i;
-        vidDecVideoCreatePrm[i].deviceId                    = DEVICE_VID_DEC_SII9233A_DRV;
-        vidDecVideoCreatePrm[i].vipInstId                   = vipInstId;
-        vidDecVideoCreatePrm[i].numChInDevice               = 1;
-        vidDecVideoCreatePrm[i].modeParams.videoCaptureMode = vcapConfig->deviceParams[vipInstId].videoCaptureMode;
-        vidDecVideoCreatePrm[i].modeParams.videoIfMode      = vcapConfig->deviceParams[vipInstId].videoIfMode;
-        vidDecVideoCreatePrm[i].modeParams.videoDataFormat  = vcapConfig->deviceParams[vipInstId].inDataFormat;
-        vidDecVideoCreatePrm[i].modeParams.standard         = vcapConfig->deviceParams[vipInstId].standard;
-        vidDecVideoCreatePrm[i].modeParams.videoSystem      =
-                                DEVICE_VIDEO_DECODER_VIDEO_SYSTEM_AUTO_DETECT;
-        vidDecVideoCreatePrm[i].modeParams.videoCropEnable  = FALSE;
-        vidDecVideoCreatePrm[i].modeParams.videoAutoDetectTimeout = -1;
-    }
-
-    if(gVcapModuleContext.vcapConfig.enableConfigExtVideoDecoder)
-    {
-        Vcap_deviceCreate(vidDecVideoCreatePrm, numDevices);
-    }
-#endif
-#if defined(TI816X_CZ) || defined(TI8107_INS)
-    Int32 vipInstId;
-    VCAP_PARAMS_S *vcapConfig;
-    VCAP_DEVICE_CREATE_PARAM_S vidDecVideoCreatePrm;
-    
-    numDevices = 1;
-    vcapConfig = &gVcapModuleContext.vcapConfig;
-    
-    vipInstId                                        = SYSTEM_CAPTURE_INST_VIP0_PORTA;
-    vidDecVideoCreatePrm.deviceId                    = DEVICE_VID_DEC_SII9233A_DRV;
-    vidDecVideoCreatePrm.vipInstId                   = vipInstId;
-    vidDecVideoCreatePrm.numChInDevice               = 1;
-    vidDecVideoCreatePrm.modeParams.videoCaptureMode = vcapConfig->deviceParams[vipInstId].videoCaptureMode;
-    vidDecVideoCreatePrm.modeParams.videoIfMode      = vcapConfig->deviceParams[vipInstId].videoIfMode;
-    vidDecVideoCreatePrm.modeParams.videoDataFormat  = vcapConfig->deviceParams[vipInstId].inDataFormat;
-    vidDecVideoCreatePrm.modeParams.standard         = vcapConfig->deviceParams[vipInstId].standard;
-    vidDecVideoCreatePrm.modeParams.videoSystem      =
-                                DEVICE_VIDEO_DECODER_VIDEO_SYSTEM_AUTO_DETECT;
-    vidDecVideoCreatePrm.modeParams.videoCropEnable  = FALSE;
-    vidDecVideoCreatePrm.modeParams.videoAutoDetectTimeout = -1;
-
-    if(gVcapModuleContext.vcapConfig.enableConfigExtVideoDecoder)
-    {
-        Vcap_deviceCreate(&vidDecVideoCreatePrm, numDevices);
-    }
-#endif
-
     return status;
 }
 
diff --git a/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vcap_device.c b/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vcap_device.c
index f066117..d41523c 100755
--- a/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vcap_device.c
+++ b/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vcap_device.c
@@ -89,19 +89,11 @@ Int32 Vcap_deviceCreate(VCAP_DEVICE_CREATE_PARAM_S *pPrm, UInt32 numDevices)
     {
         memset(&createArgs, 0, sizeof(Device_VideoDecoderCreateParams));
 
-        #if defined (TI_814X_BUILD) || defined (TI_8107_BUILD)
-        createArgs.deviceI2cInstId    = 0;
-        #endif
-        #ifdef TI_816X_BUILD
-        createArgs.deviceI2cInstId    = 1;
-        #endif
-
         numCh += pPrm[devId].numChInDevice;
 
         createArgs.numDevicesAtPort   = 1;
-        createArgs.deviceI2cAddr[0]   = Device_getVidDecI2cAddr(
-                                                         pPrm[devId].deviceId,
-                                                         pPrm[devId].vipInstId);
+        createArgs.deviceI2cInstId    = pPrm[devId].i2cInstId;
+        createArgs.deviceI2cAddr[0]   = pPrm[devId].i2cAddr[0];
 
         createArgs.deviceResetGpio[0] = DEVICE_VIDEO_DECODER_GPIO_NONE;
 
diff --git a/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vcap_device_priv.h b/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vcap_device_priv.h
index a9178bc..5334db9 100755
--- a/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vcap_device_priv.h
+++ b/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vcap_device_priv.h
@@ -7,6 +7,8 @@
 
 typedef struct {
 
+    UInt32 i2cInstId;
+    UInt32 i2cAddr[2];
     UInt32 vipInstId;
     UInt32 deviceId;
     UInt32 numChInDevice;
diff --git a/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vdis.c b/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vdis.c
index 471db21..2ff8023 100755
--- a/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vdis.c
+++ b/dvr_rdk/mcfw/src_linux/mcfw_api/ti_vdis.c
@@ -155,13 +155,6 @@ Void Vdis_params_init(VDIS_PARAMS_S * pContext)
 
     /* Configure output Info for vencs */
 
-    pContext->tiedDevicesMask = VDIS_VENC_HDMI | VDIS_VENC_DVO2;
-    pContext->enableConfigExtVideoEncoder = TRUE;
-
-#if defined(TI814X_DVR) || defined(TI8107_UD_DVR) || defined(TI8107_BCH_120_DVR)
-    pContext->enableConfigExtVideoEncoder = FALSE;
-#endif
-
     pContext->deviceParams[VDIS_DEV_DVO2].enable = TRUE;
     pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.vencNodeNum = VDIS_VENC_DVO2;
     pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
@@ -178,90 +171,27 @@ Void Vdis_params_init(VDIS_PARAMS_S * pContext)
     pContext->deviceParams[VDIS_DEV_HDMI].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_EMBSYNC;
     pContext->deviceParams[VDIS_DEV_HDMI].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
 
-    pContext->deviceParams[VDIS_DEV_SD].enable = TRUE;
-    pContext->deviceParams[VDIS_DEV_SD].outputInfo.vencNodeNum = VDIS_VENC_SD;
-    pContext->deviceParams[VDIS_DEV_SD].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
-    pContext->deviceParams[VDIS_DEV_SD].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
-    pContext->deviceParams[VDIS_DEV_SD].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
-
-#if defined(TI_816X_BUILD) || defined (TI_8107_BUILD)
     pContext->deviceParams[VDIS_DEV_HDCOMP].enable = TRUE;
     pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.vencNodeNum = VDIS_VENC_HDCOMP;
     pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.aFmt = VDIS_A_OUTPUT_COMPONENT;
     pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_EMBSYNC;
-#if defined (TI_8107_BUILD)
-    pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
-#endif
-#if defined(TI816X_DVR) || defined(TI8107_DVR) || defined(TI8107_EVM) || defined(TI8107_INS)
-        pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
-#endif
-#if defined (TI816X_EVM)
-        pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_YUV444P;
-#endif
-#ifdef TI816X_CZ
-        pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_EMBSYNC;
-        pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_YUV422P;
-#endif
-#ifdef TI816X_ETVH
-        pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
-        pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
-        pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_YUV444P;
-        pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_EMBSYNC;
-#endif
-#ifdef TI816X_ETVS
-        pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
-        pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
-        pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_YUV444P;
-        pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_EMBSYNC;
-#endif
-#ifdef TI816X_ES
-        pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
-        pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
-        pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
-        pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
-#endif
-#ifdef TI816X_BTJX
-#if 0//sdi out
-		pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dvoFmt = VDIS_DVOFMT_DOUBLECHAN;
-		pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dataFormat = SYSTEM_DF_YUV422SP_UV;
-#else//dvi out
-		pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
-		pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
-#endif
-		pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
-		pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
-#endif
-#ifdef TI816X_SBTJX
-        pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
-        pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
-#endif
-#ifdef TI816X_VCS
-        pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
-        pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
-        pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_YUV444P;
-        pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_EMBSYNC;
-#endif
-#ifdef TI816X_VRS
-        pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
-        pContext->deviceParams[VDIS_DEV_DVO2].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
-        pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
-        pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
-#endif
-
-#endif
-
+    pContext->deviceParams[VDIS_DEV_HDCOMP].outputInfo.dataFormat = SYSTEM_DF_YUV444P;
 
-#if defined(TI816X_EVM) || defined(TI8107_EVM) || defined(TI8107_DVR)
-    pContext->enableConfigExtThsFilter = TRUE;
-#endif
-#if defined(TI816X_CZ) || defined(TI816X_ETVH) || defined(TI816X_ETVS) || defined(TI816X_ES) || defined(TI816X_BTJX) || defined(TI816X_SBTJX) || defined(TI816X_VCS) || defined(TI816X_VRS)
-    pContext->enableConfigExtVideoEncoder = TRUE;
-#endif
+    pContext->deviceParams[VDIS_DEV_SD].enable = TRUE;
+    pContext->deviceParams[VDIS_DEV_SD].outputInfo.vencNodeNum = VDIS_VENC_SD;
+    pContext->deviceParams[VDIS_DEV_SD].outputInfo.aFmt = VDIS_A_OUTPUT_COMPOSITE;
+    pContext->deviceParams[VDIS_DEV_SD].outputInfo.dvoFmt = VDIS_DVOFMT_TRIPLECHAN_DISCSYNC;
+    pContext->deviceParams[VDIS_DEV_SD].outputInfo.dataFormat = SYSTEM_DF_RGB24_888;
 
     /* By default, enable the HDMI moniter thread */
+    pContext->numUserChannels = 1;
+    pContext->numChannels = 2;
     pContext->enableHdmiControl = TRUE;
     pContext->enableEdgeEnhancement = TRUE;
-    pContext->enableLayoutGridDraw = FALSE;
+    pContext->enableLayoutGridDraw = TRUE;
+    pContext->enableConfigExtGv7600 = FALSE;
+    pContext->enableConfigExtThsFilter = FALSE;
+    pContext->enableConfigExtVideoEncoder = FALSE;
     pContext->tiedDevicesMask = VDIS_VENC_HDCOMP | VDIS_VENC_DVO2;
     pContext->deviceParams[SYSTEM_DC_VENC_HDMI].colorSpaceMode = VDIS_CSC_MODE_SDTV_VIDEO_Y2R;
 }
@@ -370,9 +300,7 @@ Void Vdis_configVideoEncoder(Void)
         /* Open HDMI Tx */
         
         encCreateParams.deviceI2cInstId = 1;
-        encCreateParams.deviceI2cAddr   = Device_getVidDecI2cAddr(
-                                                             DEVICE_VID_ENC_SII9022A_DRV,
-                                                             0);
+        encCreateParams.deviceI2cAddr   = 0x39;
         encCreateParams.inpClk = 0;
         encCreateParams.hdmiHotPlugGpioIntrLine = 0;
         
-- 
2.7.4


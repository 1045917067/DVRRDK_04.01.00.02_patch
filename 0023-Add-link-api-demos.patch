From 43d0e52c9f5a69d98d7ff92823f6bd1ad208605a Mon Sep 17 00:00:00 2001
From: zzx <xiaohou1045917067@163.com>
Date: Fri, 10 Jun 2016 18:15:23 +0800
Subject: [PATCH 23/42] Add link api demos.

---
 dvr_rdk/demos/MAKEFILE.MK                          |    4 +-
 dvr_rdk/demos/link_api_demos/MAKEFILE.MK           |    6 +-
 dvr_rdk/demos/link_api_demos/chains/MAKEFILE.MK    |    8 +
 .../demos/link_api_demos/chains/chains_CapDis.c    |  251 +++++
 .../link_api_demos/chains/chains_CapEncDecDis.c    |  380 +++++++
 .../link_api_demos/chains/chains_CapSwMsDis.c      |  235 ++++
 .../chains/chains_RecvFourDecSwMsDis.c             |  392 +++++++
 .../link_api_demos/chains/chains_RecvOneDecDis.c   |  346 ++++++
 .../chains/chains_SelCapNsfEncDecSwMsDis.c         |  338 ++++++
 .../link_api_demos/chains/chains_SelCapSelRecv.c   |  616 +++++++++++
 .../chains/chains_doubleChCapEncSend.c             |  352 ++++++
 .../chains/chains_doubleChRecvDecDis.c             |  271 +++++
 .../chains/chains_singleChCapOsdDis.c              |  361 +++++++
 dvr_rdk/demos/link_api_demos/common/MAKEFILE.MK    |    2 +-
 dvr_rdk/demos/link_api_demos/common/chains.h       |  108 +-
 .../demos/link_api_demos/common/chains_avsync.c    |  185 ++++
 .../demos/link_api_demos/common/chains_avsync.h    |   68 ++
 .../demos/link_api_demos/common/chains_common.c    |  188 ++++
 .../demos/link_api_demos/common/chains_common.h    |   32 +
 .../demos/link_api_demos/common/chains_ipcBits.c   |  751 +++++++++++--
 .../demos/link_api_demos/common/chains_ipcBits.h   |    0
 .../demos/link_api_demos/common/chains_ipcBuf.c    |    0
 .../demos/link_api_demos/common/chains_ipcBuf.h    |    0
 .../demos/link_api_demos/common/chains_ipcFrames.c |    2 +-
 .../demos/link_api_demos/common/chains_ipcFrames.h |    0
 dvr_rdk/demos/link_api_demos/common/chains_main.c  |  854 +++++++++++----
 dvr_rdk/demos/link_api_demos/common/chains_swMs.c  |   88 +-
 dvr_rdk/demos/link_api_demos/common/chains_swMs.h  |    0
 .../common/ti_swosd_logo_224x30_yuv422i.h          |  852 +++++++++++++++
 .../demos/link_api_demos/video_chains/MAKEFILE.MK  |    8 -
 .../video_chains/chains_encDecLoopBack.c           |  340 ------
 .../demos/link_api_demos/vpss_chains/MAKEFILE.MK   |    8 -
 .../vpss_chains/chains_multiChCaptureNsfDei.c      |  175 ---
 .../link_api_demos/vpss_video_chains/MAKEFILE.MK   |    8 -
 ...ns_multiChDucatiSystemUseCaseSwMs1_TriDisplay.c | 1122 --------------------
 ...ns_multiChDucatiSystemUseCaseSwMs2_TriDisplay.c |  490 ---------
 36 files changed, 6304 insertions(+), 2537 deletions(-)
 create mode 100755 dvr_rdk/demos/link_api_demos/chains/MAKEFILE.MK
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_CapDis.c
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_CapEncDecDis.c
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_CapSwMsDis.c
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_RecvFourDecSwMsDis.c
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_RecvOneDecDis.c
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_SelCapNsfEncDecSwMsDis.c
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_SelCapSelRecv.c
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_doubleChCapEncSend.c
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_doubleChRecvDecDis.c
 create mode 100644 dvr_rdk/demos/link_api_demos/chains/chains_singleChCapOsdDis.c
 mode change 100755 => 100644 dvr_rdk/demos/link_api_demos/common/chains.h
 create mode 100644 dvr_rdk/demos/link_api_demos/common/chains_avsync.c
 create mode 100644 dvr_rdk/demos/link_api_demos/common/chains_avsync.h
 create mode 100644 dvr_rdk/demos/link_api_demos/common/chains_common.c
 create mode 100644 dvr_rdk/demos/link_api_demos/common/chains_common.h
 mode change 100755 => 100644 dvr_rdk/demos/link_api_demos/common/chains_ipcBits.c
 mode change 100755 => 100644 dvr_rdk/demos/link_api_demos/common/chains_ipcBits.h
 mode change 100755 => 100644 dvr_rdk/demos/link_api_demos/common/chains_ipcBuf.c
 mode change 100755 => 100644 dvr_rdk/demos/link_api_demos/common/chains_ipcBuf.h
 mode change 100755 => 100644 dvr_rdk/demos/link_api_demos/common/chains_ipcFrames.c
 mode change 100755 => 100644 dvr_rdk/demos/link_api_demos/common/chains_ipcFrames.h
 mode change 100755 => 100644 dvr_rdk/demos/link_api_demos/common/chains_main.c
 mode change 100755 => 100644 dvr_rdk/demos/link_api_demos/common/chains_swMs.c
 mode change 100755 => 100644 dvr_rdk/demos/link_api_demos/common/chains_swMs.h
 create mode 100644 dvr_rdk/demos/link_api_demos/common/ti_swosd_logo_224x30_yuv422i.h
 delete mode 100755 dvr_rdk/demos/link_api_demos/video_chains/MAKEFILE.MK
 delete mode 100755 dvr_rdk/demos/link_api_demos/video_chains/chains_encDecLoopBack.c
 delete mode 100755 dvr_rdk/demos/link_api_demos/vpss_chains/MAKEFILE.MK
 delete mode 100755 dvr_rdk/demos/link_api_demos/vpss_chains/chains_multiChCaptureNsfDei.c
 delete mode 100755 dvr_rdk/demos/link_api_demos/vpss_video_chains/MAKEFILE.MK
 delete mode 100755 dvr_rdk/demos/link_api_demos/vpss_video_chains/chains_multiChDucatiSystemUseCaseSwMs1_TriDisplay.c
 delete mode 100755 dvr_rdk/demos/link_api_demos/vpss_video_chains/chains_multiChDucatiSystemUseCaseSwMs2_TriDisplay.c

diff --git a/dvr_rdk/demos/MAKEFILE.MK b/dvr_rdk/demos/MAKEFILE.MK
index 5d9c09a..cd40fe6 100755
--- a/dvr_rdk/demos/MAKEFILE.MK
+++ b/dvr_rdk/demos/MAKEFILE.MK
@@ -4,12 +4,12 @@ demo:
 
 libs:
 ifeq ($(PLATFORM),ti816x-evm)
-	$(MAKE) -fMAKEFILE.MK -C$(dvr_rdk_PATH)/demos/mcfw_api_demos $(TARGET)
+	$(MAKE) -fMAKEFILE.MK -C$(dvr_rdk_PATH)/demos/link_api_demos $(TARGET)
 ifeq ($(DEMOTYPE),link_api_sd_demo)
 	$(MAKE) -fMAKEFILE.MK -C$(dvr_rdk_PATH)/demos/link_api_sd_demo $(TARGET)
 endif
 else
-	$(MAKE) -fMAKEFILE.MK -C$(dvr_rdk_PATH)/demos/mcfw_api_demos $(TARGET)
+	$(MAKE) -fMAKEFILE.MK -C$(dvr_rdk_PATH)/demos/link_api_demos $(TARGET)
 endif
 
 clean:
diff --git a/dvr_rdk/demos/link_api_demos/MAKEFILE.MK b/dvr_rdk/demos/link_api_demos/MAKEFILE.MK
index ebc997a..f68c32f 100755
--- a/dvr_rdk/demos/link_api_demos/MAKEFILE.MK
+++ b/dvr_rdk/demos/link_api_demos/MAKEFILE.MK
@@ -5,12 +5,8 @@ demo:
 	$(MAKE) -fMAKEFILE.MK apps TARGET=exe
 
 libs:
-	$(MAKE) -fMAKEFILE.MK -C$(dvr_rdk_PATH)/demos/link_api_demos/vpss_chains MODULE=dvr_rdk_demo_link_api $(TARGET)
-	$(MAKE) -fMAKEFILE.MK -C$(dvr_rdk_PATH)/demos/link_api_demos/vpss_video_chains MODULE=dvr_rdk_demo_link_api $(TARGET)
-	$(MAKE) -fMAKEFILE.MK -C$(dvr_rdk_PATH)/demos/link_api_demos/video_chains MODULE=dvr_rdk_demo_link_api $(TARGET)
+	$(MAKE) -fMAKEFILE.MK -C$(dvr_rdk_PATH)/demos/link_api_demos/chains MODULE=dvr_rdk_demo_link_api $(TARGET)
 	$(MAKE) -fMAKEFILE.MK -C$(dvr_rdk_PATH)/demos/link_api_demos/common MODULE=dvr_rdk_demo_link_api $(TARGET)
-	$(MAKE) -fMAKEFILE.MK -C$(dvr_rdk_PATH)/demos/audio_sample MODULE=dvr_rdk_demo_link_api $(TARGET)
-	$(MAKE) -fMAKEFILE.MK -C$(dvr_rdk_PATH)/demos/graphic MODULE=dvr_rdk_demo_link_api $(TARGET)
 
 apps:
 	$(MAKE) -fMAKEFILE.MK -C$(dvr_rdk_PATH)/demos/link_api_demos/common MODULE=dvr_rdk_demo_link_api $(TARGET)
diff --git a/dvr_rdk/demos/link_api_demos/chains/MAKEFILE.MK b/dvr_rdk/demos/link_api_demos/chains/MAKEFILE.MK
new file mode 100755
index 0000000..6d1cd69
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/MAKEFILE.MK
@@ -0,0 +1,8 @@
+
+include $(dvr_rdk_PATH)/makerules/common_header_a8.mk
+
+INCLUDE+= $(MCFW_INC) $(OSA_INC) $(SYSLINK_INC) $(CODEC_INC) 
+
+include $(dvr_rdk_PATH)/makerules/common_footer_a8.mk
+
+
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_CapDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_CapDis.c
new file mode 100644
index 0000000..6048694
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_CapDis.c
@@ -0,0 +1,251 @@
+/** =====================================================================
+ * chains_CapDis.c
+ *
+ * Author	: zzx
+ * Date		: June 24, 2013
+ * Discription:	Cap + Dis
+ *	
+ *	capture->display 
+ *  =====================================================================
+ */
+
+/* -------------------- Include user headers   ------------------------ */
+
+#include <mcfw/interfaces/ti_vcap.h>
+#include <demos/link_api_demos/common/chains.h>
+
+Void Chains_CapDis(Chains_Ctrl *chainsCfg)
+{
+
+	CaptureLink_CreateParams	capturePrm;
+	CaptureLink_VipInstParams	*pCaptureInstPrm;
+	CaptureLink_OutParams		*pCaptureOutPrm;	
+	DisplayLink_CreateParams	displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+
+	Uint32 captureId,vipInstId;
+	Uint32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 i;
+
+	CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
+	for(i = 0; i < CHAINS_SW_MS_MAX_DISPLAYS; i++)
+	{
+		CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
+	}
+
+	captureId		= SYSTEM_LINK_ID_CAPTURE;
+	displayId[0] 	= SYSTEM_LINK_ID_DISPLAY_0;	
+	displayId[1] 	= SYSTEM_LINK_ID_DISPLAY_1;	
+	displayId[2] 	= SYSTEM_LINK_ID_DISPLAY_2;	
+
+
+	for(i = 0;i < gChains_ctrl.chRecNum; i++)
+	{
+		gChains_ctrl.chCfg[i + gChains_ctrl.chCapNum].channel = i;
+	}
+
+
+	/*
+	 * cap + dis
+	 */
+	VCAP_PARAMS_S  prm;
+	Vcap_params_init(&prm);
+	if(chainsCfg->chCapNum > 0)
+	{
+
+		capturePrm.numVipInst				= chainsCfg->chCapNum;
+		capturePrm.tilerEnable              = FALSE;
+		capturePrm.numBufsPerCh             = 16;
+		capturePrm.numExtraBufs             = 0;
+		capturePrm.maxBlindAreasPerCh       = 0;
+		capturePrm.isPalMode                = FALSE;
+		capturePrm.enableSdCrop             = FALSE;
+		capturePrm.doCropInCapture          = FALSE;
+
+		for(i = 0; i < capturePrm.numVipInst; i++)
+		{
+
+#if defined(TI816X_ETVH)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+#endif
+#if defined(TI816X_ETVS)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
+			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
+#endif
+#if defined(TI8107_INS)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+#endif
+
+			prm.channelParams[i].deviceId		= vipInstId;
+
+			prm.enableConfigExtVideoDecoder 	= TRUE;
+			prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
+
+			pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
+			pCaptureInstPrm->inScanFormat		= SYSTEM_SF_PROGRESSIVE;
+			pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
+			pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
+			pCaptureInstPrm->numOutput			= 1;
+			pCaptureInstPrm->numChPerOutput		= 1;
+			
+			pCaptureOutPrm						= &pCaptureInstPrm->outParams[0];
+			pCaptureOutPrm->dataFormat			= SYSTEM_DF_YUV422I_YUYV;
+			pCaptureOutPrm->scEnable			= FALSE;
+			pCaptureOutPrm->outQueId			= i;
+
+			
+			capturePrm.outQueParams[i].nextLink	= displayId[i];
+		}
+
+	}
+	/****************************************************************/
+
+	if(chainsCfg->chRecNum > 0)
+	{
+		for(i = chainsCfg->chCapNum;i < chainsCfg->chNum; i++)
+		{
+			chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
+		}
+
+		Chains_displayCtrlInit(chainsCfg->displayRes);
+
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			displayPrm[i].numInputQueues					= 1;
+			displayPrm[i].activeQueue						= 0;
+			displayPrm[i].inQueParams[0].prevLinkId			= captureId;
+			displayPrm[i].inQueParams[0].prevLinkQueId		= i;
+			displayPrm[i].displayRes						= chainsCfg->displayRes[i];
+			displayPrm[i].maxDriverQueLength           		= DISPLAY_LINK_MAX_DRIVER_QUEUE_LENGTH_DEFAULT;
+			displayPrm[i].displayId                    		= DISPLAY_LINK_DISPLAY_AUTO_SELECT;
+			displayPrm[i].forceFieldSeparatedInputMode		= FALSE;
+		}
+	}
+	/* Link create */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkCreate(captureId,&capturePrm,sizeof(capturePrm));
+	}
+
+	if(chainsCfg->chRecNum > 0)
+	{
+		for(i = 0; i< chainsCfg->chRecNum; i++)
+		{
+			System_linkCreate(displayId[i],&displayPrm[i],sizeof(displayPrm[i]));
+		}
+	}
+
+	/* link start */
+	if(chainsCfg->chRecNum > 0)
+	{
+		Vdis_start();
+		for(i = 0; i< chainsCfg->chRecNum; i++)
+		{
+			System_linkStart(displayId[i]);
+		}
+	}
+	if(chainsCfg->chCapNum > 0)
+	{
+		Vcap_init(&prm);
+		Vcap_start();
+		System_linkStart(captureId);
+	}
+
+	while(1)
+	{
+		char ch;
+		ch = Chains_menuRunTime();
+		if(ch=='0')
+			break;
+	
+		if(ch == '1') 
+		{
+			if(captureId!=SYSTEM_LINK_ID_INVALID)
+			{
+				System_linkControl(captureId,
+						CAPTURE_LINK_CMD_PRINT_ADV_STATISTICS,
+						NULL, 0, TRUE);
+			}
+
+
+			for(i=0; i<OSA_ARRAYSIZE(displayId); i++)
+			{
+				if(displayId[i]!=SYSTEM_LINK_ID_INVALID)
+				{
+					System_linkControl(displayId[i],
+							DISPLAY_LINK_CMD_PRINT_STATISTICS,
+							NULL, 0, TRUE);
+				}
+			}
+
+
+			OSA_waitMsecs(3000); // allow for print to complete
+
+			UInt32 gChains_enabledProcs[] = {
+				SYSTEM_LINK_ID_M3VPSS,
+				SYSTEM_LINK_ID_M3VIDEO,
+				SYSTEM_LINK_ID_DSP,
+			};
+
+			for(i=0; i<sizeof(gChains_enabledProcs)/sizeof(gChains_enabledProcs[0]); i++)
+			{
+				SystemCommon_PrintStatus printStatus;
+
+				memset(&printStatus, 0, sizeof(printStatus));
+
+				printStatus.printCpuLoad = TRUE;
+				printStatus.printTskLoad = TRUE;
+				System_linkControl(
+						gChains_enabledProcs[i],
+						SYSTEM_COMMON_CMD_PRINT_STATUS,
+						&printStatus,
+						sizeof(printStatus),
+						TRUE);
+				System_linkControl(
+						gChains_enabledProcs[i],
+						SYSTEM_COMMON_CMD_CPU_LOAD_CALC_RESET,
+						NULL,
+						0,
+						TRUE);
+
+			}
+		}
+	}
+
+
+
+	/* link stop */
+	if(chainsCfg->chCapNum > 0)
+	{
+		Vcap_stop();
+		System_linkStop(captureId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		Vdis_stop();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStop(displayId[i]);
+		}
+	}
+	/* link delete */	
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkDelete(captureId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkDelete(displayId[i]);
+		}
+
+		Chains_displayCtrlDeInit();
+	}
+
+}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_CapEncDecDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_CapEncDecDis.c
new file mode 100644
index 0000000..a80c3a5
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_CapEncDecDis.c
@@ -0,0 +1,380 @@
+/** ============================================================================
+ *
+ *  chains_CapEncDecDis.c
+ *
+ *  Author     : zzx
+ *
+ *  Date       : June 26, 2013
+ *
+ *  Description: 
+ *
+ *  Cap + Enc + Dec + Dis
+ *  ============================================================================
+ */
+
+/*  --------------------- Include user headers   ---------------------------- */
+
+#include <mcfw/interfaces/ti_vcap.h>
+#include <demos/link_api_demos/common/chains.h>
+
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
+{
+	.isPopulated = 1,
+	.ivaMap[0] =
+	{
+		.EncNumCh  = 1,
+		.EncChList = {0},
+		.DecNumCh  = 0,
+		.DecChList = {0},
+	},
+	.ivaMap[1] =
+	{
+		.EncNumCh  = 0,
+		.EncChList = {0},
+		.DecNumCh  = 1,
+		.DecChList = {0},
+	},
+	.ivaMap[2] =
+	{
+		.EncNumCh  = 1,
+		.EncChList = {1},
+		.DecNumCh  = 1,
+		.DecChList = {1},
+	},
+};
+
+
+Void Chains_CapEncDecDis(Chains_Ctrl *chainsCfg)
+{
+	CaptureLink_CreateParams	capturePrm;
+	CaptureLink_VipInstParams	*pCaptureInstPrm;
+	CaptureLink_OutParams		*pCaptureOutPrm;	
+	IpcLink_CreateParams		ipcOutVpssPrm;
+	IpcLink_CreateParams		ipcInVideoPrm;
+	EncLink_CreateParams		encPrm;
+
+	DecLink_CreateParams		decPrm;
+	IpcLink_CreateParams		ipcOutVideoPrm;
+	IpcLink_CreateParams		ipcInVpssPrm;
+	SwMsLink_CreateParams		swMsPrm;	
+	DisplayLink_CreateParams	displayPrm;	
+
+
+	Uint32 captureId,vipInstId;
+	Uint32 ipcOutVpssId;
+	Uint32 ipcInVideoId;
+	Uint32 encId;
+	Uint32 decId;
+	Uint32 ipcOutVideoId;
+	Uint32 ipcInVpssId;
+	Uint32 swMsId;
+	Uint32 displayId;
+
+	CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
+	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVpssPrm);
+	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVideoPrm);
+	CHAINS_INIT_STRUCT(EncLink_CreateParams,encPrm);
+
+
+	CHAINS_INIT_STRUCT(DecLink_CreateParams,decPrm);
+	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoPrm);
+	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssPrm);
+	CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm);
+	CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm);
+
+	captureId		= SYSTEM_LINK_ID_CAPTURE;
+	ipcOutVpssId 	= SYSTEM_VPSS_LINK_ID_IPC_OUT_M3_0;
+	ipcInVideoId	= SYSTEM_VIDEO_LINK_ID_IPC_IN_M3_0;
+	encId			= SYSTEM_LINK_ID_VENC_0;
+
+	decId			= SYSTEM_LINK_ID_VDEC_0;
+	ipcOutVideoId	= SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_0; 
+	ipcInVpssId		= SYSTEM_VPSS_LINK_ID_IPC_IN_M3_0;
+	swMsId			= SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
+	displayId		= SYSTEM_LINK_ID_DISPLAY_0;	
+
+	/****************************************************************/
+
+	int i;
+
+	for(i = 0;i < gChains_ctrl.chRecNum; i++)
+	{
+		gChains_ctrl.chCfg[i + gChains_ctrl.chCapNum].channel = i;
+	}
+
+	System_linkControl(
+			SYSTEM_LINK_ID_M3VIDEO,
+			SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
+			&systemVid_encDecIvaChMapTbl,
+			sizeof(SystemVideo_Ivahd2ChMap_Tbl),
+			TRUE
+			);
+
+
+	/*
+	 * cap + Enc + Dec + dis
+	 */
+	VCAP_PARAMS_S  prm;
+	Vcap_params_init(&prm);
+	if(chainsCfg->chCapNum > 0)
+	{
+		capturePrm.numVipInst					= chainsCfg->chCapNum;
+		capturePrm.tilerEnable              = FALSE;
+		capturePrm.numBufsPerCh             = 16;
+		capturePrm.numExtraBufs             = 0;
+		capturePrm.maxBlindAreasPerCh       = 0;
+		capturePrm.isPalMode                = FALSE;
+		capturePrm.enableSdCrop             = FALSE;
+		capturePrm.doCropInCapture          = FALSE;
+
+		int ch;
+
+		for(i = 0; i < capturePrm.numVipInst; i++)
+		{
+#if defined(TI816X_ETVH)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+#endif
+#if defined(TI816X_ETVS)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
+			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
+#endif
+#if defined(TI8107_INS)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+#endif
+		
+			prm.channelParams[i].deviceId		= vipInstId;
+			prm.enableConfigExtVideoDecoder 	= TRUE;
+			prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
+			
+			pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
+			pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
+			pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
+			pCaptureInstPrm->numOutput			= 1;
+			pCaptureInstPrm->numChPerOutput		= 1;
+
+			pCaptureOutPrm						= &pCaptureInstPrm->outParams[0];
+			pCaptureOutPrm->dataFormat			= SYSTEM_DF_YUV420SP_UV;
+			pCaptureOutPrm->scEnable			= FALSE;
+			pCaptureOutPrm->outQueId			= 0;
+
+		}
+		capturePrm.outQueParams[0].nextLink		= ipcOutVpssId;
+
+		/****************************************************************/
+
+		ipcOutVpssPrm.inQueParams.prevLinkId 		= captureId;
+		ipcOutVpssPrm.inQueParams.prevLinkQueId		= 0;
+		ipcOutVpssPrm.outQueParams[0].nextLink		= ipcInVideoId;
+		ipcOutVpssPrm.numOutQue						= 1;
+		ipcOutVpssPrm.notifyNextLink				= TRUE;
+		ipcOutVpssPrm.notifyPrevLink				= FALSE;
+		ipcOutVpssPrm.noNotifyMode					= FALSE;
+		ipcOutVpssPrm.numChPerOutQue[0]				= 0;
+		ipcOutVpssPrm.equallyDivideChAcrossOutQues	= FALSE;
+
+
+		ipcInVideoPrm.inQueParams.prevLinkId 		= ipcOutVpssId;
+		ipcInVideoPrm.inQueParams.prevLinkQueId		= 0;
+		ipcInVideoPrm.outQueParams[0].nextLink		= encId;
+		ipcInVideoPrm.numOutQue						= 1;
+		ipcInVideoPrm.notifyNextLink				= TRUE;
+		ipcInVideoPrm.notifyPrevLink				= FALSE;
+		ipcInVideoPrm.noNotifyMode					= FALSE;
+		ipcInVideoPrm.numChPerOutQue[0]				= 0;
+		ipcInVideoPrm.equallyDivideChAcrossOutQues	= FALSE;
+
+		for(i = 0; i< chainsCfg->chCapNum; i++)
+		{
+			encPrm.chCreateParams[i].format					= chainsCfg->chCfg[i].encFormat;
+			encPrm.chCreateParams[i].profile				= chainsCfg->chCfg[i].encProfile;
+			encPrm.chCreateParams[i].dataLayout				= IVIDEO_FIELD_SEPARATED;
+			encPrm.chCreateParams[i].encodingPreset 		= XDM_USER_DEFINED;
+			encPrm.chCreateParams[i].rateControlPreset		= IVIDEO_USER_DEFINED;
+			encPrm.chCreateParams[i].enableHighSpeed		= FALSE;
+			encPrm.chCreateParams[i].defaultDynamicParams.interFrameInterval  = 1;
+			encPrm.chCreateParams[i].defaultDynamicParams.intraFrameInterval  = chainsCfg->chCfg[i].intraFrameInterval;
+			encPrm.chCreateParams[i].defaultDynamicParams.inputFrameRate      = chainsCfg->chCfg[i].inFrameRate;
+			encPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate     = chainsCfg->chCfg[i].encFrameRate;
+			encPrm.chCreateParams[i].defaultDynamicParams.targetBitRate       = chainsCfg->chCfg[i].bitRate;
+			encPrm.chCreateParams[i].defaultDynamicParams.mvAccuracy          = IVIDENC2_MOTIONVECTOR_QUARTERPEL;
+			encPrm.chCreateParams[i].defaultDynamicParams.rcAlg               = chainsCfg->chCfg[i].rateCtrl;
+			encPrm.chCreateParams[i].defaultDynamicParams.qpMin               = 0;
+			encPrm.chCreateParams[i].defaultDynamicParams.qpMax               = 51;
+			encPrm.chCreateParams[i].defaultDynamicParams.qpInit              = -1;
+			encPrm.chCreateParams[i].defaultDynamicParams.vbrDuration         = 8;
+			encPrm.chCreateParams[i].defaultDynamicParams.vbrSensitivity      = 0;
+
+		}
+		encPrm.inQueParams.prevLinkId 				= ipcInVideoId;
+		encPrm.inQueParams.prevLinkQueId			= 0;
+		encPrm.outQueParams.nextLink				= decId;
+		encPrm.numBufPerCh[0]						= 0;
+	}
+	/****************************************************************/
+	if(chainsCfg->chRecNum > 0)
+	{
+	
+		for(i = chainsCfg->chCapNum; i < chainsCfg->chNum; i++)
+		{
+			chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
+		}
+
+		Chains_displayCtrlInit(chainsCfg->displayRes);
+
+		for (i=0; i<chainsCfg->chRecNum; i++) 
+		{
+			decPrm.chCreateParams[i].format                               = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
+			decPrm.chCreateParams[i].profile                              = IH264VDEC_PROFILE_ANY;
+			decPrm.chCreateParams[i].targetMaxWidth                       = chainsCfg->chCfg[i + chainsCfg->chCapNum].inWidth;
+			decPrm.chCreateParams[i].targetMaxHeight                      = chainsCfg->chCfg[i + chainsCfg->chCapNum].inHeight;
+			decPrm.chCreateParams[i].fieldMergeDecodeEnable               = FALSE;
+			decPrm.chCreateParams[i].algCreateStatus                      = DEC_LINK_ALG_CREATE_STATUS_CREATE;
+			decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFrameRate;
+			decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate   = chainsCfg->chCfg[i + chainsCfg->chCapNum].bitRate;
+			decPrm.chCreateParams[i].numBufPerCh                          = 0;
+			decPrm.chCreateParams[i].tilerEnable                          = TRUE;
+		}
+
+		decPrm.inQueParams.prevLinkId		= encId;
+		decPrm.inQueParams.prevLinkQueId	= 0;
+		decPrm.outQueParams.nextLink		= ipcOutVideoId;
+
+		ipcOutVideoPrm.inQueParams.prevLinkId		= decId;
+		ipcOutVideoPrm.inQueParams.prevLinkQueId	= 0;	
+		ipcOutVideoPrm.outQueParams[0].nextLink		= ipcInVpssId;;
+		ipcOutVideoPrm.numOutQue					= 1;
+		ipcOutVideoPrm.notifyNextLink				= TRUE;
+		ipcOutVideoPrm.notifyPrevLink				= FALSE;
+		ipcOutVideoPrm.noNotifyMode					= FALSE;
+
+
+		ipcInVpssPrm.inQueParams.prevLinkId			= ipcOutVideoId;
+		ipcInVpssPrm.inQueParams.prevLinkQueId		= 0;
+		ipcInVpssPrm.outQueParams[0].nextLink		= swMsId;
+		ipcInVpssPrm.numOutQue						= 1;
+		ipcInVpssPrm.notifyNextLink					= TRUE;
+		ipcInVpssPrm.notifyPrevLink					= FALSE;
+		ipcInVpssPrm.noNotifyMode					= FALSE;
+
+		swMsPrm.numSwMsInst               = 1;
+		swMsPrm.swMsInstId[0]             = SYSTEM_SW_MS_SC_INST_VIP1_SC;
+		swMsPrm.inQueParams.prevLinkId    = ipcInVpssId;
+		swMsPrm.inQueParams.prevLinkQueId = 0;
+		swMsPrm.outQueParams.nextLink     = displayId;
+		swMsPrm.lineSkipMode              = FALSE;
+		swMsPrm.enableLayoutGridDraw      = TRUE;
+		swMsPrm.layoutPrm.outputFPS       = chainsCfg->chCfg[0+chainsCfg->chCapNum].encFrameRate;
+		swMsPrm.maxInputQueLen            = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
+		swMsPrm.maxOutRes                 = chainsCfg->displayRes[0];
+		swMsPrm.numOutBuf                 = 0;
+		Chains_swMsGenerateLayoutParams(0, 2, &swMsPrm);
+
+		displayPrm.numInputQueues					= 1;
+		displayPrm.activeQueue						= 0;
+		displayPrm.inQueParams[0].prevLinkId		= swMsId;
+		displayPrm.inQueParams[0].prevLinkQueId		= 0;
+		displayPrm.displayRes						= chainsCfg->displayRes[0];
+		displayPrm.forceFieldSeparatedInputMode		= FALSE;
+	
+	}
+
+	/* Link create */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkCreate(captureId,&capturePrm,sizeof(capturePrm));
+		System_linkCreate(ipcOutVpssId,&ipcOutVpssPrm,sizeof(ipcOutVpssPrm));
+		System_linkCreate(ipcInVideoId,&ipcInVideoPrm,sizeof(ipcInVideoPrm));
+		System_linkCreate(encId,&encPrm,sizeof(encPrm));
+	}
+
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkCreate(decId,&decPrm,sizeof(decPrm));
+		System_linkCreate(ipcOutVideoId,&ipcOutVideoPrm,sizeof(ipcOutVideoPrm));
+		System_linkCreate(ipcInVpssId,&ipcInVpssPrm,sizeof(ipcInVpssPrm));
+		System_linkCreate(swMsId,&swMsPrm,sizeof(swMsPrm));
+		System_linkCreate(displayId,&displayPrm,sizeof(displayPrm));
+	
+	}
+
+	/* link start */
+	if(chainsCfg->chRecNum > 0)
+	{
+		Vdis_start();
+		System_linkStart(displayId);
+		System_linkStart(swMsId);
+		System_linkStart(ipcInVpssId);
+		System_linkStart(ipcOutVideoId);
+		System_linkStart(decId);
+	}
+	if(chainsCfg->chCapNum > 0)
+	{
+		Vcap_init(&prm);
+		Vcap_start();
+		System_linkStart(encId);
+		System_linkStart(ipcInVideoId);
+		System_linkStart(ipcOutVpssId);
+		System_linkStart(captureId);
+	}
+
+	while(1)
+	{
+		char ch;
+		ch = Chains_menuRunTime();
+		if(ch=='0')
+			break;
+	}
+
+	/* link stop */
+	if(chainsCfg->chCapNum > 0)
+	{
+		Vcap_stop();
+		System_linkStop(captureId);
+		System_linkStop(ipcOutVpssId);
+		System_linkStop(ipcInVideoId);
+		System_linkStop(encId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkStop(decId);
+		System_linkStop(ipcOutVideoId);
+		System_linkStop(ipcInVpssId);
+		System_linkStop(swMsId);
+		Vdis_stop();
+		System_linkStop(displayId);
+	}
+	/* link delete */	
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkDelete(captureId);
+		System_linkDelete(ipcOutVpssId);
+		System_linkDelete(ipcInVideoId);
+		System_linkDelete(encId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkDelete(decId);
+		System_linkDelete(ipcOutVideoId);
+		System_linkDelete(ipcInVpssId);
+		System_linkDelete(swMsId);
+		System_linkDelete(displayId);
+
+		Chains_displayCtrlDeInit();
+	}
+}
+
+
+#if defined(__cplusplus)
+}
+#endif
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_CapSwMsDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_CapSwMsDis.c
new file mode 100644
index 0000000..2f4cfa2
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_CapSwMsDis.c
@@ -0,0 +1,235 @@
+/** ============================================================================
+ *
+ *  chains_CapSwMsDis.c
+ *
+ *  Author     : zzx
+ *
+ *  Date       : June 25, 2013
+ *
+ *  Description:	Cap + SwMs + Dis
+ *
+ *  capture->swMs->display
+ *  ============================================================================
+ */
+
+/*  --------------------- Include user headers   ---------------------------- */
+
+#include <mcfw/interfaces/ti_vcap.h>
+#include <demos/link_api_demos/common/chains.h>
+
+Void Chains_CapSwMsDis(Chains_Ctrl *chainsCfg)
+{
+
+	CaptureLink_CreateParams	capturePrm;
+	CaptureLink_VipInstParams	*pCaptureInstPrm;
+	CaptureLink_OutParams       *pCaptureOutPrm;
+	DupLink_CreateParams                dupPrm;
+	SwMsLink_CreateParams		swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+	DisplayLink_CreateParams	displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+
+	Uint32 captureId,vipInstId;
+	UInt32 dupId;
+	Uint32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 i;
+
+	CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
+
+	for(i = 0; i < CHAINS_SW_MS_MAX_DISPLAYS; i++)
+	{
+		CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
+		CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
+
+	}
+	captureId 		= SYSTEM_LINK_ID_CAPTURE;
+	dupId           =SYSTEM_VPSS_LINK_ID_DUP_0;
+	swMsId[0] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
+	swMsId[1] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
+	swMsId[2] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_2;
+	displayId[0]	= SYSTEM_LINK_ID_DISPLAY_0;
+	displayId[1]	= SYSTEM_LINK_ID_DISPLAY_1;
+	displayId[2]	= SYSTEM_LINK_ID_DISPLAY_2;
+
+
+
+	for(i = 0; i < gChains_ctrl.chRecNum; i++)
+	{
+		gChains_ctrl.chCfg[i + gChains_ctrl.chCapNum].channel = i;
+
+	}
+
+	/* capture + swMs + display */
+
+	VCAP_PARAMS_S  prm;
+	Vcap_params_init(&prm);
+	if(chainsCfg->chCapNum > 0)
+	{
+		capturePrm.numVipInst 				= chainsCfg->chCapNum;
+		capturePrm.tilerEnable              = FALSE;
+		capturePrm.numBufsPerCh             = 16;
+		capturePrm.numExtraBufs             = 0;
+		capturePrm.maxBlindAreasPerCh       = 0;
+		capturePrm.isPalMode                = FALSE;
+		capturePrm.enableSdCrop             = FALSE;
+		capturePrm.doCropInCapture          = FALSE;
+
+		int ch;
+
+		for(i = 0; i< capturePrm.numVipInst; i++)
+		{
+			
+#if defined(TI816X_ETVH)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+#endif
+#if defined(TI816X_ETVS)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
+			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
+#endif
+#if defined(TI8107_INS)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+#endif
+
+			prm.channelParams[i].deviceId		= vipInstId;
+			prm.enableConfigExtVideoDecoder 	= TRUE;
+			prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
+
+			pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
+			pCaptureInstPrm->inScanFormat		= SYSTEM_SF_PROGRESSIVE;
+			pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
+			pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
+			pCaptureInstPrm->numOutput			= 1;
+
+			pCaptureOutPrm						= &pCaptureInstPrm->outParams[0];
+			pCaptureOutPrm->dataFormat			= SYSTEM_DF_YUV422I_YUYV;
+			pCaptureOutPrm->scEnable			= FALSE;
+			pCaptureOutPrm->outQueId			= 0;
+
+			capturePrm.outQueParams[0].nextLink	= dupId;
+		}
+	}
+	/*********************************************************************/
+	dupPrm.inQueParams.prevLinkId           = captureId;
+	dupPrm.inQueParams.prevLinkQueId        = 0;
+	dupPrm.numOutQue                        = chainsCfg->chRecNum;
+	dupPrm.outQueParams[0].nextLink         = swMsId[0];
+	dupPrm.outQueParams[1].nextLink         = swMsId[1];
+	dupPrm.notifyNextLink                   = TRUE;
+
+	if(chainsCfg->chRecNum > 0)
+	{
+
+		for(i = chainsCfg->chCapNum; i < chainsCfg->chNum; i++)
+		{
+			chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
+		}
+		
+		Chains_displayCtrlInit(chainsCfg->displayRes);
+
+		for(i = 0; i< chainsCfg->chRecNum; i++)
+		{
+			swMsPrm[i].numSwMsInst					= 1;
+			swMsPrm[i].swMsInstId[0]				= (0 == i)? SYSTEM_SW_MS_SC_INST_DEIHQ_SC_NO_DEI: SYSTEM_SW_MS_SC_INST_DEI_SC_NO_DEI;
+			swMsPrm[i].inQueParams.prevLinkId		= dupId;
+			swMsPrm[i].inQueParams.prevLinkQueId	= i;
+			swMsPrm[i].outQueParams.nextLink		= displayId[i];
+			swMsPrm[i].lineSkipMode					= FALSE;
+			swMsPrm[i].enableLayoutGridDraw			= TRUE;
+			swMsPrm[i].layoutPrm.outputFPS			= chainsCfg->chCfg[i + chainsCfg->chCapNum].outFrameRate;
+			swMsPrm[i].maxInputQueLen				= SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
+			swMsPrm[i].maxOutRes					= chainsCfg->displayRes[i];
+
+			Chains_swMsGenerateLayoutParams(i,1,&swMsPrm[i]);
+
+			displayPrm[i].numInputQueues				= 1;
+			displayPrm[i].activeQueue					= 0;
+			displayPrm[i].inQueParams[0].prevLinkId		= swMsId[i];
+			displayPrm[i].inQueParams[0].prevLinkQueId	= 0;
+			displayPrm[i].displayRes					= chainsCfg->displayRes[i];
+
+
+		}
+	}
+	/* links create */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkCreate(captureId, &capturePrm,sizeof(capturePrm));
+	}
+
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkCreate(dupId, &dupPrm, sizeof(dupPrm));
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkCreate(swMsId[i],&swMsPrm[i],sizeof(swMsPrm[i]));
+			System_linkCreate(displayId[i],&displayPrm[i],sizeof(displayPrm[i]));
+		}
+	}
+
+	/* links start */
+	if(chainsCfg->chRecNum > 0)
+	{
+		Vdis_start();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStart(displayId[i]);
+			System_linkStart(swMsId[i]);
+		}
+		System_linkStart(dupId);
+	}
+
+	if(chainsCfg->chCapNum > 0)
+	{
+		Vcap_init(&prm);
+		Vcap_start();
+		System_linkStart(captureId);
+	}
+
+	while(1)
+	{
+		char ch;
+		ch = Chains_menuRunTime();
+		if(ch=='0')
+			break;
+	}
+
+	
+	/* links stop */
+	if(chainsCfg->chCapNum > 0)
+	{
+		Vcap_stop();
+		System_linkStop(captureId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkStop(dupId);
+		Vdis_stop();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStop(swMsId[i]);
+			System_linkStop(displayId[i]);
+		}
+	}
+	/* links delete */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkDelete(captureId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		 System_linkDelete(dupId);
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkDelete(swMsId[i]);	
+			System_linkDelete(displayId[i]);	
+		}
+
+		Chains_displayCtrlDeInit();
+	}
+
+}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_RecvFourDecSwMsDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_RecvFourDecSwMsDis.c
new file mode 100644
index 0000000..0818286
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_RecvFourDecSwMsDis.c
@@ -0,0 +1,392 @@
+/** ============================================================================
+ *
+ *  chains_RecvFourDecSwMsDis.c
+ *
+ *  Author     : zzx
+ *
+ *  Date       : July 24, 2013
+ *
+ *  Description:
+ *  
+ *  ipcBitsOutHost->ipcBitsInVideo->
+ *  dec->ipcOutVideo->ipcInVpss->swMs->display  
+ *  ============================================================================
+ */
+
+/*  --------------------- Include system headers ---------------------------- */
+
+/*  --------------------- Include user headers   ---------------------------- */
+
+#include <mcfw/interfaces/ti_vcap.h>
+#include <demos/link_api_demos/common/chains.h>
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+/*
+ *  --------------------- Macro definition -------------------------------------
+ */
+
+/** ============================================================================
+ *  @Macro:         Macro name
+ *
+ *  @Description:   Description of this macro.
+ *  ============================================================================
+ */
+
+/*
+ *  --------------------- Structure definition ---------------------------------
+ */
+
+/** ----------------------------------------------------------------------------
+ *  @Name:          Structure name
+ *
+ *  @Description:   Description of the structure.
+ *
+ *  @Field:         Field1 member
+ *
+ *  @Field          Field2 member
+ *  ----------------------------------------------------------------------------
+ */
+
+/*
+ *  --------------------- Global variable definition ---------------------------
+ */
+
+/** ----------------------------------------------------------------------------
+ *  @Name:          systemVid_encDecIvaChMapTbl
+ *
+ *  @Description:   Data structure to assign the video channles to all 3 IVA-HDs.
+ * -----------------------------------------------------------------------------
+ */
+
+static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
+{
+	.isPopulated = 1,
+	.ivaMap[0] =
+	{
+		.EncNumCh  = 0,
+		.EncChList = {0},
+		.DecNumCh  = 2,
+		.DecChList = {0,1},
+	},
+	.ivaMap[1] =
+	{
+		.EncNumCh  = 0,
+		.EncChList = {0},
+		.DecNumCh  = 2,
+		.DecChList = {2,3},
+	},
+	.ivaMap[2] =
+	{
+		.EncNumCh  = 0,
+		.EncChList = {0},
+		.DecNumCh  = 2,
+		.DecChList = {4,5},
+	},
+};
+
+/*
+ *  --------------------- Public function definition ---------------------------
+ */
+
+Void Chains_RecvFourDecSwMsDis(Chains_Ctrl *chainsCfg)
+{
+
+	IpcBitsOutLinkHLOS_CreateParams  	ipcBitsOutHostPrm;
+	IpcBitsInLinkRTOS_CreateParams   	ipcBitsInVideoPrm;
+	DecLink_CreateParams              	decPrm;
+	IpcLink_CreateParams              	ipcOutVideoPrm;
+	IpcLink_CreateParams              	ipcInVpssPrm;
+	SwMsLink_CreateParams             	swMsPrm;
+	DisplayLink_CreateParams          	displayPrm;
+
+
+	UInt32 ipcBitsOutHostId;
+	UInt32 ipcBitsInVideoId;
+	UInt32 decId;
+	UInt32 ipcOutVideoId;
+	UInt32 ipcInVpssId;
+	UInt32 swMsId;
+	UInt32 displayId;
+
+	UInt32 i,j;
+
+	CHAINS_INIT_STRUCT(IpcBitsOutLinkHLOS_CreateParams,ipcBitsOutHostPrm);
+	CHAINS_INIT_STRUCT(IpcBitsInLinkRTOS_CreateParams,ipcBitsInVideoPrm);
+	CHAINS_INIT_STRUCT(DecLink_CreateParams,decPrm);
+	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoPrm);
+	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssPrm);
+	CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm);
+	CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm);
+
+	ipcBitsOutHostId    = SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0;
+	ipcBitsInVideoId    = SYSTEM_VIDEO_LINK_ID_IPC_BITS_IN_0;
+	decId               = SYSTEM_LINK_ID_VDEC_0;
+	ipcOutVideoId    	= SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_0;
+	ipcInVpssId      	= SYSTEM_VPSS_LINK_ID_IPC_IN_M3_0;
+	swMsId   	        = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
+	displayId			= SYSTEM_LINK_ID_DISPLAY_0;
+
+
+	Chains_ipcBitsInit();
+
+/* Update channel to IVAHD mapping */
+	System_linkControl(
+			SYSTEM_LINK_ID_M3VIDEO,
+			SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
+			&systemVid_encDecIvaChMapTbl,
+			sizeof(SystemVideo_Ivahd2ChMap_Tbl),
+			TRUE
+			);
+
+
+	for(i =0;i<gChains_ctrl.chRecNum;i++)
+	{
+		gChains_ctrl.chCfg[i+gChains_ctrl.chCapNum].channel = i;
+	}
+
+/* Recv + Dec + SwMs + Dis */
+	if(chainsCfg->chRecNum > 0)
+	{
+
+		for(i=chainsCfg->chCapNum; i<chainsCfg->chNum; i++)
+		{
+			chainsCfg->displayRes[i-chainsCfg->chCapNum] = chainsCfg->displayRes[i];
+		}
+
+		Chains_displayCtrlInit(chainsCfg->displayRes);
+
+		System_LinkQueInfo queInfo;
+		queInfo.numCh = chainsCfg->chRecNum;
+
+		for (i=0; i<queInfo.numCh; i++) 
+		{
+			queInfo.chInfo[i].bufType           = SYSTEM_BUF_TYPE_VIDBITSTREAM;
+			queInfo.chInfo[i].codingformat      = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
+			queInfo.chInfo[i].height            = chainsCfg->chCfg[i + chainsCfg->chCapNum].outHeight;
+			queInfo.chInfo[i].width             = chainsCfg->chCfg[i + chainsCfg->chCapNum].outWidth;
+			queInfo.chInfo[i].memType           = SYSTEM_MT_TILEDMEM;
+			queInfo.chInfo[i].dataFormat        = SYSTEM_DF_YUV420P;
+			queInfo.chInfo[i].scanFormat        = SYSTEM_SF_PROGRESSIVE;
+		}
+
+		ipcBitsOutHostPrm.baseCreateParams.numOutQue                    = 1;
+		ipcBitsOutHostPrm.baseCreateParams.numChPerOutQue[0]            = queInfo.numCh;
+		ipcBitsOutHostPrm.baseCreateParams.outQueParams[0].nextLink     = ipcBitsInVideoId;
+		Chains_ipcBitsInitCreateParams_BitsOutHLOS(&ipcBitsOutHostPrm, &queInfo);
+
+		ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkId       = ipcBitsOutHostId;
+		ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkQueId    = 0;
+		ipcBitsInVideoPrm.baseCreateParams.numOutQue                    = 1;
+		ipcBitsInVideoPrm.baseCreateParams.numChPerOutQue[0]            = queInfo.numCh;
+		ipcBitsInVideoPrm.baseCreateParams.outQueParams[0].nextLink     = decId;
+		Chains_ipcBitsInitCreateParams_BitsInRTOS(&ipcBitsInVideoPrm, TRUE);
+
+		for (i = 0; i < queInfo.numCh; i++)
+		{
+			decPrm.chCreateParams[i].format                               = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
+			decPrm.chCreateParams[i].profile                              = IH264VDEC_PROFILE_ANY;
+			decPrm.chCreateParams[i].targetMaxWidth                       = chainsCfg->chCfg[i+ chainsCfg->chCapNum].outWidth;
+			decPrm.chCreateParams[i].targetMaxHeight                      = chainsCfg->chCfg[i+ chainsCfg->chCapNum].outHeight;
+			decPrm.chCreateParams[i].fieldMergeDecodeEnable               = FALSE;
+			decPrm.chCreateParams[i].algCreateStatus                      = DEC_LINK_ALG_CREATE_STATUS_CREATE;
+			decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = chainsCfg->chCfg[i+ chainsCfg->chCapNum].encFrameRate;
+			decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate   = chainsCfg->chCfg[i+ chainsCfg->chCapNum].bitRate;
+			decPrm.chCreateParams[i].numBufPerCh                          = 0;
+			decPrm.chCreateParams[i].tilerEnable                          = TRUE;
+		}
+
+		decPrm.inQueParams.prevLinkId    = ipcBitsInVideoId;
+		decPrm.inQueParams.prevLinkQueId = 0;
+		decPrm.outQueParams.nextLink     = ipcOutVideoId;
+
+		ipcOutVideoPrm.inQueParams.prevLinkId    = decId;
+		ipcOutVideoPrm.inQueParams.prevLinkQueId = 0;
+		ipcOutVideoPrm.numOutQue                 = 1;
+		ipcOutVideoPrm.outQueParams[0].nextLink  = ipcInVpssId;
+		ipcOutVideoPrm.notifyNextLink            = TRUE;
+		ipcOutVideoPrm.notifyPrevLink            = FALSE;
+		ipcOutVideoPrm.noNotifyMode              = FALSE;
+
+		ipcInVpssPrm.inQueParams.prevLinkId      = ipcOutVideoId;
+		ipcInVpssPrm.inQueParams.prevLinkQueId   = 0;
+		ipcInVpssPrm.numOutQue                   = 1;
+		ipcInVpssPrm.outQueParams[0].nextLink    = swMsId;
+		ipcInVpssPrm.notifyNextLink              = TRUE;
+		ipcInVpssPrm.notifyPrevLink              = TRUE;
+		ipcInVpssPrm.noNotifyMode                = FALSE;
+
+		swMsPrm.numSwMsInst               = 1;
+		swMsPrm.swMsInstId[0]             = SYSTEM_SW_MS_SC_INST_VIP0_SC;
+		swMsPrm.inQueParams.prevLinkId    = ipcInVpssId;
+		swMsPrm.inQueParams.prevLinkQueId = 0;
+		swMsPrm.outQueParams.nextLink     = displayId;
+		swMsPrm.lineSkipMode              = FALSE;
+		swMsPrm.enableLayoutGridDraw      = TRUE;
+		swMsPrm.layoutPrm.outputFPS       = chainsCfg->chCfg[chainsCfg->chCapNum].outFrameRate;
+		swMsPrm.maxInputQueLen            = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
+		swMsPrm.maxOutRes                 = chainsCfg->displayRes[0];
+		swMsPrm.numOutBuf                 = 0;
+		swMsPrm.enableOuputDup            = FALSE;
+		swMsPrm.enableProcessTieWithDisplay = TRUE;
+
+		Chains_swMsGenerateLayoutParams(0, 1, &swMsPrm);
+
+		displayPrm.numInputQueues                = 1;
+		displayPrm.activeQueue                   = 0;
+		displayPrm.inQueParams[0].prevLinkId     = swMsId;
+		displayPrm.inQueParams[0].prevLinkQueId  = 0;
+		displayPrm.displayRes                    = chainsCfg->displayRes[0];
+		displayPrm.forceFieldSeparatedInputMode  = FALSE;
+
+	}
+
+	/*
+	 * Create Links
+	 */
+
+	if (chainsCfg->chRecNum > 0)
+	{
+		System_linkCreate(ipcBitsOutHostId,&ipcBitsOutHostPrm,sizeof(ipcBitsOutHostPrm));
+		System_linkCreate(ipcBitsInVideoId,&ipcBitsInVideoPrm,sizeof(ipcBitsInVideoPrm));
+		System_linkCreate(decId, &decPrm, sizeof(decPrm));
+		System_linkCreate(ipcOutVideoId, &ipcOutVideoPrm, sizeof(ipcOutVideoPrm));
+		System_linkCreate(ipcInVpssId, &ipcInVpssPrm, sizeof(ipcInVpssPrm));
+		System_linkCreate(swMsId, &swMsPrm, sizeof(swMsPrm));
+		System_linkCreate(displayId, &displayPrm, sizeof(displayPrm));
+	}
+
+	/*
+	 * Start Links
+	 */
+	if (chainsCfg->chRecNum > 0)
+	{
+
+		System_linkStart(displayId);
+		Vdis_start();
+		System_linkStart(swMsId);
+		System_linkStart(ipcInVpssId);
+		System_linkStart(ipcOutVideoId);
+		System_linkStart(decId);
+		System_linkStart(ipcBitsInVideoId);
+		System_linkStart(ipcBitsOutHostId);
+	}
+
+	while(1)
+	{
+		char ch;
+		ch = Chains_RecvFourDecSwMsDisMenu();
+		if(ch=='0')
+			break;
+
+		UInt32 swinId,dwinId,tmpwinId;
+		if(ch == '1') 
+		{
+
+			Chains_swMsGenerateLayoutParams(0, 1, &swMsPrm);
+			/* SWMS cmd to Switch layout from current one to a new layout */
+			System_linkControl(swMsId,
+					SYSTEM_SW_MS_LINK_CMD_SWITCH_LAYOUT , &swMsPrm.layoutPrm, sizeof(swMsPrm.layoutPrm) , TRUE);
+		}
+		if(ch == '2') 
+		{
+
+			Chains_swMsGenerateLayoutParams(0, 2, &swMsPrm);
+
+			/* SWMS cmd to Switch layout from current one to a new layout */
+			System_linkControl(swMsId,
+					SYSTEM_SW_MS_LINK_CMD_SWITCH_LAYOUT , &swMsPrm.layoutPrm, sizeof(swMsPrm.layoutPrm) , TRUE);
+		
+		}
+		if(ch == '3') 
+		{
+			Chains_swMsGenerateLayoutParams(0, 3, &swMsPrm);
+
+			/* SWMS cmd to Switch layout from current one to a new layout */
+			System_linkControl(swMsId,
+					SYSTEM_SW_MS_LINK_CMD_SWITCH_LAYOUT , &swMsPrm.layoutPrm, sizeof(swMsPrm.layoutPrm) , TRUE);
+		
+	
+		}
+		if(ch == '4') 
+		{
+
+			swinId	= Chains_getIntValue("Src Window Id : ", 0, chainsCfg->chRecNum - 1, 0);
+			dwinId  = Chains_getIntValue("Dest Window Id : ", 0, chainsCfg->chRecNum - 1, 0);
+
+			tmpwinId = swMsPrm.layoutPrm.winInfo[swinId].channelNum ;
+			swMsPrm.layoutPrm.winInfo[swinId].channelNum = swMsPrm.layoutPrm.winInfo[dwinId].channelNum ;
+			swMsPrm.layoutPrm.winInfo[dwinId].channelNum = tmpwinId;
+
+			/* SWMS cmd to Switch layout from current one to a new layout */
+			System_linkControl(swMsId,
+					SYSTEM_SW_MS_LINK_CMD_SWITCH_LAYOUT , &swMsPrm.layoutPrm, sizeof(swMsPrm.layoutPrm) , TRUE);
+		}
+		if(ch == '5') 
+		{
+			SwMsLink_WinInfo winInfo;
+			for(winInfo.winId = 0; winInfo.winId < 4;winInfo.winId++){
+				winInfo.startX	= 1920/2*(winInfo.winId%2);
+				winInfo.startY	= 1080/2*(winInfo.winId/2);
+				winInfo.width	= 1920/2;
+				winInfo.height	= 1080/2;
+
+
+				System_linkControl(swMsId,
+						SYSTEM_SW_MS_LINK_CMD_SET_CROP_PARAM , &winInfo, sizeof(winInfo) , TRUE);
+			}
+		}
+		if(ch == '6') 
+		{
+			SwMsLink_WinInfo winInfo;
+			winInfo.winId	= Chains_getIntValue("Window Id : ", 0, chainsCfg->chRecNum - 1, 0);
+			winInfo.startX	= Chains_getIntValue("startX : ", 0, 1920, 0);
+			winInfo.startY	= Chains_getIntValue("startY : ", 0, 1080, 0);
+			winInfo.width	= Chains_getIntValue("width : ", 0, 1920, 1920/2);
+			winInfo.height	= Chains_getIntValue("height : ", 0, 1080, 1080/2);
+
+
+			System_linkControl(swMsId,
+					SYSTEM_SW_MS_LINK_CMD_SET_CROP_PARAM , &winInfo, sizeof(winInfo) , TRUE);
+		}
+	}
+
+	Chains_ipcBitsStop();
+	/*
+	 * Stop Links
+	 */
+	if (chainsCfg->chRecNum > 0)
+	{
+		System_linkStop(ipcBitsOutHostId);
+		System_linkStop(ipcBitsInVideoId);
+		System_linkStop(decId);
+		System_linkStop(ipcOutVideoId);
+		System_linkStop(ipcInVpssId);
+		System_linkStop(swMsId);
+		Vdis_stop();
+		System_linkStop(displayId);
+	}
+	/*
+	 * Delete Links
+	 */
+	if (chainsCfg->chRecNum > 0) 
+	{
+		System_linkDelete(ipcBitsOutHostId);
+		System_linkDelete(ipcBitsInVideoId);
+		System_linkDelete(decId);
+		System_linkDelete(ipcOutVideoId);
+		System_linkDelete(ipcInVpssId);
+		System_linkDelete(swMsId);
+		System_linkDelete(displayId);
+
+		Chains_displayCtrlDeInit();
+	}
+
+	Chains_ipcBitsExit();
+}
+
+#if defined(__cplusplus)
+}
+#endif
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_RecvOneDecDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_RecvOneDecDis.c
new file mode 100644
index 0000000..6bd8cb0
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_RecvOneDecDis.c
@@ -0,0 +1,346 @@
+/** ============================================================================
+ *
+ *  chains_RecvOneSwMsDis.c
+ *
+ *  Author     : zzx
+ *
+ *  Date       : July 23, 2013
+ *
+ *  Description: ipcBitsOutHost->ipcBitsInVideo->
+ *  dec->ipcOutVideo->ipcInVpss->sel->swMs->display
+ *  ============================================================================
+ */
+
+/*  --------------------- Include system headers ---------------------------- */
+
+/*  --------------------- Include user headers   ---------------------------- */
+
+#include <mcfw/interfaces/ti_vcap.h>
+#include <demos/link_api_demos/common/chains.h>
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+/*
+ *  --------------------- Macro definition -------------------------------------
+ */
+
+/** ============================================================================
+ *  @Macro:         Macro name
+ *
+ *  @Description:   Description of this macro.
+ *  ============================================================================
+ */
+
+/*
+ *  --------------------- Structure definition ---------------------------------
+ */
+
+/** ----------------------------------------------------------------------------
+ *  @Name:          Structure name
+ *
+ *  @Description:   Description of the structure.
+ *
+ *  @Field:         Field1 member
+ *
+ *  @Field          Field2 member
+ *  ----------------------------------------------------------------------------
+ */
+
+/*
+ *  --------------------- Global variable definition ---------------------------
+ */
+
+/** ----------------------------------------------------------------------------
+ *  @Name:          systemVid_encDecIvaChMapTbl
+ *
+ *  @Description:   Data structure to assign the video channles to all 3 IVA-HDs.
+ * -----------------------------------------------------------------------------
+ */
+
+static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
+{
+	.isPopulated = 1,
+	.ivaMap[0] =
+	{
+		.EncNumCh  = 0,
+		.EncChList = {0},
+		.DecNumCh  = 2,
+		.DecChList = {0,1},
+	},
+	.ivaMap[1] =
+	{
+		.EncNumCh  = 0,
+		.EncChList = {0},
+		.DecNumCh  = 2,
+		.DecChList = {2,3},
+	},
+	.ivaMap[2] =
+	{
+		.EncNumCh  = 0,
+		.EncChList = {0},
+		.DecNumCh  = 3,
+		.DecChList = {4,5},
+	},
+};
+
+/*
+ *  --------------------- Public function definition ---------------------------
+ */
+
+Void Chains_RecvOneDecDis(Chains_Ctrl *chainsCfg)
+{
+
+	IpcBitsOutLinkHLOS_CreateParams  	ipcBitsOutHostPrm;
+	IpcBitsInLinkRTOS_CreateParams   	ipcBitsInVideoPrm;
+	DecLink_CreateParams              	decPrm;
+	IpcLink_CreateParams              	ipcOutVideoPrm;
+	IpcLink_CreateParams              	ipcInVpssPrm;
+	SelectLink_CreateParams           	selPrm;
+	SwMsLink_CreateParams             	swMsPrm;
+	DisplayLink_CreateParams          	displayPrm;
+
+	UInt32 ipcBitsOutHostId;
+	UInt32 ipcBitsInVideoId;
+	UInt32 decId;
+	UInt32 ipcOutVideoId;
+	UInt32 ipcInVpssId;
+	UInt32 selId;
+	UInt32 swMsId;
+	UInt32 displayId;
+
+	int i;
+
+	CHAINS_INIT_STRUCT(IpcBitsOutLinkHLOS_CreateParams,ipcBitsOutHostPrm);
+	CHAINS_INIT_STRUCT(IpcBitsInLinkRTOS_CreateParams,ipcBitsInVideoPrm);
+	CHAINS_INIT_STRUCT(DecLink_CreateParams,decPrm);
+	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoPrm);
+	CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssPrm);
+	CHAINS_INIT_STRUCT(SelectLink_CreateParams,selPrm);
+	CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm);
+	CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm);
+
+	ipcBitsOutHostId    = SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0;
+	ipcBitsInVideoId    = SYSTEM_VIDEO_LINK_ID_IPC_BITS_IN_0;
+	decId               = SYSTEM_LINK_ID_VDEC_0;
+	ipcOutVideoId    	= SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_0;
+	ipcInVpssId      	= SYSTEM_VPSS_LINK_ID_IPC_IN_M3_0;
+	selId               = SYSTEM_VPSS_LINK_ID_SELECT_0;
+	swMsId   	        = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
+	displayId			= SYSTEM_LINK_ID_DISPLAY_0;
+
+
+	Chains_ipcBitsInit();
+
+/* Update channel to IVAHD mapping */
+	System_linkControl(
+			SYSTEM_LINK_ID_M3VIDEO,
+			SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
+			&systemVid_encDecIvaChMapTbl,
+			sizeof(SystemVideo_Ivahd2ChMap_Tbl),
+			TRUE
+			);
+
+
+	for(i =0;i<gChains_ctrl.chRecNum;i++)
+	{
+		gChains_ctrl.chCfg[i+gChains_ctrl.chCapNum].channel = i;
+	}
+
+/* Recv + Dec + Sel + SwMs + Dis */
+	if(chainsCfg->chRecNum > 0)
+	{
+
+		for(i=chainsCfg->chCapNum; i<chainsCfg->chNum; i++)
+		{
+			chainsCfg->displayRes[i-chainsCfg->chCapNum] = chainsCfg->displayRes[i];
+		}
+
+		Chains_displayCtrlInit(chainsCfg->displayRes);
+
+		System_LinkQueInfo queInfo;
+		queInfo.numCh = chainsCfg->chRecNum;
+
+		for (i=0; i<queInfo.numCh; i++) 
+		{
+			queInfo.chInfo[i].bufType           = SYSTEM_BUF_TYPE_VIDBITSTREAM;
+			queInfo.chInfo[i].codingformat      = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
+			queInfo.chInfo[i].width             = chainsCfg->chCfg[i + chainsCfg->chCapNum].outWidth;
+			queInfo.chInfo[i].height            = chainsCfg->chCfg[i + chainsCfg->chCapNum].outHeight;
+			queInfo.chInfo[i].memType           = SYSTEM_MT_TILEDMEM;
+			queInfo.chInfo[i].dataFormat        = SYSTEM_DF_YUV420P;
+			queInfo.chInfo[i].scanFormat        = SYSTEM_SF_PROGRESSIVE;
+		}
+
+		ipcBitsOutHostPrm.baseCreateParams.numOutQue                    = 1;
+		ipcBitsOutHostPrm.baseCreateParams.numChPerOutQue[0]            = queInfo.numCh;
+		ipcBitsOutHostPrm.baseCreateParams.outQueParams[0].nextLink     = ipcBitsInVideoId;
+		Chains_ipcBitsInitCreateParams_BitsOutHLOS(&ipcBitsOutHostPrm, &queInfo);
+
+		ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkId       = ipcBitsOutHostId;
+		ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkQueId    = 0;
+		ipcBitsInVideoPrm.baseCreateParams.numOutQue                    = 1;
+		ipcBitsInVideoPrm.baseCreateParams.numChPerOutQue[0]            = queInfo.numCh;
+		ipcBitsInVideoPrm.baseCreateParams.outQueParams[0].nextLink     = decId;
+		Chains_ipcBitsInitCreateParams_BitsInRTOS(&ipcBitsInVideoPrm, TRUE);
+
+
+		for (i = 0; i < queInfo.numCh; i++)
+		{
+			decPrm.chCreateParams[i].format                               = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
+			decPrm.chCreateParams[i].profile                              = IH264VDEC_PROFILE_ANY;
+			decPrm.chCreateParams[i].targetMaxWidth                       = chainsCfg->chCfg[i+ chainsCfg->chCapNum].outWidth;
+			decPrm.chCreateParams[i].targetMaxHeight                      = chainsCfg->chCfg[i+ chainsCfg->chCapNum].outHeight;
+			decPrm.chCreateParams[i].fieldMergeDecodeEnable               = FALSE;
+			decPrm.chCreateParams[i].algCreateStatus                      = DEC_LINK_ALG_CREATE_STATUS_CREATE;
+			decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = chainsCfg->chCfg[i+ chainsCfg->chCapNum].encFrameRate;
+			decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate   = chainsCfg->chCfg[i+ chainsCfg->chCapNum].bitRate;
+			decPrm.chCreateParams[i].numBufPerCh                          = 0;
+			decPrm.chCreateParams[i].tilerEnable                          = TRUE;
+		}
+
+		decPrm.inQueParams.prevLinkId    = ipcBitsInVideoId;
+		decPrm.inQueParams.prevLinkQueId = 0;
+		decPrm.outQueParams.nextLink     = ipcOutVideoId;
+
+		ipcOutVideoPrm.inQueParams.prevLinkId    = decId;
+		ipcOutVideoPrm.inQueParams.prevLinkQueId = 0;
+		ipcOutVideoPrm.numOutQue                 = 1;
+		ipcOutVideoPrm.outQueParams[0].nextLink  = ipcInVpssId;
+		ipcOutVideoPrm.notifyNextLink            = TRUE;
+		ipcOutVideoPrm.notifyPrevLink            = FALSE;
+		ipcOutVideoPrm.noNotifyMode              = FALSE;
+
+		ipcInVpssPrm.inQueParams.prevLinkId      = ipcOutVideoId;
+		ipcInVpssPrm.inQueParams.prevLinkQueId   = 0;
+		ipcInVpssPrm.numOutQue                   = 1;
+		ipcInVpssPrm.outQueParams[0].nextLink    = selId;
+		ipcInVpssPrm.notifyNextLink              = TRUE;
+		ipcInVpssPrm.notifyPrevLink              = TRUE;
+		ipcInVpssPrm.noNotifyMode                = FALSE;
+
+		selPrm.inQueParams.prevLinkId      		 = ipcInVpssId;
+		selPrm.inQueParams.prevLinkQueId   		 = 0;
+		selPrm.numOutQue                   		 = 1;
+
+		selPrm.outQueParams[0].nextLink    		 = swMsId;
+		selPrm.outQueChInfo[0].outQueId    		 = 0;
+		selPrm.outQueChInfo[0].numOutCh    		 = 1;
+		selPrm.outQueChInfo[0].inChNum[0]  		 = 0;
+
+		swMsPrm.numSwMsInst              		 = 1;
+		swMsPrm.swMsInstId[0]            		 = SYSTEM_SW_MS_SC_INST_VIP1_SC;
+		swMsPrm.inQueParams.prevLinkId   		 = selId;
+		swMsPrm.inQueParams.prevLinkQueId		 = 0;
+		swMsPrm.outQueParams.nextLink    		 = displayId;
+		swMsPrm.lineSkipMode             		 = FALSE;
+		swMsPrm.enableLayoutGridDraw     		 = TRUE;
+		swMsPrm.layoutPrm.outputFPS      		 = chainsCfg->chCfg[chainsCfg->chCapNum].outFrameRate;
+		swMsPrm.maxInputQueLen           		 = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
+		swMsPrm.maxOutRes                		 = chainsCfg->displayRes[0];
+		swMsPrm.numOutBuf                		 = 0;
+
+		Chains_swMsGenerateLayoutParams(0, 2, &swMsPrm);
+
+		displayPrm.numInputQueues                = 1;
+		displayPrm.activeQueue                   = 0;
+		displayPrm.inQueParams[0].prevLinkId     = swMsId;
+		displayPrm.inQueParams[0].prevLinkQueId  = 0;
+		displayPrm.displayRes                    = chainsCfg->displayRes[0];
+		displayPrm.forceFieldSeparatedInputMode  = FALSE;
+
+	}
+	/*
+	 * Create Links
+	 */
+	if (chainsCfg->chRecNum > 0)
+	{
+		System_linkCreate(ipcBitsOutHostId,&ipcBitsOutHostPrm,sizeof(ipcBitsOutHostPrm));
+		System_linkCreate(ipcBitsInVideoId,&ipcBitsInVideoPrm,sizeof(ipcBitsInVideoPrm));
+		System_linkCreate(decId, &decPrm, sizeof(decPrm));
+		System_linkCreate(ipcOutVideoId, &ipcOutVideoPrm, sizeof(ipcOutVideoPrm));
+		System_linkCreate(ipcInVpssId, &ipcInVpssPrm, sizeof(ipcInVpssPrm));
+		System_linkCreate(selId, &selPrm, sizeof(selPrm));
+		System_linkCreate(swMsId, &swMsPrm, sizeof(swMsPrm));
+		System_linkCreate(displayId, &displayPrm, sizeof(displayPrm));
+	}
+
+	/*
+	 * Start Links
+	 */
+	if (chainsCfg->chRecNum > 0)
+	{
+
+		Vdis_start();
+		System_linkStart(displayId);
+		System_linkStart(swMsId);
+		System_linkStart(selId);
+		System_linkStart(ipcInVpssId);
+		System_linkStart(ipcOutVideoId);
+		System_linkStart(decId);
+		System_linkStart(ipcBitsInVideoId);
+		System_linkStart(ipcBitsOutHostId);
+	}
+
+	while(1)
+	{
+		char ch;
+		int chId;
+		ch = Chains_RecvOneDecDisMenu();
+		if(ch=='0')
+			break;
+
+		if(ch == '1') 
+		{
+
+			chId   = Chains_getIntValue("Channel Id : ", 0, chainsCfg->chRecNum - 1, 0);
+
+			selPrm.outQueChInfo[0].inChNum[0] = chId;
+
+			/* Dynamically change channels mapped to a output que */
+			System_linkControl(selId,
+					SELECT_LINK_CMD_SET_OUT_QUE_CH_INFO , &selPrm.outQueChInfo[0],sizeof(selPrm.outQueChInfo[0]) , TRUE);
+		}
+
+	}
+
+	Chains_ipcBitsStop();
+	/*
+	 * Stop Links
+	 */
+	if (chainsCfg->chRecNum > 0)
+	{
+		System_linkStop(ipcBitsOutHostId);
+		System_linkStop(ipcBitsInVideoId);
+		System_linkStop(decId);
+		System_linkStop(ipcOutVideoId);
+		System_linkStop(ipcInVpssId);
+		System_linkStop(selId);
+		System_linkStop(swMsId);
+		Vdis_stop();
+		System_linkStop(displayId);
+	}
+
+	/*
+	 * Delete Links
+	 */
+	if (chainsCfg->chRecNum > 0) {
+		System_linkDelete(ipcBitsOutHostId);
+		System_linkDelete(ipcBitsInVideoId);
+		System_linkDelete(decId);
+		System_linkDelete(ipcOutVideoId);
+		System_linkDelete(ipcInVpssId);
+		System_linkDelete(selId);
+		System_linkDelete(swMsId);
+		System_linkDelete(displayId);
+
+		Chains_displayCtrlDeInit();
+	}
+
+	Chains_ipcBitsExit();
+}
+
+#if defined(__cplusplus)
+}
+#endif
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_SelCapNsfEncDecSwMsDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_SelCapNsfEncDecSwMsDis.c
new file mode 100644
index 0000000..4673887
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_SelCapNsfEncDecSwMsDis.c
@@ -0,0 +1,338 @@
+/** ============================================================================
+ *
+ *  Chains_SelCapNsfEncDecSwMsDis.c
+ *
+ *  Author     : zzx
+ *
+ *  Date       : July 21, 2014
+ *
+ *  Description:	Cap + Enc + Dec + SwMs + Display
+ *
+ *			|-vipInst0->|
+ *	capture-|   		|->nsf->enc->dec->swMs0->display0
+ *			|-vipInst1->|
+ *
+ *
+ *  ============================================================================
+ */
+
+
+#include <demos/link_api_demos/common/chains.h>
+#include <mcfw/interfaces/ti_vcap.h>
+
+static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
+{
+    .isPopulated = 1,
+    .ivaMap[0] =
+    {
+        .EncNumCh  = 10,
+        .EncChList = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0 , 0, 0},
+        .DecNumCh  = 0,
+        .DecChList = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
+    },
+    .ivaMap[1] =
+    {
+        .EncNumCh  = 0,
+        .EncChList = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31},
+        .DecNumCh  = 12,
+        .DecChList = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0 , 0, 0},
+    },
+    .ivaMap[2] =
+    {
+        .EncNumCh  = 6,
+        .EncChList = {10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
+        .DecNumCh  = 4,
+        .DecChList = {12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
+    },
+};
+
+Void Chains_SelCapNsfEncDecSwMsDis(Chains_Ctrl *chainsCfg)
+{
+    CaptureLink_CreateParams    capturePrm;
+    CaptureLink_VipInstParams   *pCaptureInstPrm;
+    CaptureLink_OutParams       *pCaptureOutPrm;
+    NsfLink_CreateParams        nsfPrm;
+    SwMsLink_CreateParams       swMsPrm;
+    DisplayLink_CreateParams    displayPrm;
+    EncLink_CreateParams        encPrm;
+    DecLink_CreateParams        decPrm;
+    IpcLink_CreateParams        ipcOutVpssPrm;
+    IpcLink_CreateParams        ipcInVpssPrm;
+    IpcLink_CreateParams        ipcOutVideoPrm;
+    IpcLink_CreateParams        ipcInVideoPrm;
+
+    UInt32 captureId, displayId;
+    UInt32 nsfId, swMsId;
+    UInt32 vipInstId;
+    UInt32 encId, decId;
+    UInt32 ipcOutVpssId, ipcInVpssId;
+    UInt32 ipcOutVideoId, ipcInVideoId;
+
+	int i;
+
+    CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
+    CHAINS_INIT_STRUCT(NsfLink_CreateParams,nsfPrm);
+    CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm);
+    CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm);
+    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVpssPrm);
+    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssPrm);
+    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoPrm);
+    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVideoPrm);
+    CHAINS_INIT_STRUCT(EncLink_CreateParams,encPrm);
+    CHAINS_INIT_STRUCT(DecLink_CreateParams,decPrm);
+
+    captureId = SYSTEM_LINK_ID_CAPTURE;
+    nsfId     = SYSTEM_LINK_ID_NSF_0;
+    swMsId    = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
+    displayId = SYSTEM_LINK_ID_DISPLAY_0;
+
+    encId        = SYSTEM_LINK_ID_VENC_0;
+    decId        = SYSTEM_LINK_ID_VDEC_0;
+
+    ipcOutVpssId = SYSTEM_VPSS_LINK_ID_IPC_OUT_M3_0;
+    ipcInVideoId = SYSTEM_VIDEO_LINK_ID_IPC_IN_M3_0;
+    ipcOutVideoId= SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_0;
+    ipcInVpssId  = SYSTEM_VPSS_LINK_ID_IPC_IN_M3_0;
+
+
+	for(i =0;i<gChains_ctrl.chRecNum;i++)
+	{
+		gChains_ctrl.chCfg[i+gChains_ctrl.chCapNum].channel = i;
+	}
+
+	System_linkControl(
+			SYSTEM_LINK_ID_M3VIDEO,
+			SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
+			&systemVid_encDecIvaChMapTbl,
+			sizeof(SystemVideo_Ivahd2ChMap_Tbl),
+			TRUE
+			);
+
+	VCAP_PARAMS_S  prm;
+	Vcap_params_init(&prm);
+	capturePrm.numVipInst 				= chainsCfg->chCapNum;
+	capturePrm.tilerEnable              = FALSE;
+	capturePrm.numBufsPerCh             = CAPTURE_LINK_NUM_BUFS_PER_CH_DEFAULT;
+	capturePrm.numExtraBufs             = 0;
+	capturePrm.maxBlindAreasPerCh       = 0;
+	capturePrm.isPalMode                = FALSE;
+	capturePrm.enableSdCrop             = FALSE;
+	capturePrm.doCropInCapture          = FALSE;
+
+    for(i=0; i<capturePrm.numVipInst; i++)
+    {
+
+#if defined(TI816X_ETVH)
+		vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+		pCaptureInstPrm						= &capturePrm.vipInst[i];
+		pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+#endif
+#if defined(TI816X_ETVS)
+		vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
+		pCaptureInstPrm						= &capturePrm.vipInst[i];
+		pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
+		pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
+#endif
+#if defined(TI8107_INS)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+#endif
+
+
+		prm.channelParams[i].deviceId = vipInstId;
+		prm.enableConfigExtVideoDecoder = TRUE;
+		prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
+
+		pCaptureInstPrm->vipInstId          = vipInstId%SYSTEM_CAPTURE_INST_MAX;
+		pCaptureInstPrm->inDataFormat       = SYSTEM_DF_YUV422P;
+		pCaptureInstPrm->standard           = chainsCfg->chCfg[i].inStd;
+		pCaptureInstPrm->numOutput          = 1;
+		pCaptureInstPrm->numChPerOutput     = 1;
+
+		pCaptureOutPrm                      = &pCaptureInstPrm->outParams[0];
+        pCaptureOutPrm->dataFormat          = SYSTEM_DF_YUV422I_YUYV;
+        pCaptureOutPrm->scEnable            = FALSE;
+        pCaptureOutPrm->outQueId            = 0;
+    }
+    capturePrm.outQueParams[0].nextLink = nsfId;
+
+    nsfPrm.inQueParams.prevLinkId    = captureId;
+    nsfPrm.inQueParams.prevLinkQueId = 0;
+    nsfPrm.bypassNsf                 = FALSE;
+    nsfPrm.tilerEnable               = TRUE;
+    nsfPrm.numOutQue                 = 1;
+    nsfPrm.outQueParams[0].nextLink  = ipcOutVpssId;
+    nsfPrm.numBufsPerCh              = 0;
+
+    ipcOutVpssPrm.inQueParams.prevLinkId    = nsfId;
+    ipcOutVpssPrm.inQueParams.prevLinkQueId = 0;
+    ipcOutVpssPrm.numOutQue                 = 1;
+    ipcOutVpssPrm.numChPerOutQue[0]         = 1;
+    ipcOutVpssPrm.outQueParams[0].nextLink  = ipcInVideoId;
+    ipcOutVpssPrm.notifyNextLink            = TRUE;
+    ipcOutVpssPrm.notifyPrevLink            = FALSE;
+    ipcOutVpssPrm.noNotifyMode              = FALSE;
+    ipcOutVpssPrm.numChPerOutQue[0]         = 0;
+    ipcOutVpssPrm.equallyDivideChAcrossOutQues = FALSE;
+
+    ipcInVideoPrm.inQueParams.prevLinkId    = ipcOutVpssId;
+    ipcInVideoPrm.inQueParams.prevLinkQueId = 0;
+    ipcInVideoPrm.numOutQue                 = 1;
+    ipcInVideoPrm.numChPerOutQue[0]         = 1;
+    ipcInVideoPrm.outQueParams[0].nextLink  = encId;
+    ipcInVideoPrm.notifyNextLink            = TRUE;
+    ipcInVideoPrm.notifyPrevLink            = FALSE;
+    ipcInVideoPrm.noNotifyMode              = FALSE;
+    ipcInVideoPrm.numChPerOutQue[0]         = 0;
+    ipcInVideoPrm.equallyDivideChAcrossOutQues = FALSE;
+
+    for (i=0; i<chainsCfg->chCapNum; i++) {
+        encPrm.chCreateParams[i].format                             = chainsCfg->chCfg[i].encFormat;
+        encPrm.chCreateParams[i].profile                            = chainsCfg->chCfg[i].encProfile;
+        encPrm.chCreateParams[i].dataLayout                         = IVIDEO_FIELD_SEPARATED;
+        encPrm.chCreateParams[i].fieldMergeEncodeEnable             = FALSE;
+        encPrm.chCreateParams[i].enableAnalyticinfo                 = FALSE;
+        encPrm.chCreateParams[i].enableWaterMarking                 = FALSE;
+        encPrm.chCreateParams[i].encodingPreset                     = XDM_USER_DEFINED;
+        encPrm.chCreateParams[i].rateControlPreset                  = IVIDEO_USER_DEFINED;
+        encPrm.chCreateParams[i].enableHighSpeed                    = FALSE;
+        encPrm.chCreateParams[i].defaultDynamicParams.interFrameInterval  = 1;
+        encPrm.chCreateParams[i].defaultDynamicParams.intraFrameInterval  = chainsCfg->chCfg[i].intraFrameInterval;
+        encPrm.chCreateParams[i].defaultDynamicParams.inputFrameRate      = chainsCfg->chCfg[i].inFrameRate;
+        encPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate     = chainsCfg->chCfg[i].encFrameRate;
+        encPrm.chCreateParams[i].defaultDynamicParams.targetBitRate       = chainsCfg->chCfg[i].bitRate;
+        encPrm.chCreateParams[i].defaultDynamicParams.mvAccuracy          = IVIDENC2_MOTIONVECTOR_QUARTERPEL;
+        encPrm.chCreateParams[i].defaultDynamicParams.rcAlg               = chainsCfg->chCfg[i].rateCtrl;
+        encPrm.chCreateParams[i].defaultDynamicParams.qpMin               = 0;
+        encPrm.chCreateParams[i].defaultDynamicParams.qpMax               = 51;
+        encPrm.chCreateParams[i].defaultDynamicParams.qpInit              = -1;
+        encPrm.chCreateParams[i].defaultDynamicParams.vbrDuration         = 8;
+        encPrm.chCreateParams[i].defaultDynamicParams.vbrSensitivity      = 0;
+	}
+	encPrm.inQueParams.prevLinkId   = ipcInVideoId;
+	encPrm.inQueParams.prevLinkQueId= 0;
+	encPrm.outQueParams.nextLink    = decId;
+	encPrm.numBufPerCh[0]           = 0;
+
+	for(i=chainsCfg->chCapNum; i<chainsCfg->chNum; i++)
+	{
+		chainsCfg->displayRes[i-chainsCfg->chCapNum] = chainsCfg->displayRes[i];
+	}
+
+	Chains_displayCtrlInit(chainsCfg->displayRes);
+
+
+	for (i=0; i<chainsCfg->chRecNum; i++) {
+		decPrm.chCreateParams[i].format                               = chainsCfg->chCfg[i].encFormat;
+		decPrm.chCreateParams[i].profile                              = IH264VDEC_PROFILE_ANY;
+		decPrm.chCreateParams[i].targetMaxWidth                       = chainsCfg->chCfg[i].inWidth;
+		decPrm.chCreateParams[i].targetMaxHeight                      = chainsCfg->chCfg[i].inHeight;
+		decPrm.chCreateParams[i].fieldMergeDecodeEnable               = TRUE;
+		decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = chainsCfg->chCfg[i].encFrameRate;
+		decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate   = chainsCfg->chCfg[i].bitRate;
+		decPrm.chCreateParams[i].numBufPerCh                          = 0;
+	}
+	decPrm.inQueParams.prevLinkId    = encId;
+	decPrm.inQueParams.prevLinkQueId = 0;
+    decPrm.outQueParams.nextLink     = ipcOutVideoId;
+
+    ipcOutVideoPrm.inQueParams.prevLinkId    = decId;
+    ipcOutVideoPrm.inQueParams.prevLinkQueId = 0;
+    ipcOutVideoPrm.numOutQue                 = 1;
+    ipcOutVideoPrm.outQueParams[0].nextLink  = ipcInVpssId;
+    ipcOutVideoPrm.notifyNextLink            = TRUE;
+    ipcOutVideoPrm.notifyPrevLink            = FALSE;
+    ipcOutVideoPrm.noNotifyMode              = FALSE;
+    ipcOutVideoPrm.numChPerOutQue[0]         = 0;
+    ipcOutVideoPrm.equallyDivideChAcrossOutQues = FALSE;
+
+    ipcInVpssPrm.inQueParams.prevLinkId    = ipcOutVideoId;
+    ipcInVpssPrm.inQueParams.prevLinkQueId = 0;
+    ipcInVpssPrm.numOutQue                 = 1;
+    ipcInVpssPrm.outQueParams[0].nextLink  = swMsId;
+    ipcInVpssPrm.notifyNextLink            = TRUE;
+    ipcInVpssPrm.notifyPrevLink            = FALSE;
+    ipcInVpssPrm.noNotifyMode              = FALSE;
+    ipcInVpssPrm.equallyDivideChAcrossOutQues = FALSE;
+    ipcInVpssPrm.numChPerOutQue[0]         = 0;
+
+    swMsPrm.numSwMsInst               = 1;
+    swMsPrm.swMsInstId[0]             = SYSTEM_SW_MS_SC_INST_SC5;
+    swMsPrm.inQueParams.prevLinkId    = ipcInVpssId;
+    swMsPrm.inQueParams.prevLinkQueId = 0;
+    swMsPrm.outQueParams.nextLink     = displayId;
+    swMsPrm.lineSkipMode              = FALSE;
+    swMsPrm.enableLayoutGridDraw      = TRUE;
+    swMsPrm.layoutPrm.outputFPS       = chainsCfg->chCfg[0].outFrameRate;
+    swMsPrm.maxInputQueLen            = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
+    swMsPrm.maxOutRes                 = chainsCfg->displayRes[0];
+    swMsPrm.numOutBuf                 = 0;
+
+    Chains_swMsGenerateLayoutParams(0, 1, &swMsPrm);
+
+	displayPrm.numInputQueues                = 1;
+	displayPrm.activeQueue                   = 0;
+	displayPrm.inQueParams[0].prevLinkId    = swMsId;
+	displayPrm.inQueParams[0].prevLinkQueId = 0;
+	displayPrm.displayRes                   = chainsCfg->displayRes[0];
+	displayPrm.displayId                    	= DISPLAY_LINK_DISPLAY_AUTO_SELECT;
+
+	System_linkCreate(captureId, &capturePrm, sizeof(capturePrm));
+	System_linkCreate(nsfId, &nsfPrm, sizeof(nsfPrm));
+	System_linkCreate(ipcOutVpssId, &ipcOutVpssPrm, sizeof(ipcOutVpssPrm));
+	System_linkCreate(ipcInVideoId, &ipcInVideoPrm, sizeof(ipcInVideoPrm));
+	System_linkCreate(encId, &encPrm, sizeof(encPrm));
+
+	System_linkCreate(decId, &decPrm, sizeof(decPrm));
+	System_linkCreate(ipcOutVideoId, &ipcOutVideoPrm, sizeof(ipcOutVideoPrm));
+	System_linkCreate(ipcInVpssId, &ipcInVpssPrm, sizeof(ipcInVpssPrm));
+	System_linkCreate(swMsId, &swMsPrm, sizeof(swMsPrm));
+	System_linkCreate(displayId, &displayPrm, sizeof(displayPrm));
+
+
+	System_linkStart(displayId);
+	Vdis_start();
+	System_linkStart(swMsId);
+	System_linkStart(decId);
+	System_linkStart(encId);
+	System_linkStart(nsfId);
+	System_linkStart(captureId);
+	Vcap_init(&prm);
+	Vcap_start();
+
+
+	while(1)
+	{
+		char ch;
+		ch = Chains_menuRunTime();
+		if(ch=='0')
+			break;
+		if(ch=='v')
+			System_linkControl(captureId, CAPTURE_LINK_CMD_FORCE_RESET, NULL, 0, TRUE);
+		if(ch=='p')
+			System_linkControl(captureId, CAPTURE_LINK_CMD_PRINT_ADV_STATISTICS, NULL, 0, TRUE);
+	}
+
+	System_linkStop(captureId);
+	Vcap_stop();
+	System_linkStop(nsfId);
+	System_linkStop(encId);
+	System_linkStop(decId);
+	System_linkStop(swMsId);
+	System_linkStop(displayId);
+	Vdis_stop();
+
+    System_linkDelete(captureId);
+    System_linkDelete(nsfId);
+    System_linkDelete(ipcOutVpssId);
+    System_linkDelete(ipcInVideoId);
+    System_linkDelete(encId);
+    System_linkDelete(decId);
+    System_linkDelete(ipcOutVideoId);
+    System_linkDelete(ipcInVpssId);
+    System_linkDelete(swMsId);
+    System_linkDelete(displayId);
+
+    Chains_displayCtrlDeInit();
+}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_SelCapSelRecv.c b/dvr_rdk/demos/link_api_demos/chains/chains_SelCapSelRecv.c
new file mode 100644
index 0000000..4c12dee
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_SelCapSelRecv.c
@@ -0,0 +1,616 @@
+/** ============================================================================
+ *
+ *  Chains_SelCapSelRecv.c
+ *
+ *  Author     : zzx
+ *
+ *  Date       : July 21, 2014
+ *
+ *  Description:	Cap + Enc + Send
+ *  				Net + Dec + Display
+ *			|-vipInst0->|
+ *	capture-|   		|->dup->enc->send
+ *			|-vipInst1->|
+ *
+ *					  |->swms0->display0
+ *	receive->dec->sel-|
+ *					  |->swms1->display1
+ *  ============================================================================
+ */
+
+
+#include <demos/link_api_demos/common/chains.h>
+#include <mcfw/interfaces/ti_vcap.h>
+
+static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
+{
+    .isPopulated = 1,
+    .ivaMap[0] =
+    {
+        .EncNumCh  = 1,
+        .EncChList = {0},
+        .DecNumCh  = 0,
+        .DecChList = {0},
+    },
+    .ivaMap[1] =
+    {
+        .EncNumCh  = 0,
+        .EncChList = {0},
+        .DecNumCh  = 1,
+        .DecChList = {0},
+    },
+    .ivaMap[2] =
+    {
+        .EncNumCh  = 1,
+        .EncChList = {1},
+        .DecNumCh  = 1,
+        .DecChList = {1},
+    },
+};
+
+Void Chains_SelCapSelRecv(Chains_Ctrl *chainsCfg)
+{
+
+	 CaptureLink_CreateParams            capturePrm;
+	 CaptureLink_VipInstParams           *pCaptureInstPrm;
+	 CaptureLink_OutParams               *pCaptureOutPrm;
+	 NsfLink_CreateParams				 nsfPrm;
+	 DupLink_CreateParams                dupPrm;
+	 IpcLink_CreateParams                ipcOutVpssPrm;
+	 IpcLink_CreateParams                ipcInVideoPrm;
+	 EncLink_CreateParams                encPrm;
+	 IpcBitsOutLinkRTOS_CreateParams     ipcBitsOutVideoPrm;
+	 IpcBitsInLinkHLOS_CreateParams      ipcBitsInHostPrm;
+
+	 UInt32 captureId, vipInstId;
+	 UInt32 nsfId,dupId;
+	 UInt32 ipcOutVpssId;
+	 UInt32 ipcInVideoId;
+	 UInt32 encId;
+	 UInt32 ipcBitsOutVideoId;
+	 UInt32 ipcBitsInHostId;
+
+	 IpcBitsOutLinkHLOS_CreateParams   ipcBitsOutHostPrm;
+	 IpcBitsInLinkRTOS_CreateParams    ipcBitsInVideoPrm;
+	 DecLink_CreateParams              decPrm;
+	 IpcLink_CreateParams              ipcOutVideoEncPrm;
+	 IpcLink_CreateParams              ipcInVpssEncPrm;
+     SelectLink_CreateParams           selPrm;
+	 SwMsLink_CreateParams             swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+	 DisplayLink_CreateParams          displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+
+	 UInt32 ipcBitsOutHostId;
+	 UInt32 ipcBitsInVideoId;
+	 UInt32 decId;
+	 UInt32 ipcOutVideoEncId;
+	 UInt32 ipcInVpssEncId;
+     UInt32 selId;
+	 UInt32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
+	 UInt32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
+
+	 int i;
+
+	 for(i =0;i<gChains_ctrl.chRecNum;i++)
+	 {
+		gChains_ctrl.chCfg[i+gChains_ctrl.chCapNum].channel = i;
+	 }
+
+	Chains_ipcBitsInit();
+	System_linkControl(
+		SYSTEM_LINK_ID_M3VIDEO,
+		SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
+		&systemVid_encDecIvaChMapTbl,
+		sizeof(SystemVideo_Ivahd2ChMap_Tbl),
+		TRUE
+	);
+
+	/*
+	 * Local capture + Enc + send
+	 */
+	VCAP_PARAMS_S  prm;
+	Vcap_params_init(&prm);
+	if(chainsCfg->chCapNum > 0)
+	{
+		CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
+		CHAINS_INIT_STRUCT(NsfLink_CreateParams,nsfPrm);
+		CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVpssPrm);
+		CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVideoPrm);
+		CHAINS_INIT_STRUCT(EncLink_CreateParams,encPrm);
+		CHAINS_INIT_STRUCT(IpcBitsOutLinkRTOS_CreateParams,ipcBitsOutVideoPrm);
+		CHAINS_INIT_STRUCT(IpcBitsInLinkHLOS_CreateParams,ipcBitsInHostPrm);
+
+		captureId     = SYSTEM_LINK_ID_CAPTURE;
+		nsfId     	  = SYSTEM_LINK_ID_NSF_0;
+		dupId         =SYSTEM_VPSS_LINK_ID_DUP_0;
+		ipcOutVpssId  = SYSTEM_VPSS_LINK_ID_IPC_OUT_M3_0;
+		ipcInVideoId  = SYSTEM_VIDEO_LINK_ID_IPC_IN_M3_0;
+		encId         = SYSTEM_LINK_ID_VENC_0;
+		ipcBitsOutVideoId   = SYSTEM_VIDEO_LINK_ID_IPC_BITS_OUT_0;
+		ipcBitsInHostId     = SYSTEM_HOST_LINK_ID_IPC_BITS_IN_0;
+
+		capturePrm.numVipInst               = chainsCfg->chCapNum;
+		capturePrm.tilerEnable              = TRUE;
+		capturePrm.numBufsPerCh             = 16;
+		capturePrm.numExtraBufs             = 0;
+		capturePrm.maxBlindAreasPerCh       = 0;
+		capturePrm.isPalMode                = FALSE;
+		capturePrm.enableSdCrop             = FALSE;
+		capturePrm.doCropInCapture          = FALSE;
+
+
+		for(i=0; i<capturePrm.numVipInst; i++)
+		{
+#if defined(TI816X_ETVH)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+#endif
+#if defined(TI816X_ETVS)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
+			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
+#endif
+#if defined(TI8107_INS)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+#endif
+
+			prm.channelParams[i].deviceId = vipInstId;
+			prm.enableConfigExtVideoDecoder = TRUE;
+			prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
+
+			pCaptureInstPrm->vipInstId          = vipInstId%SYSTEM_CAPTURE_INST_MAX;
+			pCaptureInstPrm->inDataFormat       = SYSTEM_DF_YUV422P;
+			pCaptureInstPrm->standard           = chainsCfg->chCfg[i].inStd;
+			pCaptureInstPrm->numOutput          = 1;
+			pCaptureInstPrm->numChPerOutput     = 1;
+
+			pCaptureOutPrm                      = &pCaptureInstPrm->outParams[0];
+			pCaptureOutPrm->dataFormat          = SYSTEM_DF_YUV422I_YUYV;
+			pCaptureOutPrm->scEnable            = FALSE;
+			pCaptureOutPrm->outQueId            = 0;
+		}
+		capturePrm.outQueParams[0].nextLink     = nsfId;
+
+		nsfPrm.inQueParams.prevLinkId    = captureId;
+		nsfPrm.inQueParams.prevLinkQueId = 0;
+		nsfPrm.bypassNsf                 = TRUE;
+		nsfPrm.tilerEnable               = TRUE;
+		nsfPrm.numOutQue                 = 1;
+		nsfPrm.outQueParams[0].nextLink  = dupId;
+		nsfPrm.numBufsPerCh              = 0;
+
+		dupPrm.inQueParams.prevLinkId           = nsfId;
+		dupPrm.inQueParams.prevLinkQueId        = 0;
+		dupPrm.numOutQue                        = 1;
+		dupPrm.outQueParams[0].nextLink         = ipcOutVpssId;
+		dupPrm.notifyNextLink                   = TRUE;
+
+		ipcOutVpssPrm.inQueParams.prevLinkId    = dupId;
+		ipcOutVpssPrm.inQueParams.prevLinkQueId = 0;
+		ipcOutVpssPrm.outQueParams[0].nextLink  = ipcInVideoId;
+		ipcOutVpssPrm.numOutQue                 = 1;
+		ipcOutVpssPrm.numChPerOutQue[0]         = 0;
+		ipcOutVpssPrm.notifyNextLink            = TRUE;
+		ipcOutVpssPrm.notifyPrevLink            = FALSE;
+		ipcOutVpssPrm.noNotifyMode              = FALSE;
+		ipcOutVpssPrm.equallyDivideChAcrossOutQues = FALSE;
+
+		ipcInVideoPrm.inQueParams.prevLinkId    = ipcOutVpssId;
+		ipcInVideoPrm.inQueParams.prevLinkQueId = 0;
+		ipcInVideoPrm.outQueParams[0].nextLink  = encId;
+		ipcInVideoPrm.numOutQue                 = 1;
+		ipcInVideoPrm.numChPerOutQue[0]         = 0;
+		ipcInVideoPrm.notifyNextLink            = TRUE;
+		ipcInVideoPrm.notifyPrevLink            = FALSE;
+		ipcInVideoPrm.noNotifyMode              = FALSE;
+		ipcInVideoPrm.equallyDivideChAcrossOutQues = FALSE;
+
+		for (i=0; i<chainsCfg->chCapNum; i++) {
+			encPrm.chCreateParams[i].format                             = chainsCfg->chCfg[i].encFormat;
+			encPrm.chCreateParams[i].profile                            = chainsCfg->chCfg[i].encProfile;
+			encPrm.chCreateParams[i].dataLayout                         = IVIDEO_FIELD_SEPARATED;
+			encPrm.chCreateParams[i].fieldMergeEncodeEnable             = FALSE;
+			encPrm.chCreateParams[i].enableAnalyticinfo                 = FALSE;
+			encPrm.chCreateParams[i].enableWaterMarking                 = FALSE;
+			encPrm.chCreateParams[i].encodingPreset                     = XDM_USER_DEFINED;
+			encPrm.chCreateParams[i].rateControlPreset                  = IVIDEO_USER_DEFINED;
+			encPrm.chCreateParams[i].enableHighSpeed                    = FALSE;
+			encPrm.chCreateParams[i].defaultDynamicParams.interFrameInterval  = 1;
+			encPrm.chCreateParams[i].defaultDynamicParams.intraFrameInterval  = chainsCfg->chCfg[i].intraFrameInterval;
+			encPrm.chCreateParams[i].defaultDynamicParams.inputFrameRate      = chainsCfg->chCfg[i].inFrameRate;
+			encPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate     = chainsCfg->chCfg[i].encFrameRate;
+			encPrm.chCreateParams[i].defaultDynamicParams.targetBitRate       = chainsCfg->chCfg[i].bitRate;
+			encPrm.chCreateParams[i].defaultDynamicParams.mvAccuracy          = IVIDENC2_MOTIONVECTOR_QUARTERPEL;
+			encPrm.chCreateParams[i].defaultDynamicParams.rcAlg               = chainsCfg->chCfg[i].rateCtrl;
+			encPrm.chCreateParams[i].defaultDynamicParams.qpMin               = 0;
+			encPrm.chCreateParams[i].defaultDynamicParams.qpMax               = 51;
+			encPrm.chCreateParams[i].defaultDynamicParams.qpInit              = -1;
+			encPrm.chCreateParams[i].defaultDynamicParams.vbrDuration         = 8;
+			encPrm.chCreateParams[i].defaultDynamicParams.vbrSensitivity      = 0;
+		}
+		encPrm.inQueParams.prevLinkId   = ipcInVideoId;
+		encPrm.inQueParams.prevLinkQueId= 0;
+		encPrm.outQueParams.nextLink    = ipcBitsOutVideoId;
+		encPrm.numBufPerCh[0]           = 0;
+
+		ipcBitsOutVideoPrm.baseCreateParams.inQueParams.prevLinkId      = encId;
+		ipcBitsOutVideoPrm.baseCreateParams.inQueParams.prevLinkQueId   = 0;
+		ipcBitsOutVideoPrm.baseCreateParams.outQueParams[0].nextLink    = ipcBitsInHostId;
+		ipcBitsOutVideoPrm.baseCreateParams.numOutQue                   = 1;
+		ipcBitsOutVideoPrm.baseCreateParams.notifyNextLink              = FALSE;
+		ipcBitsOutVideoPrm.baseCreateParams.notifyPrevLink              = FALSE;
+		ipcBitsOutVideoPrm.baseCreateParams.noNotifyMode                = TRUE;
+		Chains_ipcBitsInitCreateParams_BitsOutRTOS(&ipcBitsOutVideoPrm,FALSE);
+
+		ipcBitsInHostPrm.baseCreateParams.inQueParams.prevLinkId        = ipcBitsOutVideoId;
+		ipcBitsInHostPrm.baseCreateParams.inQueParams.prevLinkQueId     = 0;
+		ipcBitsInHostPrm.baseCreateParams.numOutQue                     = 1;
+		ipcBitsInHostPrm.baseCreateParams.numChPerOutQue[0]             = 0;
+		ipcBitsInHostPrm.baseCreateParams.notifyNextLink                = FALSE;
+		ipcBitsInHostPrm.baseCreateParams.notifyPrevLink                = FALSE;
+		ipcBitsInHostPrm.baseCreateParams.noNotifyMode                  = TRUE;
+		Chains_ipcBitsInitCreateParams_BitsInHLOS(&ipcBitsInHostPrm);
+    }
+
+    //Network
+     if(chainsCfg->chRecNum > 0)
+     {
+		CHAINS_INIT_STRUCT(IpcBitsOutLinkHLOS_CreateParams,ipcBitsOutHostPrm);
+		CHAINS_INIT_STRUCT(IpcBitsInLinkRTOS_CreateParams,ipcBitsInVideoPrm);
+		CHAINS_INIT_STRUCT(DecLink_CreateParams,decPrm);
+		CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoEncPrm);
+		CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssEncPrm);
+        CHAINS_INIT_STRUCT(SelectLink_CreateParams,selPrm);
+		for (i=0; i<CHAINS_SW_MS_MAX_DISPLAYS; i++) {
+			CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
+			CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
+		}
+
+		ipcBitsOutHostId    = SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0;
+		ipcBitsInVideoId    = SYSTEM_VIDEO_LINK_ID_IPC_BITS_IN_0;
+		decId               = SYSTEM_LINK_ID_VDEC_0;
+		ipcOutVideoEncId    = SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_1;
+		ipcInVpssEncId      = SYSTEM_VPSS_LINK_ID_IPC_IN_M3_1;
+        selId               = SYSTEM_VPSS_LINK_ID_SELECT_0;
+		swMsId[0]           = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
+		swMsId[1]           = SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
+		displayId[0]        = SYSTEM_LINK_ID_DISPLAY_0;
+		displayId[1]        = SYSTEM_LINK_ID_DISPLAY_1;
+
+        for(i=chainsCfg->chCapNum; i<chainsCfg->chNum; i++)
+        {
+        	chainsCfg->displayRes[i-chainsCfg->chCapNum] = chainsCfg->displayRes[i];
+        }
+
+		Chains_displayCtrlInit(chainsCfg->displayRes);
+
+		System_LinkQueInfo queInfo;
+		queInfo.numCh = chainsCfg->chRecNum;
+
+		for (i=0; i<chainsCfg->chRecNum; i++) {
+			queInfo.chInfo[i].bufType           = SYSTEM_BUF_TYPE_VIDBITSTREAM;
+			queInfo.chInfo[i].codingformat      = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
+			queInfo.chInfo[i].height            = chainsCfg->chCfg[i + chainsCfg->chCapNum].outHeight;
+			queInfo.chInfo[i].width             = chainsCfg->chCfg[i + chainsCfg->chCapNum].outWidth;
+			queInfo.chInfo[i].memType           = SYSTEM_MT_TILEDMEM;
+			queInfo.chInfo[i].dataFormat        = SYSTEM_DF_YUV420P;
+			queInfo.chInfo[i].scanFormat        = SYSTEM_SF_PROGRESSIVE;
+		}
+
+		ipcBitsOutHostPrm.baseCreateParams.numOutQue                    = 1;
+		ipcBitsOutHostPrm.baseCreateParams.numChPerOutQue[0]            = chainsCfg->chRecNum;
+		ipcBitsOutHostPrm.baseCreateParams.outQueParams[0].nextLink     = ipcBitsInVideoId;
+		Chains_ipcBitsInitCreateParams_BitsOutHLOS(&ipcBitsOutHostPrm, &queInfo);
+
+		ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkId       = ipcBitsOutHostId;
+		ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkQueId    = 0;
+		ipcBitsInVideoPrm.baseCreateParams.numOutQue                    = 1;
+		ipcBitsInVideoPrm.baseCreateParams.numChPerOutQue[0]            = chainsCfg->chRecNum;
+		ipcBitsInVideoPrm.baseCreateParams.outQueParams[0].nextLink     = decId;
+		Chains_ipcBitsInitCreateParams_BitsInRTOS(&ipcBitsInVideoPrm, TRUE);
+
+		for (i=0; i<chainsCfg->chRecNum; i++) {
+			decPrm.chCreateParams[i].format                               = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
+			decPrm.chCreateParams[i].profile                              = IH264VDEC_PROFILE_ANY;
+			decPrm.chCreateParams[i].targetMaxWidth                       = chainsCfg->chCfg[i + chainsCfg->chCapNum].outWidth;
+			decPrm.chCreateParams[i].targetMaxHeight                      = chainsCfg->chCfg[i + chainsCfg->chCapNum].outHeight;
+			decPrm.chCreateParams[i].fieldMergeDecodeEnable               = FALSE;
+			decPrm.chCreateParams[i].algCreateStatus                      = DEC_LINK_ALG_CREATE_STATUS_CREATE;
+			decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFrameRate;
+			decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate   = chainsCfg->chCfg[i + chainsCfg->chCapNum].bitRate;
+			decPrm.chCreateParams[i].numBufPerCh                          = 0;
+			decPrm.chCreateParams[i].tilerEnable                          = TRUE;
+		}
+
+		decPrm.inQueParams.prevLinkId    = ipcBitsInVideoId;
+		decPrm.inQueParams.prevLinkQueId = 0;
+		decPrm.outQueParams.nextLink     = ipcOutVideoEncId;
+
+		ipcOutVideoEncPrm.inQueParams.prevLinkId    = decId;
+		ipcOutVideoEncPrm.inQueParams.prevLinkQueId = 0;
+		ipcOutVideoEncPrm.numOutQue                 = 1;
+		ipcOutVideoEncPrm.outQueParams[0].nextLink  = ipcInVpssEncId;
+		ipcOutVideoEncPrm.notifyNextLink            = TRUE;
+		ipcOutVideoEncPrm.notifyPrevLink            = FALSE;
+		ipcOutVideoEncPrm.noNotifyMode              = FALSE;
+
+		ipcInVpssEncPrm.inQueParams.prevLinkId      = ipcOutVideoEncId;
+		ipcInVpssEncPrm.inQueParams.prevLinkQueId   = 0;
+		ipcInVpssEncPrm.numOutQue                   = 1;
+		ipcInVpssEncPrm.outQueParams[0].nextLink    = selId;
+		ipcInVpssEncPrm.notifyNextLink              = TRUE;
+		ipcInVpssEncPrm.notifyPrevLink              = TRUE;//modify
+		ipcInVpssEncPrm.noNotifyMode                = FALSE;
+
+
+        selPrm.inQueParams.prevLinkId       = ipcInVpssEncId;
+        selPrm.inQueParams.prevLinkQueId    = 0;
+        selPrm.numOutQue                    = 2;
+        selPrm.outQueParams[0].nextLink     = swMsId[0];
+        selPrm.outQueChInfo[0].outQueId     = 0;
+        selPrm.outQueChInfo[0].numOutCh     = 1;
+        selPrm.outQueChInfo[0].inChNum[0]   = 0;
+        selPrm.outQueParams[1].nextLink     = swMsId[1];
+        selPrm.outQueChInfo[1].outQueId     = 1;
+        selPrm.outQueChInfo[1].numOutCh     = 1;
+        selPrm.outQueChInfo[1].inChNum[0]   = 1;
+
+        for (i=0; i<chainsCfg->chRecNum; i++) {
+            swMsPrm[i].numSwMsInst               = 1;
+            swMsPrm[i].swMsInstId[0]             = (i!=0) ? SYSTEM_SW_MS_SC_INST_VIP1_SC : SYSTEM_SW_MS_SC_INST_DEI_SC_NO_DEI;
+            swMsPrm[i].inQueParams.prevLinkId    = selId;
+            swMsPrm[i].inQueParams.prevLinkQueId = i;
+            swMsPrm[i].outQueParams.nextLink     = displayId[i];
+            swMsPrm[i].lineSkipMode              = FALSE;
+            swMsPrm[i].enableLayoutGridDraw      = TRUE;
+            swMsPrm[i].layoutPrm.outputFPS       = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFrameRate;
+            swMsPrm[i].maxInputQueLen            = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
+            swMsPrm[i].maxOutRes                 = chainsCfg->displayRes[i];
+            swMsPrm[i].numOutBuf                 = 0;
+            Chains_swMsGenerateLayoutParams(i, 2, &swMsPrm[i]);
+
+            displayPrm[i].numInputQueues                = 1;
+            displayPrm[i].activeQueue                   = 0;
+            displayPrm[i].inQueParams[0].prevLinkId     = swMsId[i];
+            displayPrm[i].inQueParams[0].prevLinkQueId  = 0;
+            displayPrm[i].displayRes                    = chainsCfg->displayRes[i];
+            displayPrm[i].displayId                    	= DISPLAY_LINK_DISPLAY_AUTO_SELECT;
+            displayPrm[i].forceFieldSeparatedInputMode  = FALSE;
+
+        }
+     }
+
+     /*
+      * Create Links
+      */
+	if (chainsCfg->chCapNum > 0)
+	{
+		System_linkCreate(captureId, &capturePrm, sizeof(capturePrm));
+		System_linkCreate(nsfId, &nsfPrm, sizeof(nsfPrm));
+		System_linkCreate(dupId, &dupPrm, sizeof(dupPrm));
+		System_linkCreate(ipcOutVpssId, &ipcOutVpssPrm, sizeof(ipcOutVpssPrm));
+		System_linkCreate(ipcInVideoId, &ipcInVideoPrm, sizeof(ipcInVideoPrm));
+		System_linkCreate(encId, &encPrm, sizeof(encPrm));
+		System_linkCreate(ipcBitsOutVideoId, &ipcBitsOutVideoPrm, sizeof(ipcBitsOutVideoPrm));
+		System_linkCreate(ipcBitsInHostId, &ipcBitsInHostPrm, sizeof(ipcBitsInHostPrm));
+	}
+
+    if (chainsCfg->chRecNum > 0)
+    {
+        System_linkCreate(ipcBitsOutHostId,&ipcBitsOutHostPrm,sizeof(ipcBitsOutHostPrm));
+        System_linkCreate(ipcBitsInVideoId,&ipcBitsInVideoPrm,sizeof(ipcBitsInVideoPrm));
+        System_linkCreate(decId, &decPrm, sizeof(decPrm));
+        System_linkCreate(ipcOutVideoEncId, &ipcOutVideoEncPrm, sizeof(ipcOutVideoEncPrm));
+        System_linkCreate(ipcInVpssEncId, &ipcInVpssEncPrm, sizeof(ipcInVpssEncPrm));
+        //System_linkCreate(dupEncId, &dupEncPrm, sizeof(dupEncPrm));
+        System_linkCreate(selId, &selPrm, sizeof(selPrm));
+        for(i=0; i<chainsCfg->chRecNum; i++)
+        {
+            System_linkCreate(swMsId[i], &swMsPrm[i], sizeof(swMsPrm[i]));
+            System_linkCreate(displayId[i], &displayPrm[i], sizeof(displayPrm[i]));
+        }
+    }
+
+	 /*
+	  * Start Links
+	  */
+	if (chainsCfg->chCapNum > 0)
+	{
+		System_linkStart(ipcBitsInHostId);
+		System_linkStart(ipcBitsOutVideoId);
+		System_linkStart(encId);
+		System_linkStart(ipcInVideoId);
+		System_linkStart(ipcOutVpssId);
+		System_linkStart(dupId);
+		System_linkStart(nsfId);
+		System_linkStart(captureId);
+		Vcap_init(&prm);
+		Vcap_start();
+	}
+
+	if (chainsCfg->chRecNum > 0)
+    {
+		for(i=0; i<chainsCfg->chRecNum; i++)
+		{
+			System_linkStart(displayId[i]);
+		}
+		Vdis_start();
+		for(i=0; i<chainsCfg->chRecNum; i++)
+		{
+			System_linkStart(swMsId[i]);
+		}
+		//System_linkStart(dupEncId);
+        System_linkStart(selId);
+		System_linkStart(ipcInVpssEncId);
+		System_linkStart(ipcOutVideoEncId);
+		System_linkStart(decId);
+		System_linkStart(ipcBitsInVideoId);
+		System_linkStart(ipcBitsOutHostId);
+	}
+
+
+	while(1)
+	{
+		char ch;
+		//ch = Chains_SelCapSelRecvmenu();
+          ch = Chains_menuRunTime();
+		if(ch=='0')
+			break;
+
+
+		if(ch == '2') 
+		{
+			if(captureId!=SYSTEM_LINK_ID_INVALID)
+			{
+				System_linkControl(captureId,
+						CAPTURE_LINK_CMD_PRINT_ADV_STATISTICS,
+						NULL, 0, TRUE);
+			}
+
+		
+			for(i=0; i<OSA_ARRAYSIZE(swMsId); i++)
+			{
+				if(swMsId[i]!=SYSTEM_LINK_ID_INVALID)
+				{
+					System_linkControl(swMsId[i],
+							SYSTEM_SW_MS_LINK_CMD_PRINT_STATISTICS,
+							NULL, 0, TRUE);
+				}
+			}
+
+			for(i=0; i<OSA_ARRAYSIZE(displayId); i++)
+			{
+				if(displayId[i]!=SYSTEM_LINK_ID_INVALID)
+				{
+					System_linkControl(displayId[i],
+							DISPLAY_LINK_CMD_PRINT_STATISTICS,
+							NULL, 0, TRUE);
+				}
+			}
+
+			OSA_waitMsecs(2000); // allow for print to complete
+
+			if(encId != SYSTEM_LINK_ID_INVALID)
+			{
+				System_linkControl(encId,
+						ENC_LINK_CMD_PRINT_IVAHD_STATISTICS,
+						NULL, 0, TRUE);
+			}
+			else if (decId !=SYSTEM_LINK_ID_INVALID)
+			{
+				System_linkControl(decId,
+						DEC_LINK_CMD_PRINT_IVAHD_STATISTICS,
+						NULL, 0, TRUE);
+			}
+
+			if(encId != SYSTEM_LINK_ID_INVALID)
+			{
+				System_linkControl(encId,
+						ENC_LINK_CMD_PRINT_STATISTICS,
+						NULL, 0, TRUE);
+			}
+			if(decId != SYSTEM_LINK_ID_INVALID)
+			{
+				System_linkControl(decId,
+						DEC_LINK_CMD_PRINT_STATISTICS,
+						NULL, 0, TRUE);
+			}
+
+			OSA_waitMsecs(3000); // allow for print to complete
+
+			UInt32 gChains_enabledProcs[] = {
+				SYSTEM_LINK_ID_M3VPSS,
+				SYSTEM_LINK_ID_M3VIDEO,
+				SYSTEM_LINK_ID_DSP,
+			};
+
+			for(i=0; i<sizeof(gChains_enabledProcs)/sizeof(gChains_enabledProcs[0]); i++)
+			{
+				SystemCommon_PrintStatus printStatus;
+
+				memset(&printStatus, 0, sizeof(printStatus));
+
+				printStatus.printCpuLoad = TRUE;
+				printStatus.printTskLoad = TRUE;
+				System_linkControl(
+						gChains_enabledProcs[i],
+						SYSTEM_COMMON_CMD_PRINT_STATUS,
+						&printStatus,
+						sizeof(printStatus),
+						TRUE);
+				System_linkControl(
+						gChains_enabledProcs[i],
+						SYSTEM_COMMON_CMD_CPU_LOAD_CALC_RESET,
+						NULL,
+						0,
+						TRUE);
+
+				OSA_waitMsecs(500); // allow for print to complete
+			}
+
+
+		}
+	}
+
+
+	Chains_ipcBitsStop();
+
+	 if (chainsCfg->chCapNum > 0) {
+		 System_linkStop(captureId);
+		 Vcap_stop();
+		 System_linkStop(nsfId);
+		 System_linkStop(dupId);
+		 System_linkStop(ipcOutVpssId);
+		 System_linkStop(ipcInVideoId);
+		 System_linkStop(encId);
+		 System_linkStop(ipcBitsOutVideoId);
+		 System_linkStop(ipcBitsInHostId);
+	 }
+
+	 if (chainsCfg->chRecNum > 0) {
+		 System_linkStop(ipcBitsOutHostId);
+		 System_linkStop(ipcBitsInVideoId);
+		 System_linkStop(decId);
+		 System_linkStop(ipcOutVideoEncId);
+		 System_linkStop(ipcInVpssEncId);
+		 //System_linkStop(dupEncId);
+         System_linkStop(selId);
+		 for(i=0; i<chainsCfg->chRecNum; i++){
+			 System_linkStop(swMsId[i]);
+			 System_linkStop(displayId[i]);
+		 }
+		 Vdis_stop();
+	 }
+
+	 if (chainsCfg->chCapNum > 0) {
+		 System_linkDelete(captureId);
+		 System_linkDelete(nsfId);
+		 System_linkDelete(dupId);
+		 System_linkDelete(ipcOutVpssId);
+		 System_linkDelete(ipcInVideoId);
+		 System_linkDelete(encId);
+		 System_linkDelete(ipcBitsOutVideoId);
+		 System_linkDelete(ipcBitsInHostId);
+	 }
+
+	 if (chainsCfg->chRecNum > 0) {
+		 System_linkDelete(ipcBitsOutHostId);
+		 System_linkDelete(ipcBitsInVideoId);
+		 System_linkDelete(decId);
+		 System_linkDelete(ipcOutVideoEncId);
+		 System_linkDelete(ipcInVpssEncId);
+		 //System_linkDelete(dupEncId);
+		 System_linkDelete(selId);
+		 for(i=0; i<chainsCfg->chRecNum; i++){
+			 System_linkDelete(swMsId[i]);
+			 System_linkDelete(displayId[i]);
+		 }
+
+		 Chains_displayCtrlDeInit();
+	 }
+
+	 Chains_ipcBitsExit();
+}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_doubleChCapEncSend.c b/dvr_rdk/demos/link_api_demos/chains/chains_doubleChCapEncSend.c
new file mode 100644
index 0000000..cb3a8a4
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_doubleChCapEncSend.c
@@ -0,0 +1,352 @@
+/** ============================================================================
+ *
+ *  Chains_doubleChCapEncSend.c
+ *
+ *  Author     : zzx
+ *
+ *  Date       : July 19, 2014
+ *
+ *  Description:	Cap + Enc + Send
+ *
+ * 				 |->enc->send
+ *  capture->dup-|
+ *  			 |		 |->swMs0->display0
+ *  			 |->dup2-|
+ *  			 		 |->swMs1->display1
+ *  ============================================================================
+ */
+
+
+#include <mcfw/interfaces/ti_vcap.h>
+#include <demos/link_api_demos/common/chains.h>
+
+static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
+{
+    .isPopulated = 1,
+    .ivaMap[0] =
+    {
+        .EncNumCh  = 1,
+        .EncChList = {0},
+        .DecNumCh  = 0,
+        .DecChList = {0},
+    },
+    .ivaMap[1] =
+    {
+        .EncNumCh  = 1,
+        .EncChList = {1},
+        .DecNumCh  = 0,
+        .DecChList = {0},
+    },
+    .ivaMap[2] =
+    {
+        .EncNumCh  = 2,
+        .EncChList = {2,3},
+        .DecNumCh  = 0,
+        .DecChList = {0},
+    },
+};
+
+Void Chains_doubleChCapEncSend(Chains_Ctrl *chainsCfg)
+{
+    CaptureLink_CreateParams            capturePrm;
+    CaptureLink_VipInstParams           *pCaptureInstPrm;
+    CaptureLink_OutParams               *pCaptureOutPrm;
+    DupLink_CreateParams                dupPrm;
+    DupLink_CreateParams                dup2Prm;
+    SwMsLink_CreateParams               swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+    DisplayLink_CreateParams            displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+    IpcLink_CreateParams                ipcOutVpssPrm;
+    IpcLink_CreateParams                ipcInVideoPrm;
+    EncLink_CreateParams                encPrm;
+    IpcBitsOutLinkRTOS_CreateParams     ipcBitsOutVideoPrm;
+    IpcBitsInLinkHLOS_CreateParams      ipcBitsInHostPrm;
+
+    UInt32 captureId, vipInstId;
+    UInt32 dupId;
+    UInt32 dup2Id;
+    UInt32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
+    UInt32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
+    UInt32 ipcOutVpssId;
+    UInt32 ipcInVideoId;
+    UInt32 encId;
+    UInt32 ipcBitsOutVideoId;
+    UInt32 ipcBitsInHostId;
+
+    UInt32 i;
+    char   ch;
+    
+	
+	Chains_ipcBitsInit();
+	
+	
+    CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
+    for (i=0; i<CHAINS_SW_MS_MAX_DISPLAYS; i++) {
+        CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
+        CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
+    }
+    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVpssPrm);
+    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVideoPrm);
+    CHAINS_INIT_STRUCT(EncLink_CreateParams,encPrm);
+    CHAINS_INIT_STRUCT(IpcBitsOutLinkRTOS_CreateParams,ipcBitsOutVideoPrm);
+    CHAINS_INIT_STRUCT(IpcBitsInLinkHLOS_CreateParams,ipcBitsInHostPrm);
+    
+	
+	captureId     = SYSTEM_LINK_ID_CAPTURE;
+    dupId         = SYSTEM_VPSS_LINK_ID_DUP_0;
+    dup2Id        = SYSTEM_VPSS_LINK_ID_DUP_1;
+    swMsId[0]     = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
+    swMsId[1]     = SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
+    displayId[0]  = SYSTEM_LINK_ID_DISPLAY_0;
+    displayId[1]  = SYSTEM_LINK_ID_DISPLAY_1;
+
+    encId         = SYSTEM_LINK_ID_VENC_0;
+    ipcOutVpssId  = SYSTEM_VPSS_LINK_ID_IPC_OUT_M3_0;
+    ipcInVideoId  = SYSTEM_VIDEO_LINK_ID_IPC_IN_M3_0;
+    ipcBitsOutVideoId   = SYSTEM_VIDEO_LINK_ID_IPC_BITS_OUT_0;
+    ipcBitsInHostId     = SYSTEM_HOST_LINK_ID_IPC_BITS_IN_0;
+
+    System_linkControl(
+        SYSTEM_LINK_ID_M3VIDEO,
+        SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
+        &systemVid_encDecIvaChMapTbl,
+        sizeof(SystemVideo_Ivahd2ChMap_Tbl),
+        TRUE
+    );
+
+
+	VCAP_PARAMS_S  prm;
+	Vcap_params_init(&prm);
+
+	capturePrm.numVipInst = chainsCfg->chCapNum;
+	capturePrm.tilerEnable              = FALSE;
+	capturePrm.numBufsPerCh             = 16;
+	capturePrm.numExtraBufs             = 0;
+	capturePrm.maxBlindAreasPerCh       = 0;
+	capturePrm.isPalMode                = FALSE;
+	capturePrm.enableSdCrop             = FALSE;
+	capturePrm.doCropInCapture          = FALSE;
+
+	for(i=0; i<capturePrm.numVipInst; i++)
+	{
+#if defined(TI816X_ETVH)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+#endif
+#if defined(TI816X_ETVS)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
+			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
+#endif
+#if defined(TI8107_INS)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+#endif
+
+		prm.channelParams[i].deviceId		= vipInstId;
+		prm.enableConfigExtVideoDecoder 	= TRUE;
+		prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
+
+		pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
+		pCaptureInstPrm->inScanFormat		= SYSTEM_SF_PROGRESSIVE;
+		pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
+		pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
+		pCaptureInstPrm->numOutput			= 1;
+		pCaptureInstPrm->numChPerOutput		= 1;
+
+
+		pCaptureOutPrm                      = &pCaptureInstPrm->outParams[0];
+		pCaptureOutPrm->dataFormat          = SYSTEM_DF_YUV420SP_UV;
+		pCaptureOutPrm->scEnable            = FALSE;
+		pCaptureOutPrm->outQueId            = 0;
+	}
+	capturePrm.outQueParams[0].nextLink     = dupId;
+
+    System_linkCreate(captureId, &capturePrm, sizeof(capturePrm));
+
+    dupPrm.inQueParams.prevLinkId           = captureId;
+    dupPrm.inQueParams.prevLinkQueId        = 0;
+    dupPrm.numOutQue                        = 2;
+    dupPrm.outQueParams[0].nextLink         = ipcOutVpssId;
+    dupPrm.outQueParams[1].nextLink         = dup2Id;
+    dupPrm.notifyNextLink                   = TRUE;
+
+    ipcOutVpssPrm.inQueParams.prevLinkId    = dupId;
+    ipcOutVpssPrm.inQueParams.prevLinkQueId = 0;
+    ipcOutVpssPrm.numOutQue                 = 1;
+    ipcOutVpssPrm.numChPerOutQue[0]         = 1;
+    ipcOutVpssPrm.outQueParams[0].nextLink  = ipcInVideoId;
+    ipcOutVpssPrm.notifyNextLink            = TRUE;
+    ipcOutVpssPrm.notifyPrevLink            = FALSE;
+    ipcOutVpssPrm.noNotifyMode              = FALSE;
+    ipcOutVpssPrm.numChPerOutQue[0]         = 0;
+    ipcOutVpssPrm.equallyDivideChAcrossOutQues = FALSE;
+
+    ipcInVideoPrm.inQueParams.prevLinkId    = ipcOutVpssId;
+    ipcInVideoPrm.inQueParams.prevLinkQueId = 0;
+    ipcInVideoPrm.numOutQue                 = 1;
+    ipcInVideoPrm.numChPerOutQue[0]         = 1;
+    ipcInVideoPrm.outQueParams[0].nextLink  = encId;
+    ipcInVideoPrm.notifyNextLink            = TRUE;
+    ipcInVideoPrm.notifyPrevLink            = FALSE;
+    ipcInVideoPrm.noNotifyMode              = FALSE;
+    ipcInVideoPrm.numChPerOutQue[0]         = 0;
+    ipcInVideoPrm.equallyDivideChAcrossOutQues = FALSE;
+
+    for (i=0; i<gChains_ctrl.chNum; i++) {
+        encPrm.chCreateParams[i].format                             = chainsCfg->chCfg[i].encFormat;
+        encPrm.chCreateParams[i].profile                            = chainsCfg->chCfg[i].encProfile;
+        encPrm.chCreateParams[i].dataLayout                         = IVIDEO_FIELD_SEPARATED;
+        encPrm.chCreateParams[i].fieldMergeEncodeEnable             = FALSE;
+        encPrm.chCreateParams[i].enableAnalyticinfo                 = FALSE;
+        encPrm.chCreateParams[i].enableWaterMarking                 = FALSE;
+        encPrm.chCreateParams[i].encodingPreset                     = XDM_USER_DEFINED;
+        encPrm.chCreateParams[i].rateControlPreset                  = IVIDEO_USER_DEFINED;
+        encPrm.chCreateParams[i].enableHighSpeed                    = FALSE;
+        encPrm.chCreateParams[i].defaultDynamicParams.interFrameInterval  = 1;
+        encPrm.chCreateParams[i].defaultDynamicParams.intraFrameInterval  = chainsCfg->chCfg[i].intraFrameInterval;
+        encPrm.chCreateParams[i].defaultDynamicParams.inputFrameRate      = chainsCfg->chCfg[i].inFrameRate;
+        encPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate     = chainsCfg->chCfg[i].encFrameRate;
+        encPrm.chCreateParams[i].defaultDynamicParams.targetBitRate       = chainsCfg->chCfg[i].bitRate;
+        encPrm.chCreateParams[i].defaultDynamicParams.mvAccuracy          = IVIDENC2_MOTIONVECTOR_QUARTERPEL;
+        encPrm.chCreateParams[i].defaultDynamicParams.rcAlg               = chainsCfg->chCfg[i].rateCtrl;
+        encPrm.chCreateParams[i].defaultDynamicParams.qpMin               = 0;
+        encPrm.chCreateParams[i].defaultDynamicParams.qpMax               = 51;
+        encPrm.chCreateParams[i].defaultDynamicParams.qpInit              = -1;
+        encPrm.chCreateParams[i].defaultDynamicParams.vbrDuration         = 8;
+        encPrm.chCreateParams[i].defaultDynamicParams.vbrSensitivity      = 0;
+    }
+    encPrm.inQueParams.prevLinkId   = ipcInVideoId;
+    encPrm.inQueParams.prevLinkQueId= 0;
+    encPrm.outQueParams.nextLink    = ipcBitsOutVideoId;
+    encPrm.numBufPerCh[0]           = 0;
+
+    ipcBitsOutVideoPrm.baseCreateParams.inQueParams.prevLinkId      = encId;
+    ipcBitsOutVideoPrm.baseCreateParams.inQueParams.prevLinkQueId   = 0;
+    ipcBitsOutVideoPrm.baseCreateParams.numOutQue                   = 1;
+    ipcBitsOutVideoPrm.baseCreateParams.numChPerOutQue[0]           = 1;
+    ipcBitsOutVideoPrm.baseCreateParams.outQueParams[0].nextLink    = ipcBitsInHostId;
+    ipcBitsOutVideoPrm.baseCreateParams.notifyNextLink              = FALSE;
+    ipcBitsOutVideoPrm.baseCreateParams.notifyPrevLink              = FALSE;
+    ipcBitsOutVideoPrm.baseCreateParams.noNotifyMode                = TRUE;
+    Chains_ipcBitsInitCreateParams_BitsOutRTOS(&ipcBitsOutVideoPrm,FALSE);
+
+    ipcBitsInHostPrm.baseCreateParams.inQueParams.prevLinkId        = ipcBitsOutVideoId;
+    ipcBitsInHostPrm.baseCreateParams.inQueParams.prevLinkQueId     = 0;
+    ipcBitsInHostPrm.baseCreateParams.numOutQue                     = 1;
+    ipcBitsInHostPrm.baseCreateParams.numChPerOutQue[0]             = 1;
+    ipcBitsInHostPrm.baseCreateParams.notifyNextLink                = FALSE;
+    ipcBitsInHostPrm.baseCreateParams.notifyPrevLink                = FALSE;
+    ipcBitsInHostPrm.baseCreateParams.noNotifyMode                  = TRUE;
+    Chains_ipcBitsInitCreateParams_BitsInHLOS(&ipcBitsInHostPrm);
+
+    Chains_displayCtrlInit(chainsCfg->displayRes);
+    System_linkCreate(dupId, &dupPrm, sizeof(dupPrm));
+    System_linkCreate(ipcOutVpssId, &ipcOutVpssPrm, sizeof(ipcOutVpssPrm));
+    System_linkCreate(ipcInVideoId, &ipcInVideoPrm, sizeof(ipcInVideoPrm));
+    System_linkCreate(encId, &encPrm, sizeof(encPrm));
+    System_linkCreate(ipcBitsOutVideoId, &ipcBitsOutVideoPrm, sizeof(ipcBitsOutVideoPrm));
+    System_linkCreate(ipcBitsInHostId, &ipcBitsInHostPrm, sizeof(ipcBitsInHostPrm));
+
+    dup2Prm.inQueParams.prevLinkId           = dupId;
+    dup2Prm.inQueParams.prevLinkQueId        = 1;
+    dup2Prm.numOutQue                        = 2;
+    dup2Prm.outQueParams[0].nextLink         = swMsId[0];
+    dup2Prm.outQueParams[1].nextLink         = swMsId[1];
+    dup2Prm.notifyNextLink                   = TRUE;
+
+
+    for (i=0; i<2; i++) {
+        swMsPrm[i].numSwMsInst               = 1;
+        swMsPrm[i].swMsInstId[0]             = SYSTEM_SW_MS_SC_INST_SC5;
+        swMsPrm[i].inQueParams.prevLinkId    = dup2Id;
+        swMsPrm[i].inQueParams.prevLinkQueId = i;
+        swMsPrm[i].outQueParams.nextLink     = displayId[i];
+        swMsPrm[i].lineSkipMode              = FALSE;
+        swMsPrm[i].enableLayoutGridDraw      = TRUE;
+        swMsPrm[i].layoutPrm.outputFPS       = chainsCfg->chCfg[i].inFrameRate;
+        swMsPrm[i].maxInputQueLen            = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
+        swMsPrm[i].maxOutRes                 = chainsCfg->displayRes[i];
+        swMsPrm[i].numOutBuf                 = 0;
+		Chains_swMsGenerateLayoutParams(i,1,&swMsPrm[i]);
+
+		displayPrm[i].numInputQueues                = 1;
+        displayPrm[i].activeQueue                   = 0;
+        displayPrm[i].inQueParams[0].prevLinkId     = swMsId[i];
+        displayPrm[i].inQueParams[0].prevLinkQueId  = 0;
+        displayPrm[i].displayRes                    = chainsCfg->displayRes[i];
+        displayPrm[i].forceFieldSeparatedInputMode  = FALSE;
+    }
+
+    System_linkCreate(dup2Id, &dup2Prm, sizeof(dup2Prm));
+   
+	for (i=0; i<2; i++) {
+        System_linkCreate(swMsId[i], &swMsPrm[i], sizeof(swMsPrm[i]));
+        System_linkCreate(displayId[i], &displayPrm[i], sizeof(displayPrm[i]));
+    }
+
+    Chains_memPrintHeapStatus();
+
+    {
+        System_linkStart(encId);
+		Vdis_start();
+        for (i=0; i<2; i++) {
+            System_linkStart(displayId[i]);
+            System_linkStart(swMsId[i]);
+        }
+        
+		System_linkStart(dup2Id);
+        System_linkStart(dupId);
+		Vcap_init(&prm);
+		Vcap_start();
+        System_linkStart(captureId);
+
+        while(1)
+        {
+            ch = Chains_menuRunTime();
+            if(ch=='0')
+                break;
+            if(ch=='v')
+                System_linkControl(captureId, CAPTURE_LINK_CMD_FORCE_RESET, NULL, 0, TRUE);
+            if(ch=='p')
+                System_linkControl(captureId, CAPTURE_LINK_CMD_PRINT_ADV_STATISTICS, NULL, 0, TRUE);
+        }
+
+        Chains_ipcBitsStop();
+        
+		Vcap_stop();
+		System_linkStop(captureId);
+        
+		System_linkStop(dupId);
+        System_linkStop(dup2Id);
+		Vdis_stop();
+        for (i=0; i<2; i++) {
+            System_linkStop(swMsId[i]);
+            System_linkStop(displayId[i]);
+        }
+        
+		System_linkStop(encId);
+        System_linkStop(ipcBitsOutVideoId);
+        System_linkStop(ipcBitsInHostId);
+    }
+
+    System_linkDelete(captureId);
+    System_linkDelete(dupId);
+    System_linkDelete(dup2Id);
+    for (i=0; i<2; i++) {
+        System_linkDelete(swMsId[i]);
+        System_linkDelete(displayId[i]);
+    }
+    System_linkDelete(ipcOutVpssId);
+    System_linkDelete(ipcInVideoId);
+    System_linkDelete(encId);
+    System_linkDelete(ipcBitsOutVideoId);
+    System_linkDelete(ipcBitsInHostId);
+    
+	
+	Chains_ipcBitsExit();
+
+    Chains_displayCtrlDeInit();
+}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_doubleChRecvDecDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_doubleChRecvDecDis.c
new file mode 100644
index 0000000..06147f9
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_doubleChRecvDecDis.c
@@ -0,0 +1,271 @@
+/** ============================================================================
+ *
+ *  Chains_doubleChCapEncSend.c
+ *
+ *  Author     : zzx
+ *
+ *  Date       : July 19, 2014
+ *
+ *  Description:	Cap + Enc + Send
+ *
+ * 				 |->enc->send
+ *  capture->dup-|
+ *  			 |		 |->swMs0->display0
+ *  			 |->dup2-|
+ *  			 		 |->swMs1->display1
+ *  ============================================================================
+ */
+
+#include <mcfw/interfaces/ti_vcap.h>
+#include <demos/link_api_demos/common/chains.h>
+
+static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
+{
+    .isPopulated = 1,
+    .ivaMap[0] =
+    {
+        .EncNumCh  = 0,
+        .EncChList = {0},
+        .DecNumCh  = 1,
+        .DecChList = {1},
+    },
+    .ivaMap[1] =
+    {
+        .EncNumCh  = 0,
+        .EncChList = {0},
+        .DecNumCh  = 1,
+        .DecChList = {0},
+    },
+    .ivaMap[2] =
+    {
+        .EncNumCh  = 1,
+        .EncChList = {0},
+        .DecNumCh  = 2,
+        .DecChList = {2, 3},
+    },
+};
+
+
+Void Chains_doubleChRecvDecDis(Chains_Ctrl *chainsCfg)
+{
+    IpcBitsOutLinkHLOS_CreateParams   ipcBitsOutHostPrm;
+    IpcBitsInLinkRTOS_CreateParams    ipcBitsInVideoPrm;
+    DecLink_CreateParams              decPrm;
+    IpcLink_CreateParams              ipcOutVideoPrm;
+    IpcLink_CreateParams              ipcInVpssPrm;
+    SelectLink_CreateParams           selPrm;
+    SwMsLink_CreateParams             swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+    DisplayLink_CreateParams          displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+
+    UInt32 ipcBitsOutHostId;
+    UInt32 ipcBitsInVideoId;
+    UInt32 decId;
+    UInt32 ipcOutVideoId;
+    UInt32 ipcInVpssId;
+    UInt32 selId;
+    UInt32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
+    UInt32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
+
+    UInt32 i;
+    Char   ch;
+
+    CHAINS_INIT_STRUCT(IpcBitsOutLinkHLOS_CreateParams,ipcBitsOutHostPrm);
+    CHAINS_INIT_STRUCT(IpcBitsInLinkRTOS_CreateParams,ipcBitsInVideoPrm);
+    CHAINS_INIT_STRUCT(DecLink_CreateParams,decPrm);
+    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoPrm);
+    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssPrm);
+    CHAINS_INIT_STRUCT(SelectLink_CreateParams,selPrm);
+    for (i=0; i<CHAINS_SW_MS_MAX_DISPLAYS; i++) {
+        CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
+        CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
+    }
+    ipcBitsOutHostId    = SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0;
+    ipcBitsInVideoId    = SYSTEM_VIDEO_LINK_ID_IPC_BITS_IN_0;
+    decId               = SYSTEM_LINK_ID_VDEC_0;
+    ipcOutVideoId       = SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_0;
+    ipcInVpssId         = SYSTEM_VPSS_LINK_ID_IPC_IN_M3_0;
+    selId               = SYSTEM_VPSS_LINK_ID_SELECT_0;
+    swMsId[0]           = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
+    swMsId[1]           = SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
+    displayId[0]        = SYSTEM_LINK_ID_DISPLAY_0;
+    displayId[1]        = SYSTEM_LINK_ID_DISPLAY_1;
+
+    Chains_ipcBitsInit();
+    
+	System_linkControl(
+        SYSTEM_LINK_ID_M3VIDEO,
+        SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
+        &systemVid_encDecIvaChMapTbl,
+        sizeof(SystemVideo_Ivahd2ChMap_Tbl),
+        TRUE
+    );
+    
+	for(i =0;i<gChains_ctrl.chRecNum;i++)
+	{
+		gChains_ctrl.chCfg[i+gChains_ctrl.chCapNum].channel = i;
+	}
+
+
+	for(i = chainsCfg->chCapNum;i < chainsCfg->chNum; i++)
+	{
+		chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
+	}
+
+	Chains_displayCtrlInit(chainsCfg->displayRes);
+    
+	System_LinkQueInfo queInfo;
+    queInfo.numCh = chainsCfg->chNum;
+	
+	for (i=0; i<chainsCfg->chRecNum; i++) {
+		queInfo.chInfo[i].bufType           = SYSTEM_BUF_TYPE_VIDBITSTREAM;
+		queInfo.chInfo[i].codingformat      = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
+		queInfo.chInfo[i].height            = chainsCfg->chCfg[i + chainsCfg->chCapNum].outHeight;
+		queInfo.chInfo[i].width             = chainsCfg->chCfg[i + chainsCfg->chCapNum].outWidth;
+		queInfo.chInfo[i].memType           = SYSTEM_MT_TILEDMEM;
+		queInfo.chInfo[i].dataFormat        = SYSTEM_DF_YUV420P;
+		queInfo.chInfo[i].scanFormat        = SYSTEM_SF_PROGRESSIVE;
+	}
+
+	ipcBitsOutHostPrm.baseCreateParams.numOutQue                    = 1;
+	ipcBitsOutHostPrm.baseCreateParams.numChPerOutQue[0]            = chainsCfg->chRecNum;
+	ipcBitsOutHostPrm.baseCreateParams.outQueParams[0].nextLink     = ipcBitsInVideoId;
+	Chains_ipcBitsInitCreateParams_BitsOutHLOS(&ipcBitsOutHostPrm, &queInfo);
+
+	ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkId       = ipcBitsOutHostId;
+	ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkQueId    = 0;
+	ipcBitsInVideoPrm.baseCreateParams.numOutQue                    = 1;
+	ipcBitsInVideoPrm.baseCreateParams.numChPerOutQue[0]            = chainsCfg->chRecNum;
+	ipcBitsInVideoPrm.baseCreateParams.outQueParams[0].nextLink     = decId;
+	Chains_ipcBitsInitCreateParams_BitsInRTOS(&ipcBitsInVideoPrm, TRUE);
+
+	for (i=0; i<chainsCfg->chRecNum; i++) {
+		decPrm.chCreateParams[i].format                               = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFormat;
+		decPrm.chCreateParams[i].profile                              = IH264VDEC_PROFILE_ANY;
+		decPrm.chCreateParams[i].targetMaxWidth                       = chainsCfg->chCfg[i + chainsCfg->chCapNum].outWidth;
+		decPrm.chCreateParams[i].targetMaxHeight                      = chainsCfg->chCfg[i + chainsCfg->chCapNum].outHeight;
+		decPrm.chCreateParams[i].fieldMergeDecodeEnable               = FALSE;
+		decPrm.chCreateParams[i].algCreateStatus                      = DEC_LINK_ALG_CREATE_STATUS_CREATE;
+		decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = chainsCfg->chCfg[i + chainsCfg->chCapNum].encFrameRate;
+		decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate   = chainsCfg->chCfg[i + chainsCfg->chCapNum].bitRate;
+		decPrm.chCreateParams[i].numBufPerCh                          = 0;
+		decPrm.chCreateParams[i].tilerEnable                          = TRUE;
+	}
+
+	decPrm.inQueParams.prevLinkId    = ipcBitsInVideoId;
+	decPrm.inQueParams.prevLinkQueId = 0;
+	decPrm.outQueParams.nextLink     = ipcOutVideoId;
+
+    ipcOutVideoPrm.inQueParams.prevLinkId    = decId;
+    ipcOutVideoPrm.inQueParams.prevLinkQueId = 0;
+    ipcOutVideoPrm.numOutQue                 = 1;
+    ipcOutVideoPrm.outQueParams[0].nextLink  = ipcInVpssId;
+    ipcOutVideoPrm.notifyNextLink            = TRUE;
+    ipcOutVideoPrm.notifyPrevLink            = FALSE;
+    ipcOutVideoPrm.noNotifyMode              = FALSE;
+
+    ipcInVpssPrm.inQueParams.prevLinkId      = ipcOutVideoId;
+    ipcInVpssPrm.inQueParams.prevLinkQueId   = 0;
+    ipcInVpssPrm.numOutQue                   = 1;
+    ipcInVpssPrm.outQueParams[0].nextLink    = selId;
+    ipcInVpssPrm.notifyNextLink              = TRUE;
+    ipcInVpssPrm.notifyPrevLink              = TRUE;
+    ipcInVpssPrm.noNotifyMode                = FALSE;
+
+    selPrm.inQueParams.prevLinkId       = ipcInVpssId;
+    selPrm.inQueParams.prevLinkQueId    = 0;
+    selPrm.numOutQue                    = 2;
+    selPrm.outQueParams[0].nextLink     = swMsId[0];
+    selPrm.outQueChInfo[0].outQueId     = 0;
+    selPrm.outQueChInfo[0].numOutCh     = 1;
+    selPrm.outQueChInfo[0].inChNum[0]   = 0;
+    selPrm.outQueParams[1].nextLink     = swMsId[1];
+    selPrm.outQueChInfo[1].outQueId     = 1;
+    selPrm.outQueChInfo[1].numOutCh     = 1;
+    selPrm.outQueChInfo[1].inChNum[0]   = 1;
+
+    for (i=0; i<chainsCfg->chNum; i++) {
+        swMsPrm[i].numSwMsInst               = 1;
+        swMsPrm[i].swMsInstId[0]             = (i==0) ? SYSTEM_SW_MS_SC_INST_VIP1_SC : SYSTEM_SW_MS_SC_INST_DEI_SC_NO_DEI;
+        swMsPrm[i].inQueParams.prevLinkId    = selId;
+        swMsPrm[i].inQueParams.prevLinkQueId = i;
+        swMsPrm[i].outQueParams.nextLink     = displayId[i];
+        swMsPrm[i].lineSkipMode              = FALSE;
+        swMsPrm[i].enableLayoutGridDraw      = TRUE;
+        swMsPrm[i].layoutPrm.outputFPS       = chainsCfg->chCfg[i].outFrameRate;
+        swMsPrm[i].maxInputQueLen            = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
+        swMsPrm[i].maxOutRes                 = chainsCfg->displayRes[i];
+        swMsPrm[i].numOutBuf                 = 0;
+        Chains_swMsGenerateLayoutParams(0, 2, &swMsPrm[i]);
+
+        displayPrm[i].numInputQueues                = 1;
+        displayPrm[i].activeQueue                   = 0;
+        displayPrm[i].inQueParams[0].prevLinkId     = swMsId[i];
+        displayPrm[i].inQueParams[0].prevLinkQueId  = 0;
+        displayPrm[i].displayRes                    = chainsCfg->displayRes[i];
+        displayPrm[i].forceFieldSeparatedInputMode  = FALSE;
+
+        //chains_avsync_set_avs_params(0, swMsId[i], displayId[i], chainsCfg->chNum);
+    }
+
+	System_linkCreate(ipcBitsOutHostId,&ipcBitsOutHostPrm,sizeof(ipcBitsOutHostPrm));
+	System_linkCreate(ipcBitsInVideoId,&ipcBitsInVideoPrm,sizeof(ipcBitsInVideoPrm));
+	System_linkCreate(decId, &decPrm, sizeof(decPrm));
+	System_linkCreate(ipcOutVideoId, &ipcOutVideoPrm, sizeof(ipcOutVideoPrm));
+	System_linkCreate(ipcInVpssId, &ipcInVpssPrm, sizeof(ipcInVpssPrm));
+	System_linkCreate(selId, &selPrm, sizeof(selPrm));
+	for (i=0; i<chainsCfg->chNum; i++) {
+		System_linkCreate(swMsId[i], &swMsPrm[i], sizeof(swMsPrm[i]));
+		System_linkCreate(displayId[i], &displayPrm[i], sizeof(displayPrm[i]));
+	}
+
+
+	Vdis_start();
+	for (i=0; i<chainsCfg->chNum; i++) 
+	{
+		System_linkStart(displayId[i]);
+		System_linkStart(swMsId[i]);
+	}
+	
+	System_linkStart(selId);
+	System_linkStart(ipcInVpssId);
+	System_linkStart(ipcOutVideoId);
+	System_linkStart(decId);
+	System_linkStart(ipcBitsInVideoId);
+	System_linkStart(ipcBitsOutHostId);
+
+	while(1)
+	{
+		ch = Chains_menuRunTime();
+		if(ch=='0')
+			break;
+	}
+
+	Chains_ipcBitsStop();
+
+	System_linkStop(ipcBitsOutHostId);
+	System_linkStop(ipcBitsInVideoId);
+	System_linkStop(decId);
+	System_linkStop(ipcOutVideoId);
+	System_linkStop(ipcInVpssId);
+	System_linkStop(selId);
+	Vdis_stop();
+	for (i=0; i<chainsCfg->chNum; i++) {
+		System_linkStop(swMsId[i]);
+		System_linkStop(displayId[i]);
+	}
+
+	System_linkDelete(ipcBitsOutHostId);
+	System_linkDelete(ipcBitsInVideoId);
+	System_linkDelete(decId);
+	System_linkDelete(ipcOutVideoId);
+	System_linkDelete(ipcInVpssId);
+	System_linkDelete(selId);
+	for (i=0; i<chainsCfg->chNum; i++) {
+		System_linkDelete(swMsId[i]);
+		System_linkDelete(displayId[i]);
+	}
+
+	Chains_displayCtrlDeInit();
+	
+	Chains_ipcBitsExit();
+}
diff --git a/dvr_rdk/demos/link_api_demos/chains/chains_singleChCapOsdDis.c b/dvr_rdk/demos/link_api_demos/chains/chains_singleChCapOsdDis.c
new file mode 100644
index 0000000..392c38f
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/chains/chains_singleChCapOsdDis.c
@@ -0,0 +1,361 @@
+/** ============================================================================
+ *
+ *  chains_CapSwMsDis.c
+ *
+ *  Author     : zzx
+ *
+ *  Date       : June 25, 2013
+ *
+ *  Description:	Cap + SwMs + Dis
+ *
+ *  capture->swMs->display
+ *  ============================================================================
+ */
+
+/*  --------------------- Include user headers   ---------------------------- */
+
+#include <mcfw/interfaces/ti_vcap.h>
+#include <demos/link_api_demos/common/chains.h>
+#include <demos/link_api_demos/common/ti_swosd_logo_224x30_yuv422i.h>
+
+/*
+ *  --------------------- Macro definition -------------------------------------
+ */
+
+#define LOGO_WINID                  (0)
+#define DATE_WINID                  (1)
+#define TIME_WINID                  (2)
+#define CHANNEL_NAME_WINID          (3)
+
+
+
+Void Chains_singleChCapOsdDis(Chains_Ctrl *chainsCfg)
+{
+
+	CaptureLink_CreateParams	capturePrm;
+	CaptureLink_VipInstParams	*pCaptureInstPrm;
+	CaptureLink_OutParams       *pCaptureOutPrm;
+	IpcFramesOutLinkRTOS_CreateParams   ipcFramesOutVpssPrm;
+	IpcFramesInLinkRTOS_CreateParams    ipcFramesInDspPrm;
+	AlgLink_CreateParams      	osdPrm;
+
+	DupLink_CreateParams                dupPrm;
+	SwMsLink_CreateParams		swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+	DisplayLink_CreateParams	displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
+
+	Uint32 captureId,vipInstId;
+	Uint32 ipcFramesOutVpssId;
+	Uint32 ipcFramesInDspId;
+	UInt32 osdId;
+	UInt32 dupId;
+	Uint32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
+	Uint32 i,j;
+
+	Ptr osdWinSrAddr[ALG_LINK_OSD_MAX_CH][CHAINS_OSD_NUM_WINDOWS];
+	Ptr osdWinBuPtr[ALG_LINK_OSD_MAX_CH][CHAINS_OSD_NUM_WINDOWS];
+
+
+	CHAINS_INIT_STRUCT(CaptureLink_CreateParams,capturePrm);
+	CHAINS_INIT_STRUCT(IpcFramesOutLinkRTOS_CreateParams,ipcFramesOutVpssPrm);
+	CHAINS_INIT_STRUCT(IpcFramesInLinkRTOS_CreateParams,ipcFramesInDspPrm);
+	CHAINS_INIT_STRUCT(AlgLink_CreateParams,osdPrm);
+
+	for(i = 0; i < CHAINS_SW_MS_MAX_DISPLAYS; i++)
+	{
+		CHAINS_INIT_STRUCT(SwMsLink_CreateParams,swMsPrm[i]);
+		CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
+
+	}
+	captureId 		= SYSTEM_LINK_ID_CAPTURE;
+	ipcFramesOutVpssId = SYSTEM_VPSS_LINK_ID_IPC_FRAMES_OUT_0;
+	ipcFramesInDspId   = SYSTEM_DSP_LINK_ID_IPC_FRAMES_IN_0;
+	osdId     		= SYSTEM_LINK_ID_ALG_0;
+	dupId         	=SYSTEM_VPSS_LINK_ID_DUP_0;
+	swMsId[0] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
+	swMsId[1] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
+	swMsId[2] 		= SYSTEM_LINK_ID_SW_MS_MULTI_INST_2;
+	displayId[0]	= SYSTEM_LINK_ID_DISPLAY_0;
+	displayId[1]	= SYSTEM_LINK_ID_DISPLAY_1;
+	displayId[2]	= SYSTEM_LINK_ID_DISPLAY_2;
+
+
+
+	for(i = 0; i < gChains_ctrl.chRecNum; i++)
+	{
+		gChains_ctrl.chCfg[i + gChains_ctrl.chCapNum].channel = i;
+
+	}
+
+	/* capture + swMs + display */
+
+	VCAP_PARAMS_S  prm;
+	Vcap_params_init(&prm);
+	if(chainsCfg->chCapNum > 0)
+	{
+		capturePrm.numVipInst 				= chainsCfg->chCapNum;
+		capturePrm.tilerEnable              = FALSE;
+		capturePrm.numBufsPerCh             = 16;
+		capturePrm.numExtraBufs             = 0;
+		capturePrm.maxBlindAreasPerCh       = 0;
+		capturePrm.isPalMode                = FALSE;
+		capturePrm.enableSdCrop             = FALSE;
+		capturePrm.doCropInCapture          = FALSE;
+
+		for(i = 0; i< capturePrm.numVipInst; i++)
+		{
+			
+#if defined(TI816X_ETVH)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+#endif
+#if defined(TI816X_ETVS)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 1 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_8BIT;
+			pCaptureInstPrm->videoCaptureMode	= SYSTEM_CAPT_VIDEO_CAPTURE_MODE_SINGLE_CH_NON_MUX_DISCRETE_SYNC_ACTVID_VSYNC;
+#endif
+#if defined(TI8107_INS)
+			vipInstId =	SYSTEM_CAPTURE_INST_VIP0_PORTA + 2 * gChains_ctrl.chCfg[i].channel;
+			pCaptureInstPrm						= &capturePrm.vipInst[i];
+			pCaptureInstPrm->videoIfMode		= SYSTEM_CAPT_VIDEO_IF_MODE_16BIT;
+#endif
+
+			prm.channelParams[i].deviceId		= vipInstId;
+			prm.enableConfigExtVideoDecoder 	= TRUE;
+			prm.deviceParams[vipInstId].standard	= chainsCfg->chCfg[i].inStd;
+
+			pCaptureInstPrm->vipInstId			= vipInstId%SYSTEM_CAPTURE_INST_MAX;
+			pCaptureInstPrm->inScanFormat		= SYSTEM_SF_PROGRESSIVE;
+			pCaptureInstPrm->inDataFormat		= SYSTEM_DF_YUV422P;
+			pCaptureInstPrm->standard			= chainsCfg->chCfg[i].inStd;
+			pCaptureInstPrm->numOutput			= 1;
+
+			pCaptureOutPrm						= &pCaptureInstPrm->outParams[0];
+			pCaptureOutPrm->dataFormat			= SYSTEM_DF_YUV422I_YUYV;
+			pCaptureOutPrm->scEnable			= FALSE;
+			pCaptureOutPrm->outQueId			= 0;
+
+			capturePrm.outQueParams[0].nextLink	= ipcFramesOutVpssId;
+		}
+	}
+
+
+	ipcFramesOutVpssPrm.baseCreateParams.inQueParams.prevLinkId     = captureId;
+	ipcFramesOutVpssPrm.baseCreateParams.inQueParams.prevLinkQueId  = 0;
+	ipcFramesOutVpssPrm.baseCreateParams.notifyPrevLink             = FALSE;
+
+	ipcFramesOutVpssPrm.baseCreateParams.numOutQue                  = 1;
+	ipcFramesOutVpssPrm.baseCreateParams.outQueParams[0].nextLink   = dupId;
+	ipcFramesOutVpssPrm.baseCreateParams.notifyNextLink             = TRUE;
+
+	ipcFramesOutVpssPrm.baseCreateParams.processLink                = ipcFramesInDspId;
+	ipcFramesOutVpssPrm.baseCreateParams.notifyProcessLink          = TRUE;
+	ipcFramesOutVpssPrm.baseCreateParams.noNotifyMode               = FALSE;
+
+	ipcFramesInDspPrm.baseCreateParams.inQueParams.prevLinkId       = ipcFramesOutVpssId;
+	ipcFramesInDspPrm.baseCreateParams.inQueParams.prevLinkQueId    = 0;
+	ipcFramesInDspPrm.baseCreateParams.numOutQue                    = 1;
+	ipcFramesInDspPrm.baseCreateParams.outQueParams[0].nextLink     = osdId;
+	ipcFramesInDspPrm.baseCreateParams.notifyPrevLink               = FALSE;
+	ipcFramesInDspPrm.baseCreateParams.notifyNextLink               = TRUE;
+	ipcFramesInDspPrm.baseCreateParams.noNotifyMode                 = FALSE;
+
+	osdPrm.enableOSDAlg                     = TRUE;
+	osdPrm.enableSCDAlg                     = FALSE;
+	osdPrm.inQueParams.prevLinkId           = ipcFramesInDspId;
+	osdPrm.inQueParams.prevLinkQueId        = 0;
+
+	for(i=0; i<1; i++)//numWindows
+	{
+		/* set osd window max width and height */
+		osdPrm.osdChCreateParams[i].maxWidth    = CHAINS_OSD_WIN_MAX_WIDTH;
+		osdPrm.osdChCreateParams[i].maxHeight   = CHAINS_OSD_WIN_MAX_HEIGHT;
+
+		/* set osd window params */
+		AlgLink_OsdChWinParams * chWinPrm       = &osdPrm.osdChCreateParams[i].chDefaultParams;
+
+		chWinPrm->chId                          = i;
+		chWinPrm->numWindows                    = CHAINS_OSD_NUM_WINDOWS;
+
+		chWinPrm->colorKey[0]                   = 0xfa; /* Y */
+		chWinPrm->colorKey[1]                   = 0x7e; /* U */
+		chWinPrm->colorKey[2]                   = 0x7d; /* V */
+
+		
+		for(j=0; j < chWinPrm->numWindows; j++)
+		{
+			Chains_createBuf(&chWinPrm->winPrm[j].addr[0][0],
+					&osdWinBuPtr[i][j], &osdWinSrAddr[i][j], CHAINS_OSD_WIN_MAX_WIDTH *
+					CHAINS_OSD_WIN_MAX_HEIGHT*2, SYSTEM_IPC_SR_NON_CACHED_DEFAULT);
+
+			unsigned char *tmp = (unsigned char *)osdWinBuPtr[0][j];
+			int k;
+			for(k = 0; k < (CHAINS_OSD_WIN_MAX_WIDTH * CHAINS_OSD_WIN_MAX_HEIGHT *2); k++)
+			{
+				if(k % 4 == 0 || k % 4 == 2)
+					tmp[k] = 0xfa;
+				if(k % 4 == 1)
+					tmp[k] = 0x7e;
+				if(k % 4 == 3)
+					tmp[k] = 0x7d;
+
+			}
+
+			chWinPrm->winPrm[j].startX             = CHAINS_OSD_WIN0_STARTX;
+			chWinPrm->winPrm[j].startY             = CHAINS_OSD_WIN0_STARTY + (CHAINS_OSD_WIN_HEIGHT + CHAINS_OSD_WIN0_STARTY)*j;
+			chWinPrm->winPrm[j].format             = SYSTEM_DF_YUV422I_YUYV;
+			chWinPrm->winPrm[j].width              = CHAINS_OSD_WIN_WIDTH;
+			chWinPrm->winPrm[j].height             = CHAINS_OSD_WIN_HEIGHT;
+			chWinPrm->winPrm[j].lineOffset         = CHAINS_OSD_WIN_PITCH;
+			chWinPrm->winPrm[j].globalAlpha        = CHAINS_OSD_GLOBAL_ALPHA;
+			chWinPrm->winPrm[j].transperencyEnable = CHAINS_OSD_TRANSPARENCY;
+			chWinPrm->winPrm[j].enableWin          = CHAINS_OSD_ENABLE_WIN;
+
+			
+			if(j == LOGO_WINID)
+			{
+				memcpy(osdWinBuPtr[i][j], gMCFW_swosdTiLogoYuv422i, sizeof(gMCFW_swosdTiLogoYuv422i));
+			}
+		}
+
+	}
+
+
+
+
+
+
+	/*********************************************************************/
+	dupPrm.inQueParams.prevLinkId           = ipcFramesOutVpssId;
+	dupPrm.inQueParams.prevLinkQueId        = 0;
+	dupPrm.numOutQue                        = chainsCfg->chRecNum;
+	dupPrm.outQueParams[0].nextLink         = swMsId[0];
+	dupPrm.outQueParams[1].nextLink         = swMsId[1];
+	dupPrm.notifyNextLink                   = TRUE;
+
+	if(chainsCfg->chRecNum > 0)
+	{
+
+		for(i = chainsCfg->chCapNum; i < chainsCfg->chNum; i++)
+		{
+			chainsCfg->displayRes[i - chainsCfg->chCapNum] = chainsCfg->displayRes[i];
+		}
+		
+		Chains_displayCtrlInit(chainsCfg->displayRes);
+
+		for(i = 0; i< chainsCfg->chRecNum; i++)
+		{
+			swMsPrm[i].numSwMsInst					= 1;
+			swMsPrm[i].swMsInstId[0]				= (0 == i)? SYSTEM_SW_MS_SC_INST_DEIHQ_SC_NO_DEI: SYSTEM_SW_MS_SC_INST_DEI_SC_NO_DEI;
+			swMsPrm[i].inQueParams.prevLinkId		= dupId;
+			swMsPrm[i].inQueParams.prevLinkQueId	= i;
+			swMsPrm[i].outQueParams.nextLink		= displayId[i];
+			swMsPrm[i].lineSkipMode					= FALSE;
+			swMsPrm[i].enableLayoutGridDraw			= TRUE;
+			swMsPrm[i].layoutPrm.outputFPS			= chainsCfg->chCfg[i + chainsCfg->chCapNum].outFrameRate;
+			swMsPrm[i].maxInputQueLen				= SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
+			swMsPrm[i].maxOutRes					= chainsCfg->displayRes[i];
+
+			Chains_swMsGenerateLayoutParams(i,2,&swMsPrm[i]);
+
+			displayPrm[i].numInputQueues				= 1;
+			displayPrm[i].activeQueue					= 0;
+			displayPrm[i].inQueParams[0].prevLinkId		= swMsId[i];
+			displayPrm[i].inQueParams[0].prevLinkQueId	= 0;
+			displayPrm[i].displayRes					= chainsCfg->displayRes[i];
+
+
+		}
+	}
+	/* links create */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkCreate(captureId, &capturePrm,sizeof(capturePrm));
+		System_linkCreate(ipcFramesOutVpssId, &ipcFramesOutVpssPrm, sizeof(ipcFramesOutVpssPrm));
+		System_linkCreate(ipcFramesInDspId, &ipcFramesInDspPrm, sizeof(ipcFramesInDspPrm));
+		System_linkCreate(osdId, &osdPrm, sizeof(osdPrm));
+	}
+
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkCreate(dupId, &dupPrm, sizeof(dupPrm));
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkCreate(swMsId[i],&swMsPrm[i],sizeof(swMsPrm[i]));
+			System_linkCreate(displayId[i],&displayPrm[i],sizeof(displayPrm[i]));
+		}
+	}
+
+	/* links start */
+	if(chainsCfg->chRecNum > 0)
+	{
+		Vdis_start();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStart(displayId[i]);
+			System_linkStart(swMsId[i]);
+		}
+		System_linkStart(dupId);
+	}
+
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkStart(osdId);
+		System_linkStart(ipcFramesInDspId);
+		System_linkStart(ipcFramesOutVpssId);
+		Vcap_init(&prm);
+		Vcap_start();
+		System_linkStart(captureId);
+	}
+
+	while(1)
+	{
+		char ch;
+		ch = Chains_menuRunTime();
+		if(ch=='0')
+			break;
+	}
+
+	
+	/* links stop */
+	if(chainsCfg->chCapNum > 0)
+	{
+		Vcap_stop();
+		System_linkStop(captureId);
+		System_linkStop(ipcFramesOutVpssId);
+		System_linkStop(ipcFramesInDspId);
+		System_linkStop(osdId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		System_linkStop(dupId);
+		Vdis_stop();
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkStop(swMsId[i]);
+			System_linkStop(displayId[i]);
+		}
+	}
+	/* links delete */
+	if(chainsCfg->chCapNum > 0)
+	{
+		System_linkDelete(captureId);
+		System_linkDelete(ipcFramesOutVpssId);
+		System_linkDelete(ipcFramesInDspId);
+		System_linkDelete(osdId);
+	}
+	if(chainsCfg->chRecNum > 0)
+	{
+		 System_linkDelete(dupId);
+		for(i = 0; i < chainsCfg->chRecNum; i++)
+		{
+			System_linkDelete(swMsId[i]);	
+			System_linkDelete(displayId[i]);	
+		}
+
+		Chains_displayCtrlDeInit();
+	}
+
+}
diff --git a/dvr_rdk/demos/link_api_demos/common/MAKEFILE.MK b/dvr_rdk/demos/link_api_demos/common/MAKEFILE.MK
index fb61c54..07ca61e 100755
--- a/dvr_rdk/demos/link_api_demos/common/MAKEFILE.MK
+++ b/dvr_rdk/demos/link_api_demos/common/MAKEFILE.MK
@@ -3,7 +3,7 @@ include $(dvr_rdk_PATH)/makerules/common_header_a8.mk
 
 INCLUDE+= $(MCFW_INC) $(OSA_INC) $(SYSLINK_INC) $(CODEC_INC)
 
-LIBS=$(LIB_DIR)/dvr_rdk_demo_link_api.a $(MCFW_LIBS) $(AUDIO_LIBS)
+LIBS=$(LIB_DIR)/dvr_rdk_demo_link_api.a $(MCFW_LIBS) $(RPE_LIBS) 
 
 include $(dvr_rdk_PATH)/makerules/common_footer_a8.mk
 
diff --git a/dvr_rdk/demos/link_api_demos/common/chains.h b/dvr_rdk/demos/link_api_demos/common/chains.h
old mode 100755
new mode 100644
index 6a941b3..4e3f947
--- a/dvr_rdk/demos/link_api_demos/common/chains.h
+++ b/dvr_rdk/demos/link_api_demos/common/chains.h
@@ -12,6 +12,7 @@
 #include <osa.h>
 
 #include <link_api/system.h>
+#include <link_api/system_common.h>
 #include <link_api/captureLink.h>
 #include <link_api/deiLink.h>
 #include <link_api/nsfLink.h>
@@ -28,10 +29,14 @@
 #include <link_api/systemLink_m3video.h>
 #include <link_api/encLink.h>
 #include <link_api/decLink.h>
+#include <link_api/selectLink.h>
+
 
 
 #include <demos/link_api_demos/common/chains_swMs.h>
 #include <demos/link_api_demos/common/chains_ipcBits.h>
+#include <demos/link_api_demos/common/chains_common.h>
+#include <demos/link_api_demos/common/chains_avsync.h>
 
 #include <demos/graphic/graphic.h>
 
@@ -43,13 +48,13 @@
 
 #define CHAINS_OSD_NUM_WINDOWS      (1)
 #define CHAINS_OSD_WIN_MAX_WIDTH    (320)
-#define CHAINS_OSD_WIN_MAX_HEIGHT   (64)
+#define CHAINS_OSD_WIN_MAX_HEIGHT   (128)
 #define CHAINS_OSD_WIN0_STARTX      (16)
 #define CHAINS_OSD_WIN0_STARTY      (32)
 #define CHAINS_OSD_WIN1_STARTX      (500)
 #define CHAINS_OSD_WIN1_STARTY      (150)
-#define CHAINS_OSD_WIN_WIDTH       (160)
-#define CHAINS_OSD_WIN_HEIGHT      (32)
+#define CHAINS_OSD_WIN_WIDTH       (224)
+#define CHAINS_OSD_WIN_HEIGHT      (30)
 #define CHAINS_OSD_WIN_PITCH       (CHAINS_OSD_WIN_WIDTH)
 #define CHAINS_OSD_TRANSPARENCY    (1)
 #define CHAINS_OSD_GLOBAL_ALPHA    (0x80)
@@ -59,6 +64,70 @@
 
 #define CHAINS_INIT_STRUCT(structName,structObj)  structName##_Init(&structObj)
 
+#define MAX_INPUT_SIZE          (32)
+
+
+typedef struct H264FileSource {
+    Char  fileName[MAX_INPUT_STR_SIZE];
+    Int32 fd;
+    UInt8 *buffer;
+    Int32 bufSize;
+    Int32 bufLen;
+    Int32 readLen;
+    Int32 curFrameIdx;
+    Int32 curFrameAddr;
+    Int32 nextFrameAddr;
+    Bool  findFirstFrame;
+} H264FileSource;
+
+typedef enum TransferProtocol {
+    TRANSFER_PROTOCOL_NONE,
+    TRANSFER_PROTOCOL_TCP,
+    TRANSFER_PROTOCOL_RTSP,
+    TRANSFER_PROTOCOL_TS,
+} TransferProtocol;
+
+typedef struct Chains_chCfg {
+    UInt32 channel;
+
+    UInt32 inStd;
+    UInt32 inWidth;
+    UInt32 inHeight;
+    UInt32 inFrameRate;
+    UInt32 outStd;
+    UInt32 outWidth;
+    UInt32 outHeight;
+    UInt32 outFrameRate;
+
+    volatile Bool encFlag;
+    UInt32 encFormat;
+    UInt32 encProfile;
+    UInt32 encFrameRate;
+    UInt32 intraFrameInterval;
+    UInt32 rateCtrl;
+    UInt32 bitRate;
+
+    TransferProtocol protocol;
+    Bool   serverEnable;
+    UInt32 serverFd;
+    Char   serverFileName[MAX_INPUT_STR_SIZE];
+    Char   serverCommand[MAX_INPUT_STR_SIZE];
+
+    Bool   clientEnable;
+    H264FileSource fileSource;
+    Char   clientCommand[MAX_INPUT_STR_SIZE];
+    Char   serverIp[MAX_INPUT_STR_SIZE];
+    Int16  serverPort;
+    Char   URL[MAX_INPUT_STR_SIZE];
+
+    int             m_net_connected;
+    int             m_sockfd;
+    struct timeval  m_last_time;
+    struct timeval  m_curr_time;
+    struct timeval  m_sub_time;
+} Chains_chCfg;
+
+
 typedef struct {
 
     /* Enable NSF during chain */
@@ -74,14 +143,44 @@ typedef struct {
     */
     Bool bypassNsf;
 
-    UInt32 displayRes[SYSTEM_DC_MAX_VENC];
+ 	UInt32 displayRes[MAX_CHANNEL_NUMBER];
+	
+	UInt32 chNum;
+	UInt32 chCapNum;
+	UInt32 chRecNum;
+	Chains_chCfg chCfg[MAX_CHANNEL_NUMBER];
+
 
 } Chains_Ctrl;
 
+extern Chains_Ctrl gChains_ctrl;
+
 typedef Void (*Chains_RunFunc)();
 
 Void Chains_main();
 
+/* TODO */
+Void Chains_CapDis(Chains_Ctrl *chainsCfg);
+Void Chains_CapSwMsDis(Chains_Ctrl *chainsCfg);
+Void Chains_doubleChCapEncSend(Chains_Ctrl *chainsCfg);
+Void Chains_doubleChRecvDecDis(Chains_Ctrl *chainsCfg);
+Void Chains_SelCapNsfEncDecSwMsDis(Chains_Ctrl *chainsCfg);
+Void Chains_RecvOneDecDis(Chains_Ctrl *chainsCfg);
+Void Chains_RecvFourDecSwMsDis(Chains_Ctrl *chainsCfg);
+Void Chains_CapEncDecDis(Chains_Ctrl *chainsCfg);
+Void Chains_SelCapSelRecv(Chains_Ctrl *chainsCfg);
+Void Chains_singleChCapOsdDis(Chains_Ctrl *chainsCfg);
+
+
+char Chains_CapSwMsDisMenu();
+char Chains_RecvOneDecDisMenu();
+char Chains_RecvFourDecSwMsDisMenu();
+char Chains_CapRecvFourDecSwMsDisMenu();
+
+
+
+
+
 Void Chains_multiChCaptureNsfDei(Chains_Ctrl *chainsCfg);
 Void Chains_multiChSystemUseCaseSwMsTriDisplay(Chains_Ctrl *chainsCfg);
 Void Chains_multiChSystemUseCaseSwMsTriDisplay2(Chains_Ctrl *chainsCfg);
@@ -112,7 +211,6 @@ Int32 Chains_detectBoard();
 
 Int32 Chains_displayCtrlInit(UInt32 displayRes[]);
 Int32 Chains_displayCtrlDeInit();
-Int32 Chains_grpxEnable(UInt32 grpxId, Bool enable);
 Int32 Chains_prfLoadCalcEnable(Bool enable, Bool printStatus, Bool printTskLoad);
 Int32 Chains_memPrintHeapStatus();
 
diff --git a/dvr_rdk/demos/link_api_demos/common/chains_avsync.c b/dvr_rdk/demos/link_api_demos/common/chains_avsync.c
new file mode 100644
index 0000000..7636590
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/common/chains_avsync.c
@@ -0,0 +1,185 @@
+/** ============================================================================
+ *
+ *  chains_avsync.c
+ *
+ *  Author     : 
+ *
+ *  Date       : Feb 22, 2013
+ *
+ *  Description: 
+ *  ============================================================================
+ */
+
+/*  --------------------- Include system headers ---------------------------- */
+
+/*  --------------------- Include user headers   ---------------------------- */
+#include "chains_avsync.h"
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+/*
+ *  --------------------- Macro definition -------------------------------------
+ */
+
+/** ============================================================================
+ *  @Macro:         Macro name
+ *
+ *  @Description:   Description of this macro.
+ *  ============================================================================
+ */
+
+/*
+ *  --------------------- Structure definition ---------------------------------
+ */
+
+/** ----------------------------------------------------------------------------
+ *  @Name:          Structure name
+ *
+ *  @Description:   Description of the structure.
+ *
+ *  @Field:         Field1 member
+ *
+ *  @Field          Field2 member
+ *  ----------------------------------------------------------------------------
+ */
+
+/*
+ *  --------------------- Global variable definition ---------------------------
+ */
+
+/** ----------------------------------------------------------------------------
+ *  @Name:          Variable name
+ *
+ *  @Description:   Description of the variable.
+ * -----------------------------------------------------------------------------
+ */
+static  AvsyncLink_LinkSynchConfigParams m_avs_cfgs[CHAINS_VDIS_DEV_MAX];
+
+/*
+ *  --------------------- Local function forward declaration -------------------
+ */
+static void
+chains_avsync_set_avs_vidque_params(Avsync_SynchConfigParams *que_cfg,
+        int chnum, unsigned int start_chnum, unsigned int end_chnum);
+
+
+/*
+ *  --------------------- Public function definition ---------------------------
+ */
+Int32
+chains_avsync_set_avs_params(unsigned int avs_id, 
+        unsigned int swms_id, unsigned int disp_id, unsigned int chn_nums)
+{
+    int i;
+    int status = 0;
+    AvsyncLink_LinkSynchConfigParams * avs_prm = NULL;
+
+    fprintf(stderr, "chains_avsync_set_avs_params: Enter(avs_id=%d, "
+            "swms_id=%d, disp_id=%d, chn_nums=%d).\n",
+            avs_id, swms_id, disp_id, chn_nums);
+
+    if (avs_id < 0 || avs_id >= CHAINS_VDIS_DEV_MAX) {
+        fprintf(stderr, "chains_avsync_set_avs_params:  Invalid arguments.\n");
+        return -1;
+    }
+
+    avs_prm = &m_avs_cfgs[avs_id];
+
+    AvsyncLink_LinkSynchConfigParams_Init(avs_prm);
+
+    avs_prm->audioDevId = 0;
+    avs_prm->displayLinkID = disp_id;
+    avs_prm->videoSynchLinkID = swms_id;
+    avs_prm->numCh = chn_nums;
+    //avs_prm->syncMasterChnum = AVSYNC_INVALID_CHNUM;
+    avs_prm->syncMasterChnum = 0; // avs_prm->numCh;
+
+    for (i = 0; i < avs_prm->numCh; i++) {
+        chains_avsync_set_avs_vidque_params(&avs_prm->queCfg[i],
+                            i, 0, (0 + chn_nums));
+    }
+
+    status = Avsync_configSyncConfigInfo(avs_prm);
+    OSA_assert(status == 0);
+
+    fprintf(stderr, "chains_avsync_set_avs_params: Leave(status=0x%x).\n",
+            status);
+    return status;
+}
+
+Int32
+chains_avsync_set_chn_player_state_play(unsigned int disp_id,
+                                unsigned int chn_id,
+                                UInt32 seqId)
+{
+    Int32 status = OSA_SOK;
+    Avsync_PlayParams playParams;
+
+    playParams.displayLinkID = disp_id;
+    playParams.chNum         = chn_id;
+    playParams.displaySeqId  = seqId;
+
+    status = Avsync_doPlay(&playParams);
+
+    return status;
+}
+
+Int32
+chains_avsync_set_walltimebase(uint64_t walltimebase)
+{
+    Int32 status = OSA_SOK;
+
+    status = Avsync_setWallTimeBase((UInt64)walltimebase);
+
+    return status;
+}
+
+/*
+ *  --------------------- Local function definition ----------------------------
+ */
+static void
+chains_avsync_set_avs_vidque_params(Avsync_SynchConfigParams *que_cfg,
+        int chnum, unsigned int start_chnum, unsigned int end_chnum)
+{
+    que_cfg->chNum = chnum;
+
+    que_cfg->audioPresent = FALSE;
+    que_cfg->videoPresent = FALSE;
+
+    if (que_cfg->chNum == 0) {
+        //que_cfg->audioPresent = TRUE;
+        que_cfg->videoPresent = TRUE;
+    } 
+
+    if (que_cfg->chNum == 1) {
+        que_cfg->videoPresent = TRUE;
+        //que_cfg->audioPresent = TRUE;
+    }
+
+    if (que_cfg->chNum >= start_chnum && que_cfg->chNum <= end_chnum) {
+        que_cfg->avsyncEnable = TRUE;
+    } else {
+        que_cfg->avsyncEnable = FALSE;
+    }
+
+
+    que_cfg->clkAdjustPolicy.refClkType = AVSYNC_REFCLKADJUST_NONE;
+    que_cfg->clkAdjustPolicy.clkAdjustLead = AVSYNC_VIDEO_TIMEBASESHIFT_MAX_LEAD_MS;
+    que_cfg->clkAdjustPolicy.clkAdjustLag  = AVSYNC_VIDEO_TIMEBASESHIFT_MAX_LAG_MS;
+    que_cfg->vidSynchPolicy.maxReplayLead  = AVSYNC_VIDEO_FUTURE_FRAME_DROP_THRESHOLD_MS;
+    que_cfg->vidSynchPolicy.playMaxLag  = 750;
+    que_cfg->vidSynchPolicy.playMaxLead = 750;
+    que_cfg->vidSynchPolicy.doMarginScaling = FALSE;
+    que_cfg->playTimerStartTimeout = 1000000;
+    que_cfg->playStartMode = AVSYNC_PLAYBACK_START_MODE_WAITSYNCH;
+    //que_cfg->playStartMode = AVSYNC_PLAYBACK_START_MODE_PLAYUNSYNCH,
+    que_cfg->ptsInitMode   = AVSYNC_PTS_INIT_MODE_AUTO;
+    //que_cfg->blockOnAudioGet = TRUE;
+
+}
+
+#if defined(__cplusplus)
+}
+#endif
diff --git a/dvr_rdk/demos/link_api_demos/common/chains_avsync.h b/dvr_rdk/demos/link_api_demos/common/chains_avsync.h
new file mode 100644
index 0000000..3492e9b
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/common/chains_avsync.h
@@ -0,0 +1,68 @@
+/** ============================================================================
+ *
+ *  chains_avsync.h
+ *
+ *  Author     : 
+ *
+ *  Date       : Feb 22, 2013
+ *
+ *  Description: 
+ *  ============================================================================
+ */
+
+#if !defined (__CHAINS_AVSYNC_H)
+#define __CHAINS_AVSYNC_H
+
+/*  --------------------- Include system headers ---------------------------- */
+
+/*  --------------------- Include user headers   ---------------------------- */
+#include <link_api/avsync_hlos.h>
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+/*
+ *  --------------------- Macro definition -------------------------------------
+ */
+
+/** ============================================================================
+ *  @Macro:         Macro name
+ *
+ *  @Description:   Description of this macro.
+ *  ============================================================================
+ */
+#define CHAINS_VDIS_DEV_MAX   (4)
+
+/*
+ *  --------------------- Data type definition ---------------------------------
+ */
+
+/** ----------------------------------------------------------------------------
+ *  @Name:          Structure name
+ *
+ *  @Description:   Description of the structure.
+ *
+ *  @Field:         Field1 member
+ *
+ *  @Field:         Field2 member
+ *  ----------------------------------------------------------------------------
+ */
+
+/*
+ *  --------------------- Public function declaration --------------------------
+ */
+Int32
+chains_avsync_set_avs_params(unsigned int avs_id, 
+        unsigned int swms_id, unsigned int disp_id, unsigned int chn_nums);
+
+Int32
+chains_avsync_set_chn_player_state_play(unsigned int disp_id,
+                                unsigned int chn_id,
+                                UInt32 seqId);
+
+#if defined(__cplusplus)
+}
+#endif  /* defined(__cplusplus) */
+
+#endif  /* if !defined (__CHAINS_AVSYNC_H) */
diff --git a/dvr_rdk/demos/link_api_demos/common/chains_common.c b/dvr_rdk/demos/link_api_demos/common/chains_common.c
new file mode 100644
index 0000000..d35e541
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/common/chains_common.c
@@ -0,0 +1,188 @@
+#include "chains_common.h"
+
+char Chains_getChar()
+{
+    char buffer[MAX_INPUT_STR_SIZE];
+
+    fflush(stdin);
+    fgets(buffer, MAX_INPUT_STR_SIZE, stdin);
+
+    return(buffer[0]);
+}
+
+int Chains_getString(char *string, char *buffer)
+{
+	while(1)
+	{
+
+		printf(" \n");
+		printf(" Enter %s : ", string);
+
+		fflush(stdin);
+		fgets(buffer, MAX_INPUT_STR_SIZE, stdin);
+
+		if('\n' == buffer[0])
+		{
+			continue;	
+		}
+
+		buffer[strlen(buffer)-1] = '\0';
+
+		printf(" \n");
+		printf(" Entered %s\n", buffer);
+		break;
+	}
+
+	return(TRUE);
+}
+
+int Chains_getChId(char *string, int maxChId)
+{
+	char inputStr[MAX_INPUT_STR_SIZE];
+    int chId;
+
+    printf(" \n");
+    printf(" Select %s CH ID [0 .. %d] : ", string, maxChId-1);
+
+    fflush(stdin);
+    fgets(inputStr, MAX_INPUT_STR_SIZE, stdin);
+
+    chId = atoi(inputStr);
+
+    if(chId < 0 || chId >= maxChId )
+    {
+        chId = 0;
+
+        printf(" \n");
+        printf(" WARNING: Invalid CH ID specified, defaulting to CH ID = %d \n", chId);
+    }
+    else
+    {
+        printf(" \n");
+        printf(" Selected CH ID = %d \n", chId);
+    }
+
+    printf(" \n");
+
+    return chId;
+}
+
+int Chains_getIntValue(char *string, int minVal, int maxVal, int defaultVal)
+{
+    char inputStr[MAX_INPUT_STR_SIZE];
+    int value;
+
+    printf(" \n");
+    printf(" Enter %s [Valid values, %d .. %d] : ", string, minVal, maxVal);
+
+    fflush(stdin);
+    fgets(inputStr, MAX_INPUT_STR_SIZE, stdin);
+
+    value = atoi(inputStr);
+
+    if(value < minVal || value > maxVal || '\n' == inputStr[0])
+    {
+        value = defaultVal;
+        printf(" \n");
+        printf(" WARNING: Invalid value specified, defaulting to value of = %d \n", value);
+    }
+    else
+    {
+        printf(" \n");
+        printf(" Entered value = %d \n", value);
+    }
+
+    printf(" \n");
+
+    return value;
+}
+
+Bool Chains_getFileWriteEnable()
+{
+    char inputStr[MAX_INPUT_STR_SIZE];
+    Bool enable;
+
+    printf(" \n");
+    printf(" Enable file write (YES - y / NO - n) : ");
+
+    inputStr[0] = 0;
+
+    fflush(stdin);
+    fgets(inputStr, MAX_INPUT_STR_SIZE, stdin);
+
+    enable = FALSE;
+
+    if(inputStr[0]=='y' || inputStr[0]=='Y' )
+    {
+        enable = TRUE;
+    }
+
+    printf(" \n");
+    if(enable)
+        printf(" File write ENABLED !!!\n");
+    else
+        printf(" File write DISABLED !!!\n");
+    printf(" \n");
+    return enable;
+}
+
+Bool Chains_isPathValid( const char* absolutePath )
+{
+
+    if(access( absolutePath, F_OK ) == 0 ){
+
+        struct stat status;
+        stat( absolutePath, &status );
+
+        return (status.st_mode & S_IFDIR) != 0;
+    }
+    return FALSE;
+}
+
+int Chains_getFileWritePath(char *path, char *defaultPath)
+{
+    int status=0;
+
+    printf(" \n");
+    printf(" Enter file write path : ");
+
+    fflush(stdin);
+    fgets(path, MAX_INPUT_STR_SIZE, stdin);
+
+    printf(" \n");
+
+    /* remove \n from the path name */
+    path[ strlen(path)-1 ] = 0;
+
+    if(!Chains_isPathValid(path))
+    {
+        printf(" WARNING: Invalid path [%s], trying default path [%s] ...\n", path, defaultPath);
+
+        strcpy(path, defaultPath);
+
+        if(!Chains_isPathValid(path))
+        {
+            printf(" WARNING: Invalid default path [%s], file write will FAIL !!! \n", path);
+
+            status = -1;
+        }
+    }
+
+    if(status==0)
+    {
+        printf(" Selected file write path [%s] \n", path);
+    }
+
+    printf(" \n");
+
+    return 0;
+}
+
+Uint64 Chains_getCurrentTime()
+{
+    struct timeval tv;
+    gettimeofday(&tv, NULL);
+
+    return ((Int64)tv.tv_sec*1000000 + tv.tv_usec)/1000;
+}
+
diff --git a/dvr_rdk/demos/link_api_demos/common/chains_common.h b/dvr_rdk/demos/link_api_demos/common/chains_common.h
new file mode 100644
index 0000000..e648736
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/common/chains_common.h
@@ -0,0 +1,32 @@
+#ifndef _CHAINS_COMMON_H
+#define _CHAINS_COMMON_H
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <stddef.h>
+#include <errno.h>
+#include <ctype.h>
+#include <sys/wait.h>
+#include <sys/types.h>  // For stat().
+#include <sys/stat.h>   // For stat().
+#include <assert.h>
+#include <unistd.h>
+#include <fcntl.h>
+
+#include <osa.h>
+
+#define MAX_CHANNEL_NUMBER          (16)
+#define MAX_INPUT_STR_SIZE          (128)
+#define MAX_FILE_NAME_SIZE          (256)
+
+char Chains_getChar();
+int  Chains_getString(char *string, char *buffer);
+int  Chains_getChId(char *string, int maxChId);
+int  Chains_getIntValue(char *string, int minVal, int maxVal, int defaultVal);
+Bool Chains_getFileWriteEnable();
+Bool Chains_isPathValid( const char* absolutePath );
+int  Chains_getFileWritePath(char *path, char *defaultPath);
+Uint64 Chains_getCurrentTime();
+
+#endif
diff --git a/dvr_rdk/demos/link_api_demos/common/chains_ipcBits.c b/dvr_rdk/demos/link_api_demos/common/chains_ipcBits.c
old mode 100755
new mode 100644
index c821bc7..ab75e3e
--- a/dvr_rdk/demos/link_api_demos/common/chains_ipcBits.c
+++ b/dvr_rdk/demos/link_api_demos/common/chains_ipcBits.c
@@ -27,6 +27,9 @@
 #include <osa_sem.h>
 #include <demos/link_api_demos/common/chains_ipcBits.h>
 
+#include <demos/link_api_demos/common/chains_common.h>
+#include <demos/link_api_demos/common/chains.h>
+
 #ifdef KB
 #undef KB
 #endif
@@ -48,13 +51,13 @@
 #define CHAINS_IPC_BITS_FILE_STORE_DIR                                      "/dev/shm"
 #define CHAINS_IPC_BITS_HDR_FILE_NAME                                       "VBITS_HDR"
 #define CHAINS_IPC_BITS_DATA_FILE_NAME                                      "VBITS_DATA"
-#define CHAINS_IPC_BITS_FILE_EXTENSION                                      "bin"
+#define CHAINS_IPC_BITS_FILE_EXTENSION                                      "h264"
 
 #define CHAINS_IPC_BITS_MAX_NUM_CHANNELS                                    (16)
 #define CHAINS_IPC_BITS_NONOTIFYMODE_BITSIN                                 (TRUE)
 #define CHAINS_IPC_BITS_NONOTIFYMODE_BITSOUT                                (TRUE)
 
-#define CHAINS_IPC_BITS_MAX_DEFAULT_SIZE                                    (1*MB)
+#define CHAINS_IPC_BITS_MAX_DEFAULT_SIZE                                    (1024*MB)
 #define CHAINS_IPC_BITS_FREE_SPACE_RETRY_MS                                 (16)
 #define CHAINS_IPC_BITS_FREE_SPACE_MAX_RETRY_CNT                            (500)
 
@@ -90,8 +93,8 @@
 /** @enum CHAINS_IPCBITS_GET_BITBUF_SIZE
  *  @brief Macro that returns max size of encoded bitbuffer for a given resolution
  */
-#define CHAINS_IPCBITS_DEFAULT_WIDTH                   (720)
-#define CHAINS_IPCBITS_DEFAULT_HEIGHT                  (576)
+#define CHAINS_IPCBITS_DEFAULT_WIDTH                   (1920)
+#define CHAINS_IPCBITS_DEFAULT_HEIGHT                  (1080)
 
 #define CHAINS_IPCBITS_GET_BITBUF_SIZE(width,height)   ((width) * (height)/2)
 
@@ -131,6 +134,12 @@
 #endif
 
 
+#define CHAINS_IPCBITS_NET_BUFFER_MAX   (16)
+#define CHAINS_IPCBITS_NET_BUFFER_SIZE  (512 * 1024)
+
+#define CHAINS_IPCBITS_RECV_MAX         (8)
+
+
 enum Chains_IpcBitsFileType {
     CHAINS_IPC_BITS_FILETYPE_HDR,
     CHAINS_IPC_BITS_FILETYPE_BUF
@@ -149,9 +158,20 @@ typedef struct Chains_IpcBitsCtrlFileObj {
 typedef struct Chains_IpcBitsCtrlThrObj {
     OSA_ThrHndl thrHandleBitsIn;
     OSA_ThrHndl thrHandleBitsOut;
-    OSA_QueHndl bufQFullBufs;
-    OSA_QueHndl bufQFreeBufs;
-    OSA_SemHndl bitsInNotifySem;
+	
+	OSA_ThrHndl thrHandleChOut[MAX_CHANNEL_NUMBER];
+	OSA_QueHndl bufQFullBufs[CHAINS_IPCBITS_RECV_MAX];
+	OSA_QueHndl bufQFreeBufs[CHAINS_IPCBITS_RECV_MAX];
+
+	unsigned int    m_recv_num;
+	unsigned char * m_swap_buffer;
+	Bitstream_Buf m_bits_bufs[CHAINS_IPCBITS_NET_BUFFER_MAX];
+	OSA_QueHndl m_net_free_que;
+	OSA_QueHndl m_net_busy_ques[CHAINS_IPCBITS_RECV_MAX];
+	OSA_ThrHndl m_net_thds[CHAINS_IPCBITS_RECV_MAX];
+
+
+	OSA_SemHndl bitsInNotifySem;
     volatile Bool exitBitsInThread;
     volatile Bool exitBitsOutThread;
 } Chains_IpcBitsCtrlThrObj;
@@ -175,6 +195,86 @@ Chains_IpcBitsCtrl gChains_ipcBitsCtrl =
     .noNotifyBitsOutHLOS = CHAINS_IPC_BITS_NONOTIFYMODE_BITSOUT,
 };
 
+static inline
+void initialize_timeout(struct timeval *ptv, unsigned long timewait)
+{
+	ptv->tv_sec  = (timewait / 1000);
+	ptv->tv_usec = (timewait % 1000) * 1000;
+}
+
+static int
+fd_write(int sockfd, const char *buf, size_t len, size_t *psize,  struct timeval *ptv)
+{
+	int             ret;
+	fd_set          wr_fds;
+	int             status = 0;
+
+	/* Initialize the time out */
+	//initialize_timeout(&tv, timewait);
+
+	(*psize) = 0;
+
+	/* Init fdset */
+	FD_ZERO(&wr_fds);
+	FD_SET(sockfd, &wr_fds);
+
+	/* select: synchronous I/O multiplexing */
+	ret = select(sockfd + 1, NULL, &wr_fds, NULL, ptv);
+	if(ret > 0) {
+		if(FD_ISSET(sockfd, &wr_fds)) {
+
+			/* The sockfd is available to write */
+			//ret = send(sockfd, buf, len, 0);
+			ret = write(sockfd, buf, len);
+			if (ret < 0) {
+				/* TODO: Error accurred, set error code */
+				status =  -1;
+			} else {
+				/* Return the bytes sent */
+				(*psize) = ret;
+			}
+		}
+	} else if(ret == 0) {
+		/* Error: Timeout */
+		status =  -1;
+	} else {
+		/* Error: General fail  */
+		status =  -1;
+	}
+
+	return status;
+}
+
+static int
+fd_write2(int sockfd, const char *buf, size_t len, unsigned long timewait)
+{
+	size_t          bytes_send;
+	size_t          bytes_remain;
+	struct timeval  tv;
+	int             status = 0;
+
+	/* Initialize the time out */
+	initialize_timeout(&tv, timewait);
+
+	bytes_send   = 0;
+	bytes_remain = len;
+
+	while( bytes_remain ) {
+
+		/* socket send */
+		status = fd_write(sockfd, buf, bytes_remain, &bytes_send, &tv);
+		if(status >= 0) {
+			buf          += bytes_send;
+			bytes_remain -= bytes_send;
+		} else {
+			/* Socket error */
+			break;
+		}
+	}
+
+	return status;
+}
+
 static
 Void Chains_ipcBitsGenerateFileName(char *dirPath,
                                     char *fname,
@@ -276,38 +376,6 @@ static Void Chains_ipcBitsCopyBitBufDataMem2Mem(Bitstream_Buf *dstBuf,
     memcpy(dstBuf->addr,srcBuf->addr,srcBuf->fillLength);
 }
 
-static Void Chains_ipcBitsQueEmptyBitBufs(UInt32            ipcBitsInLinkId,
-                                          OSA_QueHndl       *emptyQue)
-{
-    Bitstream_BufList emptyBufList;
-    Bitstream_Buf *pBuf;
-    IpcBitsOutLinkHLOS_BitstreamBufReqInfo reqInfo;
-    Int i;
-    Int status;
-    UInt32 bitBufSize;
-
-
-    bitBufSize = CHAINS_IPCBITS_GET_BITBUF_SIZE(CHAINS_IPCBITS_DEFAULT_WIDTH,
-                                                CHAINS_IPCBITS_DEFAULT_HEIGHT);
-    emptyBufList.numBufs = 0;
-    reqInfo.numBufs = VIDBITSTREAM_MAX_BITSTREAM_BUFS;
-    reqInfo.reqType = IPC_BITSOUTHLOS_BITBUFREQTYPE_BUFSIZE;
-    for (i = 0; i < VIDBITSTREAM_MAX_BITSTREAM_BUFS; i++)
-    {
-        reqInfo.u[i].minBufSize = bitBufSize;
-    }
-    IpcBitsOutLink_getEmptyVideoBitStreamBufs(ipcBitsInLinkId,
-                                              &emptyBufList,
-                                              &reqInfo);
-    for (i = 0; i < emptyBufList.numBufs; i++)
-    {
-        pBuf = emptyBufList.bufs[i];
-        OSA_assert(pBuf->bufSize >= bitBufSize );
-
-        status = OSA_quePut(emptyQue,(Int32)pBuf,OSA_TIMEOUT_NONE);
-        OSA_assert(status == 0);
-    }
-}
 
 static Void Chains_ipcBitsSendFullBitBufs(UInt32            ipcBitsInLinkId,
                                           OSA_QueHndl       *fullQue)
@@ -334,27 +402,289 @@ static Void Chains_ipcBitsSendFullBitBufs(UInt32            ipcBitsInLinkId,
     }
 }
 
-static Void *Chains_ipcBitsSendFxn(Void * prm)
+static UInt32 getOneFrame(Chains_chCfg *chCfg, UInt8 *buf, UInt32 *bufLen)
 {
-    Chains_IpcBitsCtrlThrObj *thrObj = (Chains_IpcBitsCtrlThrObj *) prm;
-    static Int printStatsInterval = 0;
+	Int32 status = OSA_SOK;
+
+	Bitstream_Buf * p_bits_buf = NULL;
+	Chains_IpcBitsCtrlThrObj * thd_hdl = &gChains_ipcBitsCtrl.thrObj;
+
+	H264FileSource *pFileSource = &chCfg->fileSource;
+	Int32 readLen = 0;
+	UInt32 num = 0;
+	UInt32 flag = FALSE;
+	pFileSource->curFrameIdx ++;
+	pFileSource->curFrameAddr = pFileSource->nextFrameAddr;
+
+	while (chCfg->encFlag)
+	{
+		if (pFileSource->nextFrameAddr < pFileSource->bufLen-6) 
+		{
+
+			if ( pFileSource->buffer[pFileSource->nextFrameAddr+0] == 0x00 &&
+					pFileSource->buffer[pFileSource->nextFrameAddr+1] == 0x00 &&
+					pFileSource->buffer[pFileSource->nextFrameAddr+2] == 0x00 &&
+					pFileSource->buffer[pFileSource->nextFrameAddr+3] == 0x01)
+			{
+				UInt8 nalu_unit_type = pFileSource->buffer[pFileSource->nextFrameAddr+4] & 0x1F;
+				UInt8 first_mb_in_slice = pFileSource->buffer[pFileSource->nextFrameAddr+5] & 0x80;		
+
+				if (pFileSource->findFirstFrame)
+				{
+					if (nalu_unit_type>=1 && nalu_unit_type<=5)
+						continue;
+					else
+					{
+						pFileSource->curFrameAddr = pFileSource->nextFrameAddr;
+						pFileSource->findFirstFrame = FALSE;
+					}
+				}
+
+				if (nalu_unit_type>=1 && nalu_unit_type<=5)
+				{
+					if (first_mb_in_slice==0x80)
+					{
+						num ++;
+					}
+					if (num == 2) 
+					{
+						flag = TRUE;
+						break;
+					}
+				}
+				else 
+				{
+					if (num == 1)
+					{
+						flag = TRUE;
+						break;
+					}
+				}
+			}
+			pFileSource->nextFrameAddr++;
+
+		}
+		else 
+		{
+			if (pFileSource->bufLen + pFileSource->readLen > pFileSource->bufSize)
+			{
+				pFileSource->bufLen = pFileSource->bufLen-pFileSource->curFrameAddr;
+				memcpy(pFileSource->buffer, pFileSource->buffer+pFileSource->curFrameAddr, pFileSource->bufLen);
+				pFileSource->nextFrameAddr = pFileSource->nextFrameAddr - pFileSource->curFrameAddr;
+				pFileSource->curFrameAddr = 0;
+			}   
+
+			if (chCfg->protocol == TRANSFER_PROTOCOL_TCP) {
+				status = OSA_queGet(&thd_hdl->m_net_busy_ques[chCfg->channel], (Int32 *)&p_bits_buf, OSA_TIMEOUT_FOREVER);
+
+				memcpy(pFileSource->buffer+pFileSource->bufLen, p_bits_buf->addr, p_bits_buf->fillLength);
+				readLen = p_bits_buf->fillLength;
+
+				status = OSA_quePut(&thd_hdl->m_net_free_que, (Int32)p_bits_buf, OSA_TIMEOUT_FOREVER);
+				pFileSource->bufLen += readLen;
+			} else if (chCfg->protocol == TRANSFER_PROTOCOL_RTSP) {
+
+				readLen = read(pFileSource->fd, pFileSource->buffer+pFileSource->bufLen, pFileSource->readLen);
+				pFileSource->bufLen += readLen;
+			}
+
+			if (readLen == 0) {
+				flag = FALSE;
+				break;
+			}
+
+		}
+	} 
+
+	if (flag == TRUE) 
+	{
+
+		*bufLen = pFileSource->nextFrameAddr - pFileSource->curFrameAddr;
+
+		memcpy(buf, pFileSource->buffer + pFileSource->curFrameAddr, *bufLen);
+
+	}
+
+	else
+	{
+		*bufLen = 0;
+	}
+
+	return flag;
+}
 
-    OSA_printf("CHAINS_IPCBITS:%s:Entered...",__func__);
-    while (FALSE == thrObj->exitBitsOutThread)
-    {
-        OSA_waitMsecs(CHAINS_IPCBITS_SENDFXN_PERIOD_MS);
-        Chains_ipcBitsQueEmptyBitBufs(SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0,
-                                      &thrObj->bufQFreeBufs);
-        Chains_ipcBitsSendFullBitBufs(SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0,
-                                      &thrObj->bufQFullBufs);
-        if ((printStatsInterval % CHAINS_IPCBITS_INFO_PRINT_INTERVAL) == 0)
-        {
-            OSA_printf("CHAINS_IPCBITS:%s:INFO: periodic print..",__func__);
-        }
-        printStatsInterval++;
-    }
-    OSA_printf("CHAINS_IPCBITS:%s:Leaving...",__func__);
-    return NULL;
+
+static Void *Chains_ipcBitsSendFromFileFxn(Void * prm)
+{
+	Chains_chCfg *chCfg = (Chains_chCfg *)prm;
+	H264FileSource *pFileSource = &chCfg->fileSource;
+	Bitstream_Buf *pEmptyBuf = NULL;
+	Int32 status = TRUE;
+	Char command[MAX_FILE_NAME_SIZE];
+	static int chn = 0;
+	int chns[16] = {0};
+	UInt64 timestamp_base = 0;
+
+
+	Bitstream_BufList emptyBufList;
+	Bitstream_BufList fullBufList;
+	IpcBitsOutLinkHLOS_BitstreamBufReqInfo reqInfo;
+	UInt32 bitBufSize;
+
+    UInt32 frameStartTime      = 0;
+    UInt32 frameEndTime        = 0;
+    UInt32 frameInterTime      = 8;
+    Int32  milliSecondsToSleep = 0;
+
+	OSA_printf("CHAINS_IPCBITS:%s:ch%d:Entered...", __func__, chCfg->channel);
+
+	if (chCfg->encFlag == FALSE || chCfg->clientEnable == FALSE) {
+		return FALSE;
+	}
+	if(chCfg->protocol == TRANSFER_PROTOCOL_RTSP) 
+	{
+		chns[chCfg->channel] = chn++;	
+		sprintf(pFileSource->fileName, "/tmp/clientCh%d.h264", chCfg->channel);
+		if (access(pFileSource->fileName, F_OK) != 0) 
+		{
+			if (mkfifo(pFileSource->fileName, 0666) < 0) 
+			{
+				OSA_printf("Failed to mkfifo %s\n", pFileSource->fileName);
+				return FALSE;
+			}
+		}
+	}
+	pFileSource->bufSize = 2 * chCfg->inWidth * chCfg->inHeight;
+	if (pFileSource->bufSize <= 0) 
+	{
+		pFileSource->bufSize = 2 * 1920 * 1200;
+	}
+	pFileSource->bufSize = SystemUtils_align(pFileSource->bufSize, 1024);
+
+	if (chCfg->bitRate > 0)
+	{
+		pFileSource->readLen = chCfg->bitRate / chCfg->inFrameRate / 4;
+	}
+	else 
+	{
+		pFileSource->readLen = pFileSource->bufSize / 200;
+	}
+	if (pFileSource->readLen < 1024)
+		pFileSource->readLen = 1024;
+	if (pFileSource->readLen > 128 * 1024)
+		pFileSource->readLen = 128 * 1024;
+
+	pFileSource->readLen = CHAINS_IPCBITS_NET_BUFFER_SIZE;
+	pFileSource->readLen = SystemUtils_align(pFileSource->readLen, 1024);
+
+	pFileSource->bufLen = 0;
+	pFileSource->curFrameIdx = 0;
+	pFileSource->curFrameAddr = 0;
+	pFileSource->nextFrameAddr = 0;
+	pFileSource->findFirstFrame = FALSE;
+	switch (chCfg->protocol) {
+	case TRANSFER_PROTOCOL_RTSP:
+		sprintf(chCfg->clientCommand, "/home/root/rtsp_client -F %s -b %d %s",
+				pFileSource->fileName, pFileSource->bufSize, chCfg->URL);
+		break;
+	default:
+		break;
+	}
+	if	(chCfg->protocol == TRANSFER_PROTOCOL_RTSP) 
+	{
+		sprintf(command, "%s &", chCfg->clientCommand);
+		OSA_printf("client command: %s\n", command);
+		if (system(command) != 0) 
+		{
+			OSA_printf("Failed to execute system command");
+			return FALSE;
+		}
+		pFileSource->fd = open(pFileSource->fileName, O_RDONLY );
+		if (pFileSource->fd <= 0) 
+		{
+			chCfg->encFlag = FALSE;
+			OSA_printf("Failed to open file %s\n", pFileSource->fileName);
+		}
+		OSA_printf("Open file %s\n", pFileSource->fileName);
+	}
+	pFileSource->buffer = OSA_memAlloc(pFileSource->bufSize);
+	if (pFileSource->buffer == NULL) 
+	{
+		chCfg->encFlag = FALSE;
+		OSA_printf("Failed to alloc memory %d\n", pFileSource->bufSize);
+	}
+
+	while (TRUE == chCfg->encFlag)
+	{
+        
+		frameStartTime = OSA_getCurTimeInMsec();
+		
+		bitBufSize = CHAINS_IPCBITS_GET_BITBUF_SIZE(CHAINS_IPCBITS_DEFAULT_WIDTH,
+				CHAINS_IPCBITS_DEFAULT_HEIGHT);
+
+		reqInfo.bufSize = bitBufSize;
+		reqInfo.chNum 	= chns[chCfg->channel];
+
+		IpcBitsOutLink_getEmptyVideoBitStreamBufs(SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0,
+				&emptyBufList,
+				&reqInfo);
+		if(0 == emptyBufList.numBufs)
+		{
+			goto __return_process;
+		}
+		fullBufList.numBufs = 0;
+		pEmptyBuf = fullBufList.bufs[fullBufList.numBufs++] = emptyBufList.bufs[0];
+
+		
+		status = getOneFrame(chCfg, pEmptyBuf->addr, &pEmptyBuf->fillLength);
+		if (status == FALSE) {
+			IpcBitsOutLink_putFullVideoBitStreamBufs(SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0,
+					&fullBufList);
+            goto __return_process;
+		}
+
+		UInt64 curTimeStamp =timestamp_base++ * 16;
+		pEmptyBuf->lowerTimeStamp = (UInt32)(curTimeStamp & 0xFFFFFFFF);
+		pEmptyBuf->upperTimeStamp = (UInt32)((curTimeStamp >> 32)& 0xFFFFFFFF);
+
+		if (fullBufList.numBufs)
+		{
+			IpcBitsOutLink_putFullVideoBitStreamBufs(SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0,
+					&fullBufList);
+		}
+
+__return_process:
+		milliSecondsToSleep = 1;
+
+		frameEndTime = OSA_getCurTimeInMsec();
+		milliSecondsToSleep = frameInterTime + frameStartTime - frameEndTime;
+		if (milliSecondsToSleep > 0) {
+			OSA_waitMsecs(milliSecondsToSleep);
+			milliSecondsToSleep = 0;
+		}
+
+	}
+
+	if	(chCfg->protocol == TRANSFER_PROTOCOL_RTSP) 
+	{   
+		sprintf(command, "pid=`ps | grep '%s' | awk '{print $1}'`; kill $pid;", chCfg->fileSource.fileName);
+		system(command);
+	}
+
+	if (pFileSource->fd > 0)
+	{
+		close(pFileSource->fd);
+		pFileSource->fd = 0;
+	}
+
+	if (pFileSource->buffer != NULL) 
+	{
+		OSA_memFree(pFileSource->buffer);
+		pFileSource->buffer = NULL;
+	}
+
+	OSA_printf("CHAINS_IPCBITS:%s:Ch%d:Leaving...",__func__,chCfg->channel);
+	return NULL;
 }
 
 static Void Chains_ipcBitsProcessFullBufs(UInt32            ipcBitsInLinkId,
@@ -370,13 +700,13 @@ static Void Chains_ipcBitsProcessFullBufs(UInt32            ipcBitsInLinkId,
                                             &fullBufList);
     for (i = 0; i < fullBufList.numBufs; i++)
     {
-        status = OSA_queGet(&thrObj->bufQFreeBufs,(Int32 *)(&pEmptyBuf),
+        status = OSA_queGet(&thrObj->bufQFreeBufs[0],(Int32 *)(&pEmptyBuf),
                             OSA_TIMEOUT_FOREVER);
         OSA_assert(status == 0);
         pFullBuf = fullBufList.bufs[i];
         Chains_ipcBitsCopyBitBufInfo(pEmptyBuf,pFullBuf);
         Chains_ipcBitsCopyBitBufDataMem2Mem(pEmptyBuf,pFullBuf);
-        status = OSA_quePut(&thrObj->bufQFullBufs,
+        status = OSA_quePut(&thrObj->bufQFullBufs[0],
                             (Int32)pEmptyBuf,OSA_TIMEOUT_NONE);
         OSA_assert(status == 0);
     }
@@ -409,7 +739,7 @@ static Void *Chains_ipcBitsRecvFxn(Void * prm)
                                       fObj);
         if ((printStats % CHAINS_IPCBITS_INFO_PRINT_INTERVAL) == 0)
         {
-            OSA_printf("CHAINS_IPCBITS:%s:INFO: periodic print..",__func__);
+            //OSA_printf("CHAINS_IPCBITS:%s:INFO: periodic print..",__func__);
         }
         printStats++;
     }
@@ -417,39 +747,276 @@ static Void *Chains_ipcBitsRecvFxn(Void * prm)
     return NULL;
 }
 
+static Void *Chains_ipcBitsRecvToFileFxn(Void * prm)
+{
+	Chains_IpcBitsCtrl *ipcBitsCtrl = (Chains_IpcBitsCtrl *) prm;
+	Chains_IpcBitsCtrlThrObj *thrObj = &ipcBitsCtrl->thrObj;
+	Chains_IpcBitsCtrlFileObj *fObj =  &ipcBitsCtrl->fObj;
+	static Int printStats;
+	Bitstream_BufList fullBufList;
+	Bitstream_Buf *pFullBuf;
+	Bitstream_Buf *pBuf;
+	size_t write_cnt;
+	Int i, ch,j = 0;
+	Int chns[16] = {0};
+	Char command[MAX_FILE_NAME_SIZE];
+	OSA_printf("CHAINS_IPCBITS:%s:Entered...",__func__);
+
+	for (ch=0; ch<gChains_ctrl.chNum; ch++) 
+	{
+		Chains_chCfg *chCfg = &gChains_ctrl.chCfg[ch];
+
+		if (chCfg->encFlag && chCfg->serverEnable) {
+
+			chns[j++] = ch;
+			sprintf(chCfg->serverFileName, "/tmp/serverCh%d.h264", ch);
+
+			if (access(chCfg->serverFileName, F_OK) != 0)
+			{
+				if (mkfifo(chCfg->serverFileName, 0777) < 0)
+				{
+					OSA_printf("Failed to mkfifo %s\n", chCfg->serverFileName);
+					continue;
+				}
+			}
+
+			switch (chCfg->protocol) 
+			{
+			case TRANSFER_PROTOCOL_TCP:
+				sprintf(chCfg->serverCommand, "/home/root/testTcpServer -p %d -f %s",
+						chCfg->serverPort, chCfg->serverFileName);
+				break;
+			case TRANSFER_PROTOCOL_TS:
+				break;
+			case TRANSFER_PROTOCOL_RTSP:
+				sprintf(chCfg->serverCommand, "/home/root/rtsp_server -f %s -n avstream -p %d  -r %d",
+						chCfg->serverFileName, 8554 + 2*ch,  chCfg->outFrameRate);
+				break;
+			default:
+				break;
+			}
+			sprintf(command, "%s &", chCfg->serverCommand);
+			OSA_printf("server command: %s\n", command);
+			if (system(command) != 0)
+			{
+				OSA_printf("Failed to execute system command!");
+				continue;
+			}
+
+			chCfg->serverFd = open(chCfg->serverFileName, O_RDWR | O_NONBLOCK);
+
+			if (chCfg->serverFd <= 0) 
+			{
+				OSA_printf("Failed to open file %s\n", chCfg->serverFileName);
+			}
+			else
+			{
+				OSA_printf("Open file %s, fd = %d", chCfg->serverFileName, chCfg->serverFd);
+			}
+		}
+	}
+
+	while (FALSE == thrObj->exitBitsInThread)
+	{
+
+		OSA_semWait(&thrObj->bitsInNotifySem,OSA_TIMEOUT_FOREVER);
+
+		IpcBitsInLink_getFullVideoBitStreamBufs(SYSTEM_HOST_LINK_ID_IPC_BITS_IN_0,
+				&fullBufList);
+		int ret;
+
+		for (i = 0; i < fullBufList.numBufs; i++)
+		{
+			pFullBuf = fullBufList.bufs[i];
+			Chains_chCfg *chCfg = &gChains_ctrl.chCfg[chns[pFullBuf->channelNum]];
+
+			if (pFullBuf->fillLength > 0 && chCfg->encFlag && chCfg->serverEnable && chCfg->serverFd > 0) 
+			{
+				if (chCfg->protocol == TRANSFER_PROTOCOL_TCP) {
+					//	write(chCfg->serverFd, (char *)&pFullBuf->fillLength, 4);
+					write(chCfg->serverFd, &pFullBuf->fillLength, sizeof(pFullBuf->fillLength));
+				}
+				ret = fd_write2(chCfg->serverFd, pFullBuf->addr, pFullBuf->fillLength, 15);
+			}
+		}
+
+		if (fObj->enableFWrite)
+		{
+#if 0
+			Chains_ipcBitsWriteBitsToFile(fObj->fpWrHdr,
+					fObj->fpWrData,
+					&fullBufList,
+					fObj->maxFileSize,
+					fObj->fwriteEnableBitMask);
+#endif
+			for (i = 0; i < fullBufList.numBufs; i++)
+			{
+				pBuf = fullBufList.bufs[i];
+				Chains_chCfg *chCfg = &gChains_ctrl.chCfg[chns[pBuf->channelNum]];
+
+				UInt32 fileIdx;
+
+				fileIdx = chns[pBuf->channelNum];
+				if (chCfg->encFlag && chCfg->serverEnable)
+				{
+
+					if((fileIdx < gChains_ctrl.chCapNum))
+					{
+						Chains_ipcBitsWriteWrap(fObj->fpWrData[fileIdx],pBuf->fillLength,fObj->maxFileSize);
+						write_cnt = fwrite(pBuf->addr,sizeof(char),pBuf->fillLength,fObj->fpWrData[fileIdx]);
+						OSA_assert(write_cnt == pBuf->fillLength);
+						Chains_ipcBitsWriteWrap(fObj->fpWrHdr[fileIdx],sizeof(*pBuf),fObj->maxFileSize);
+						write_cnt = fwrite(pBuf,sizeof(*pBuf),1,fObj->fpWrHdr[fileIdx]);
+						OSA_assert(write_cnt == 1);
+					}
+				}
+
+			}
+		}
+		IpcBitsInLink_putEmptyVideoBitStreamBufs(SYSTEM_HOST_LINK_ID_IPC_BITS_IN_0,
+				&fullBufList);
+
+		if ((printStats % CHAINS_IPCBITS_INFO_PRINT_INTERVAL) == 0)
+		{
+			//OSA_printf("CHAINS_IPCBITS:%s:INFO: periodic print..",__func__);
+		}
+		printStats++;
+	}
+
+	for (ch=0; ch<gChains_ctrl.chNum; ch++) 
+	{
+		Chains_chCfg *chCfg = &gChains_ctrl.chCfg[chns[ch]];
+		if (chCfg->protocol == TRANSFER_PROTOCOL_RTSP && chCfg->serverEnable) 
+		{
+			sprintf(command, "pid=`ps | grep '%s' | awk '{print $1}'`; kill -2 $pid;",
+					chCfg->serverFileName);
+			system(command);
+			if (chCfg->serverFd > 0)
+			{
+				close(chCfg->serverFd);
+				chCfg->serverFd = -1;
+			}
+		}
+	}
+
+	OSA_printf("CHAINS_IPCBITS:%s:Leaving...",__func__);
+	return NULL;
+}
+
+
 
 static Void Chains_ipcBitsInitThrObj(Chains_IpcBitsCtrlThrObj *thrObj)
 {
 
-    OSA_semCreate(&thrObj->bitsInNotifySem,
-                  CHAINS_IPCBITS_MAX_PENDING_RECV_SEM_COUNT,0);
-    thrObj->exitBitsInThread = FALSE;
-    thrObj->exitBitsOutThread = FALSE;
-    OSA_queCreate(&thrObj->bufQFreeBufs,CHAINS_IPCBITS_FREE_QUE_MAX_LEN);
-    OSA_queCreate(&thrObj->bufQFullBufs,CHAINS_IPCBITS_FULL_QUE_MAX_LEN);
-    OSA_thrCreate(&thrObj->thrHandleBitsOut,
-                  Chains_ipcBitsSendFxn,
-                  CHAINS_IPCBITS_SENDFXN_TSK_PRI,
-                  CHAINS_IPCBITS_SENDFXN_TSK_STACK_SIZE,
-                  thrObj);
-
-    OSA_thrCreate(&thrObj->thrHandleBitsIn,
-                  Chains_ipcBitsRecvFxn,
-                  CHAINS_IPCBITS_RECVFXN_TSK_PRI,
-                  CHAINS_IPCBITS_RECVFXN_TSK_STACK_SIZE,
-                  &gChains_ipcBitsCtrl);
+   	int i;
+	memset(thrObj, 0, sizeof(Chains_IpcBitsCtrlThrObj));
+	OSA_semCreate(&thrObj->bitsInNotifySem,
+			CHAINS_IPCBITS_MAX_PENDING_RECV_SEM_COUNT,0);
+	thrObj->exitBitsInThread = FALSE;
+	thrObj->exitBitsOutThread = FALSE;
+	thrObj->m_recv_num = 0;
+
+	for (i = 0; i < OSA_ARRAYSIZE(thrObj->bufQFreeBufs); i++) {
+		OSA_queCreate(&thrObj->bufQFreeBufs[i],CHAINS_IPCBITS_FREE_QUE_MAX_LEN);
+	}
+	for (i = 0; i < OSA_ARRAYSIZE(thrObj->bufQFullBufs); i++) {
+		OSA_queCreate(&thrObj->bufQFullBufs[i],CHAINS_IPCBITS_FULL_QUE_MAX_LEN);
+	}
+
+	thrObj->m_swap_buffer = OSA_memAlloc(CHAINS_IPCBITS_NET_BUFFER_MAX * CHAINS_IPCBITS_NET_BUFFER_SIZE);
+	if (thrObj->m_swap_buffer == NULL) {
+		return ;
+	}
+
+	OSA_queCreate(&thrObj->m_net_free_que, CHAINS_IPCBITS_NET_BUFFER_MAX);
+
+	for (i = 0; i < OSA_ARRAYSIZE(thrObj->m_net_busy_ques); i++) {
+		OSA_queCreate(&thrObj->m_net_busy_ques[i], CHAINS_IPCBITS_NET_BUFFER_MAX);
+	}
+
+	for (i = 0; i < OSA_ARRAYSIZE(thrObj->m_bits_bufs); i++) {
+		thrObj->m_bits_bufs[i].bufSize = CHAINS_IPCBITS_NET_BUFFER_SIZE;
+		thrObj->m_bits_bufs[i].addr    = thrObj->m_swap_buffer + i * CHAINS_IPCBITS_NET_BUFFER_SIZE;
+		OSA_quePut(&thrObj->m_net_free_que, (Int32)&thrObj->m_bits_bufs[i], OSA_TIMEOUT_NONE);
+	}
+
+	for (i = 0; i < OSA_ARRAYSIZE(thrObj->m_net_thds); i++) {
+		thrObj->m_net_thds[i].hndl = 0;
+	}
+
+	UInt32      ch;
+	UInt32      bitsInFlag = FALSE;
+	UInt32      bitsOutFlag = FALSE;
+	
+	for (ch=0; ch<gChains_ctrl.chNum; ch++)
+	{
+		Chains_chCfg *chCfg = &gChains_ctrl.chCfg[ch];
+		chCfg->m_net_connected = FALSE;
+		if (chCfg->serverEnable)
+		{
+			bitsInFlag = TRUE;
+		}
+		if (chCfg->clientEnable)
+		{
+			thrObj->m_recv_num++;
+			bitsOutFlag = TRUE;
+			OSA_thrCreate(&thrObj->thrHandleChOut[ch],
+					Chains_ipcBitsSendFromFileFxn,
+					CHAINS_IPCBITS_SENDFXN_TSK_PRI,
+					CHAINS_IPCBITS_SENDFXN_TSK_STACK_SIZE,
+					chCfg);
+
+		}
+	}
+
+	if (bitsInFlag) 
+	{
+		OSA_thrCreate(&thrObj->thrHandleBitsIn,
+				Chains_ipcBitsRecvToFileFxn,
+				CHAINS_IPCBITS_RECVFXN_TSK_PRI,
+				CHAINS_IPCBITS_RECVFXN_TSK_STACK_SIZE,
+				&gChains_ipcBitsCtrl);
+	}
 
 }
 
 static Void Chains_ipcBitsDeInitThrObj(Chains_IpcBitsCtrlThrObj *thrObj)
 {
-    thrObj->exitBitsInThread = TRUE;
-    thrObj->exitBitsOutThread = TRUE;
-    OSA_thrDelete(&thrObj->thrHandleBitsOut);
-    OSA_thrDelete(&thrObj->thrHandleBitsIn);
-    OSA_semDelete(&thrObj->bitsInNotifySem);
-    OSA_queDelete(&thrObj->bufQFreeBufs);
-    OSA_queDelete(&thrObj->bufQFullBufs);
+
+	Int ch;
+	for (ch=0; ch<MAX_CHANNEL_NUMBER; ch++) {
+		if (thrObj->thrHandleChOut[ch].hndl) {
+			OSA_thrDelete(&thrObj->thrHandleChOut[ch]);
+		}
+	}
+
+	thrObj->exitBitsInThread = TRUE;
+	thrObj->exitBitsOutThread = TRUE;
+	if (thrObj->thrHandleBitsOut.hndl)
+		OSA_thrDelete(&thrObj->thrHandleBitsOut);
+	if (thrObj->thrHandleBitsOut.hndl)
+		OSA_thrDelete(&thrObj->thrHandleBitsIn);
+
+	for (ch = 0; ch < OSA_ARRAYSIZE(thrObj->m_net_thds); ch++) {
+		if (thrObj->m_net_thds[ch].hndl)
+			OSA_thrDelete(&thrObj->m_net_thds[ch]);
+	}
+
+	OSA_queDelete(&thrObj->m_net_free_que);
+	for (ch = 0; ch < OSA_ARRAYSIZE(thrObj->m_net_busy_ques); ch++) {
+		OSA_queDelete(&thrObj->m_net_busy_ques[ch]);
+	}
+
+	OSA_memFree(thrObj->m_swap_buffer);
+
+	OSA_semDelete(&thrObj->bitsInNotifySem);
+
+	for (ch = 0; ch < OSA_ARRAYSIZE(thrObj->bufQFreeBufs); ch++) {
+		OSA_queDelete(&thrObj->bufQFreeBufs[ch]);
+	}
+	for (ch = 0; ch < OSA_ARRAYSIZE(thrObj->bufQFullBufs); ch++) {
+		OSA_queDelete(&thrObj->bufQFullBufs[ch]);
+	}
 
 }
 
@@ -482,7 +1049,7 @@ static Void Chains_ipcBitsInCbFxn (Ptr cbCtx)
     OSA_semSignal(&chains_ipcBitsCtrl->thrObj.bitsInNotifySem);
     if ((printInterval % CHAINS_IPCBITS_INFO_PRINT_INTERVAL) == 0)
     {
-        OSA_printf("CHAINS_IPCBITS: Callback function:%s",__func__);
+        //OSA_printf("CHAINS_IPCBITS: Callback function:%s",__func__);
     }
     printInterval++;
 }
@@ -681,8 +1248,20 @@ Int32 Chains_ipcBitsInit()
 
 Void Chains_ipcBitsStop(void)
 {
+	Int ch;
+	for (ch=0; ch<gChains_ctrl.chNum; ch++)
+	{
+		Chains_chCfg *chCfg = &gChains_ctrl.chCfg[ch];
+		chCfg->encFlag = FALSE;
+	}
+
+	OSA_waitMsecs(50);
+
+
     gChains_ipcBitsCtrl.thrObj.exitBitsInThread = TRUE;
     gChains_ipcBitsCtrl.thrObj.exitBitsOutThread = TRUE;
+
+	OSA_waitMsecs(50);
 }
 
 Int32 Chains_ipcBitsExit()
diff --git a/dvr_rdk/demos/link_api_demos/common/chains_ipcBits.h b/dvr_rdk/demos/link_api_demos/common/chains_ipcBits.h
old mode 100755
new mode 100644
diff --git a/dvr_rdk/demos/link_api_demos/common/chains_ipcBuf.c b/dvr_rdk/demos/link_api_demos/common/chains_ipcBuf.c
old mode 100755
new mode 100644
diff --git a/dvr_rdk/demos/link_api_demos/common/chains_ipcBuf.h b/dvr_rdk/demos/link_api_demos/common/chains_ipcBuf.h
old mode 100755
new mode 100644
diff --git a/dvr_rdk/demos/link_api_demos/common/chains_ipcFrames.c b/dvr_rdk/demos/link_api_demos/common/chains_ipcFrames.c
old mode 100755
new mode 100644
index e19edc0..617a22d
--- a/dvr_rdk/demos/link_api_demos/common/chains_ipcFrames.c
+++ b/dvr_rdk/demos/link_api_demos/common/chains_ipcFrames.c
@@ -91,7 +91,7 @@ static Void Chains_ipcFramesPrintFrameInfo(VIDFrame_Buf *buf)
                "fid:%d\t"
                "frameWidth:%d\t"
                "frameHeight:%d\t"
-               "timeStamp:%d\t"
+               "timeStamp:%llu\t"
                "virtAddr[0][0]:%p\t"
                "phyAddr[0][0]:%p",
                 buf->channelNum,
diff --git a/dvr_rdk/demos/link_api_demos/common/chains_ipcFrames.h b/dvr_rdk/demos/link_api_demos/common/chains_ipcFrames.h
old mode 100755
new mode 100644
diff --git a/dvr_rdk/demos/link_api_demos/common/chains_main.c b/dvr_rdk/demos/link_api_demos/common/chains_main.c
old mode 100755
new mode 100644
index b3dbf41..4c26d50
--- a/dvr_rdk/demos/link_api_demos/common/chains_main.c
+++ b/dvr_rdk/demos/link_api_demos/common/chains_main.c
@@ -6,40 +6,19 @@
  ******************************************************************************/
 
 #include <demos/link_api_demos/common/chains.h>
-#include "ti_vdis_common_def.h"
 #include <mcfw/interfaces/common_def/ti_vsys_common_def.h>
+#include <mcfw/interfaces/common_def/ti_vcap_common_def.h>
+#include <mcfw/interfaces/common_def/ti_vdis_common_def.h>
 
 
-#if defined (TI816X_DVR) || defined (TI8107_DVR)
-#    define     SYSTEM_PLATFORM_BOARD                 SYSTEM_PLATFORM_BOARD_DVR
-#else
-#    ifdef TI816X_EVM
-#        define SYSTEM_PLATFORM_BOARD                 SYSTEM_PLATFORM_BOARD_VS
-#    else
-#        ifdef TI814X_EVM
-#            define SYSTEM_PLATFORM_BOARD             SYSTEM_PLATFORM_BOARD_VS
-#        else
-#           ifdef TI814X_DVR
-#                define SYSTEM_PLATFORM_BOARD             SYSTEM_PLATFORM_BOARD_VS
-#            else
-#               ifdef TI8107_EVM
-#                   define SYSTEM_PLATFORM_BOARD          SYSTEM_PLATFORM_BOARD_VS
-#               else
-#                   error "Unknown Board Type"
-#               endif
-#            endif
-#        endif
-#    endif
-#endif
-
-#define MAX_INPUT_STR_SIZE  (80)
-
 Chains_Ctrl gChains_ctrl;
 
 UInt32 gChains_enabledProcs[] = {
     SYSTEM_LINK_ID_M3VPSS,
     SYSTEM_LINK_ID_M3VIDEO,
+#if defined(TI_816X_BUILD)
     SYSTEM_LINK_ID_DSP,
+#endif
 };
 
 Void Chains_setDefaultCfg()
@@ -58,94 +37,216 @@ Void Chains_setDefaultCfg()
     memcpy(gChains_ctrl.displayRes,displayResDefault,sizeof(gChains_ctrl.displayRes));
 }
 
-char *gChains_cpuName[SYSTEM_PLATFORM_CPU_REV_MAX] = {
-    "ES1.0",
-    "ES1.1",
-    "ES2.0",
-    "ES2.1",
-    "UNKNOWN",
-};
-
-char *gChains_boardName[SYSTEM_PLATFORM_BOARD_MAX] = {
-    "UNKNOWN",
-    "4x TVP5158 VS",
-    "2x SII9135, 1x TVP7002 VC",
-    "2x SIL1161A, 2x TVP7002 Catalog"
-    "2x SIL1161A, 2x TVP7002 DVR"
-};
-
-char *gChains_boardRev[SYSTEM_PLATFORM_BOARD_REV_MAX] = {
-    "UNKNOWN",
-    "REV A",
-    "REV B",
-    "REV C",
-    "DVR"
-};
 
-Int32 Chains_detectBoard()
+UInt32 Chains_standardChoose(UInt32 idx)
 {
-    Int32 status;
-    UInt32 boardRev, boardId, cpuRev;
-
-    SystemVpss_PlatformInfo  platformInfo;
-
-    status = System_linkControl(
-                SYSTEM_LINK_ID_M3VPSS,
-                SYSTEM_M3VPSS_CMD_GET_PLATFORM_INFO,
-                &platformInfo,
-                sizeof(platformInfo),
-                TRUE
-                );
-
-    UTILS_assert(status==OSA_SOK);
-
-    /* Get CPU version */
-    cpuRev = platformInfo.cpuRev;
-    if (cpuRev >= SYSTEM_PLATFORM_CPU_REV_MAX)
-    {
-        cpuRev = SYSTEM_PLATFORM_CPU_REV_UNKNOWN;
+    VSYS_VIDEO_STANDARD_E standard;
+    switch (idx) {
+        default:
+        case 0:
+            standard = VSYS_STD_AUTO_DETECT;
+            break;
+        case 1:
+            standard = VSYS_STD_1080P_60;
+            break;
+        case 2:
+            standard = VSYS_STD_1080P_50;
+            break;
+        case 3:
+            standard = VSYS_STD_1080P_30;
+            break;
+        case 4:
+            standard = VSYS_STD_1080P_25;
+            break;
+        case 5:
+            standard = VSYS_STD_1080P_24;
+            break;
+        case 6:
+            standard = VSYS_STD_1080I_60;
+            break;
+        case 7:
+            standard = VSYS_STD_1080I_50;
+            break;
+        case 8:
+            standard = VSYS_STD_720P_60;
+            break;
+        case 9:
+            standard = VSYS_STD_720P_50;
+            break;
+        case 10:
+            standard = VSYS_STD_720P_30;
+            break;
+        case 11:
+            standard = VSYS_STD_720P_25;
+            break;
+        case 12:
+            standard = VSYS_STD_720P_24;
+            break;
+        case 13:
+            standard = VSYS_STD_576P;
+            break;
+        case 14:
+            standard = VSYS_STD_576I;
+            break;
+        case 15:
+            standard = VSYS_STD_480P;
+            break;
+        case 16:
+            standard = VSYS_STD_480I;
+            break;
+        case 17:
+            standard = VSYS_STD_WUXGA_60;
+            break;
+        case 18:
+            standard = VSYS_STD_UXGA_60;
+            break;
+        case 19:
+            standard = VSYS_STD_SXGAP_60;
+            break;
+        case 20:
+            standard = VSYS_STD_1360_768_60;
+            break;
+        case 21:
+            standard = VSYS_STD_SXGA_60;
+            break;
+        case 22:
+            standard = VSYS_STD_WXGA_60;
+            break;
+        case 23:
+            standard = VSYS_STD_XGA_60;
+            break;
+        case 24:
+            standard = VSYS_STD_SVGA_60;
+            break;
+        case 25:
+            standard = VSYS_STD_VGA_60;
+            break;
+        case 26:
+            standard = VSYS_STD_576P;
+        case 27:
+            standard = VSYS_STD_576P;
+            break;
     }
-    printf(" %u: CHAINS  : CPU Revision [%s] !!! \r\n",
-        OSA_getCurTimeInMsec(), gChains_cpuName[cpuRev]);
+    return standard;
+}
 
-    /* Detect board */
-    boardId = platformInfo.boardId;
-    if (boardId >= SYSTEM_PLATFORM_BOARD_MAX)
-    {
-        boardId = SYSTEM_PLATFORM_BOARD_UNKNOWN;
-    }
-    printf(" %u: CHAINS  : Detected [%s] Board !!! \r\n",
-        OSA_getCurTimeInMsec(), gChains_boardName[boardId]);
 
-    /* Get base board revision */
-    boardRev = platformInfo.baseBoardRev;
-    if (boardRev >= SYSTEM_PLATFORM_BOARD_REV_MAX)
-    {
-        boardRev = SYSTEM_PLATFORM_BOARD_REV_UNKNOWN;
-    }
-    printf(" %u: CHAINS  : Base Board Revision [%s] !!! \r\n",
-        OSA_getCurTimeInMsec(), gChains_boardRev[boardRev]);
+Void Chains_menuChoose(UInt32 ch)
+{
+    UInt32 idx;
+    Chains_chCfg *chCfg = &gChains_ctrl.chCfg[ch];
+    chCfg->channel = ch;
+
+    OSA_printf("Video standard:"
+            "\r\n 0: auto detect"
+            "\r\n 1: 1920x1080P60"
+            "\r\n 2: 1920x1080P50"
+            "\r\n 3: 1920x1080P30"
+            "\r\n 4: 1920x1080P25"
+            "\r\n 5: 1920x1080P24"
+            "\r\n 6: 1920x1080I60"
+            "\r\n 7: 1920x1080I50"
+            "\r\n 8: 1280x720P60"
+            "\r\n 9: 1280x720P50"
+            "\r\n 10: 1280x720P30"
+            "\r\n 11: 1280x720P25"
+            "\r\n 12: 1280x720P24"
+            "\r\n 13: 720x576P50"
+            "\r\n 14: 720x576I50"
+            "\r\n 15: 720x480P60"
+            "\r\n 16: 720x480I60"
+            "\r\n 17: WUXGA(1920x1200)60"
+            "\r\n 18: UXGA+(1600*1200)60"
+            "\r\n 19: SXGA+(1400*1050)60"
+            "\r\n 20: WXGA(1360*768)60"
+            "\r\n 21: SXGA(1280*1024)60"
+            "\r\n 22: WXGA(1280*768)60"
+            "\r\n 23: XGA(1024*768)60"
+            "\r\n 24: SVGA(800*600)60"
+            "\r\n 25: VGA(640*480)60"
+            "\r\n 26: D1(720*576)30"
+            "\r\n 27: D1(720*576)25"
+            "\r\n 28: CIF(352*240)60"
+            "\r\n 29: CIF(352*240)60"
+            "\r\n");
+    idx = Chains_getIntValue("Input video standard", 0, 29, 1);
+
+	chCfg->inStd = Chains_standardChoose(idx);
+	Vsys_getStdSize(chCfg->inStd, &chCfg->inWidth, &chCfg->inHeight);
+    //Vsys_getStdRate(chCfg->inStd, &chCfg->inFrameRate);
+    chCfg->inFrameRate = Vsys_getStdRate(chCfg->inStd);
+
+    idx = Chains_getIntValue("Output video standard", 0, 29, 1);
+
+    chCfg->outStd = Chains_standardChoose(idx);
+    gChains_ctrl.displayRes[ch] = chCfg->outStd;
+    Vsys_getStdSize(chCfg->outStd, &chCfg->outWidth, &chCfg->outHeight);
+    //Vsys_getStdRate(chCfg->outStd, &chCfg->outFrameRate);
+    chCfg->outFrameRate = Vsys_getStdRate(chCfg->outStd);
+
+	if (chCfg->encFlag == TRUE) {
+		if (chCfg->protocol == TRANSFER_PROTOCOL_NONE && (chCfg->clientEnable || chCfg->serverEnable)) {
+			chCfg->protocol = Chains_getIntValue("transfer protocol <1-tcp 2-rtsp>", 1, 2, 2);
+
+		}
+
+		if (chCfg->protocol == TRANSFER_PROTOCOL_TCP ||
+				chCfg->protocol == TRANSFER_PROTOCOL_TS) {
+			if (chCfg->clientEnable == TRUE) {
+				Chains_getString("server ip <xxx.xxx.xxx.xxx>", chCfg->serverIp);
+			}
+			chCfg->serverPort = Chains_getIntValue("server port", 1025, 65535, 26600);
+		}
+		else if (chCfg->protocol == TRANSFER_PROTOCOL_RTSP) {
+			if (chCfg->clientEnable == TRUE) {
+				Chains_getString("RTSP URL", chCfg->URL);
+			}
+		}
+
+       UInt32 encIdx = Chains_getIntValue("encode format <1-H264HP 2-H264MP 3-H264BP 4-MJPEG>", 1, 4, 1);
+
+		UInt32 encFmt;
+        UInt32 encPrf;
+        switch (encIdx) {
+            default:
+            case 1:
+                encFmt = IVIDEO_H264HP;
+                encPrf = IH264_HIGH_PROFILE;
+                break;
+            case 2:
+                encFmt = IVIDEO_H264MP;
+                encPrf = IH264_MAIN_PROFILE;
+                break;
+            case 3:
+                encFmt = IVIDEO_H264BP;
+                encPrf = IH264_BASELINE_PROFILE;
+                break;
+            case 4:
+                encFmt = IVIDEO_MJPEG;
+                encPrf = 80;
+                break;
+        }
+        if (encFmt == IVIDEO_MJPEG) {
+            encPrf = Chains_getIntValue("MJPEG quality factor", 2, 97, 80);
+        }
+        chCfg->encFormat = encFmt;
+        chCfg->encProfile = encPrf;
+        chCfg->encFrameRate = Chains_getIntValue("target frame rate", 1, 60, 60);
 
-    if (boardId != SYSTEM_PLATFORM_BOARD_UNKNOWN)
-    {
-        /* Get daughter card revision */
-        boardRev = platformInfo.dcBoardRev;
-        if (boardRev >= SYSTEM_PLATFORM_BOARD_REV_MAX)
-        {
-            boardRev = SYSTEM_PLATFORM_BOARD_REV_UNKNOWN;
+        if (encFmt == IVIDEO_MJPEG) {
+            return;
         }
-        printf(" %u: CHAINS  : Daughter Card Revision [%s] !!! \r\n",
-            OSA_getCurTimeInMsec(), gChains_boardRev[boardRev]);
-    }
 
-    return 0;
+        chCfg->intraFrameInterval =Chains_getIntValue("intra frame interval", 1, 60000, 60);
+        chCfg->rateCtrl = Chains_getIntValue("bit rate control algorithm <0-VBR 1-CBR>", 0, 1, 1);
+
+        chCfg->bitRate = Chains_getIntValue("bit rate (unit:kbps)",1,40*1000,8*1000)*1000; 
+    }
 }
 
+
 Void Chains_run(Chains_RunFunc chainsRunFunc)
 {
-    Chains_Ctrl chainsCtrl;
-
-    Chains_detectBoard();
 
     System_linkControl(
         SYSTEM_LINK_ID_M3VPSS,
@@ -155,12 +256,26 @@ Void Chains_run(Chains_RunFunc chainsRunFunc)
         TRUE
         );
 
-    memcpy(&chainsCtrl, &gChains_ctrl, sizeof(gChains_ctrl));
+	int ch = 0;
+	Chains_menuChoose(ch);
+	for (ch=1; ch<gChains_ctrl.chNum; ch++) {
+		OSA_printf("Is the configuration of channel %d the same as previous (y -- yes/n -- no): ", ch);
+		if (Chains_getChar() == 'y')
+		{
+			gChains_ctrl.displayRes[ch] = gChains_ctrl.displayRes[ch-1];
+			memcpy(&gChains_ctrl.chCfg[ch], &gChains_ctrl.chCfg[ch-1], sizeof(gChains_ctrl.chCfg[ch]));
+			gChains_ctrl.chCfg[ch].channel = ch;
+		}
+		else {
+			Chains_menuChoose(ch);
+		}
+	}
+
 
     Chains_memPrintHeapStatus();
 
     UTILS_assert(  chainsRunFunc!=NULL);
-    chainsRunFunc(&chainsCtrl);
+    chainsRunFunc(&gChains_ctrl);
 
     Chains_memPrintHeapStatus();
 }
@@ -186,37 +301,297 @@ char gChains_menuMainVs[] = {
     "\r\n Enter Choice: "
 };
 
+char gChains_menuMainCh[] = {
+    "\r\n"
+	"\r\n  0: Select Cap + Dis                                      (VIP:  2x Sii9233a)"
+	"\r\n  1: Select Cap + SwMs + Dis                               (VIP:  2x Sii9233a)"
+	"\r\n  2: Double Cap + Enc + Send                               (VIP:  2x Sii9233a)"
+	"\r\n  3: Double Recv + Dec + Dis                               (VIP:  2x Sii9233a)"
+	"\r\n  4: Select Cap + NSF + Enc + Dec + SwMs + Dis             (VIP:  2x Sii9233a)"
+	"\r\n  5: Single Recv + Dec + Dis                               (VIP:  2x Sii9233a)"
+	"\r\n  6: Four   Recv + Dec + SwMs + Dis                        (VIP:  2x Sii9233a)"
+	"\r\n  7: Select Cap + Enc + Dec + Dis                          (VIP:  2x Sii9233a)"
+	"\r\n  8: Select Cap + Enc and Select Dec + Dis                 (VIP:  2x Sii9233a)"
+	"\r\n  9: Select Cap + OSD + SwMs + Dis                         (VIP:  2x Sii9233a)"
+    "\r\n "
+    "\r\n s: System Settings "
+    "\r\n "
+    "\r\n x: Exit "
+    "\r\n "
+    "\r\n Enter Choice: "
+};
+
 Void Chains_menuMainShow()
 {
-    printf(gChains_menuMain0);
-
-    Chains_menuCurrentSettingsShow();
-
-    printf(gChains_menuMainVs);
+    printf(gChains_menuMainCh);
 }
 
-Void Chains_menuMainRunVs(char ch)
+Void Chains_menuMainRunCh(int demoId)
 {
-    gChains_ctrl.enableNsfLink = FALSE;
-
-    switch(ch)
-    {
-        case '1':
-            gChains_ctrl.enableNsfLink = TRUE;
-            Chains_run(Chains_multiChCaptureNsfDei);
-            break;
-        case '2':
-            Chains_run(Chains_multiChEncDecLoopBack);
-            break;
-        case '3':
-            Chains_run(chains_multiChDucatiSystemUseCaseSwMsTriDisplay2);
-            break;
-        case '4':
-            Chains_run(chains_multiChDucatiSystemUseCaseSwMsTriDisplay1);
-            break;
-        default:
-            break;
-    }
+	UInt32 i;
+	switch(demoId)
+	{
+		case 0:
+			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 2, 1);
+			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 2, 1);
+
+			for (i=0; i<gChains_ctrl.chCapNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= FALSE;
+				gChains_ctrl.chCfg[i].serverEnable 	= TRUE;
+				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
+
+			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= FALSE;
+				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].clientEnable 	= TRUE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+
+			Chains_run(Chains_CapDis);
+			break;
+
+		case 1:
+			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 4, 1);
+			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 2, 1);
+
+			for (i=0; i<gChains_ctrl.chCapNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= FALSE;
+				gChains_ctrl.chCfg[i].serverEnable 	= TRUE;
+				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
+
+			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= FALSE;
+				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].clientEnable 	= TRUE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+
+			Chains_run(Chains_CapSwMsDis);
+			break;
+
+		case 2:
+			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 2, 1);
+			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 0, 0);
+
+			for (i=0; i<gChains_ctrl.chCapNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].serverEnable 	= TRUE;
+				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
+
+			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].clientEnable 	= TRUE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+
+			Chains_run(Chains_doubleChCapEncSend);
+			break;
+
+		case 3:
+			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 0, 0);
+			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 2, 2);
+
+			for (i=0; i<gChains_ctrl.chCapNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].serverEnable 	= TRUE;
+				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
+
+			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].clientEnable 	= TRUE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+
+			Chains_run(Chains_doubleChRecvDecDis);
+			break;
+
+		case 4:
+			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 2, 1);
+			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 2, 1);
+
+			for (i=0; i<gChains_ctrl.chCapNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
+
+			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+
+			Chains_run(Chains_SelCapNsfEncDecSwMsDis);
+			break;
+
+		case 5:
+			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 0, 0);
+			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 4, 1);
+
+			for (i=0; i<gChains_ctrl.chCapNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
+
+			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].clientEnable 	= TRUE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+
+			Chains_run(Chains_RecvOneDecDis);
+			break;
+
+		case 6:
+			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 0, 0);
+			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 4, 1);
+
+			for (i=0; i<gChains_ctrl.chCapNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
+
+			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].clientEnable 	= TRUE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+			Chains_run(Chains_RecvFourDecSwMsDis);
+			break;
+
+		case 7:
+			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 2, 1);
+			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 2, 1);
+
+			for (i=0; i<gChains_ctrl.chCapNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
+
+			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+			Chains_run(Chains_CapEncDecDis);
+			break;
+
+
+		case 8:
+			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 3, 1);
+			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 2, 1);
+
+			for (i=0; i<gChains_ctrl.chCapNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].serverEnable 	= TRUE;
+				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
+
+			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= TRUE;
+				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].clientEnable 	= TRUE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+
+			Chains_run(Chains_SelCapSelRecv);
+			break;
+
+		case 9:
+			gChains_ctrl.chCapNum = Chains_getIntValue("Number of capture channel encode", 0, 4, 1);
+			gChains_ctrl.chRecNum = Chains_getIntValue("Number of Net channel decode", 0, 2, 1);
+
+			for (i=0; i<gChains_ctrl.chCapNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= FALSE;
+				gChains_ctrl.chCfg[i].serverEnable 	= TRUE;
+				gChains_ctrl.chCfg[i].clientEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+			gChains_ctrl.chNum = gChains_ctrl.chCapNum + gChains_ctrl.chRecNum;
+
+			for (i=gChains_ctrl.chCapNum; i < gChains_ctrl.chNum; i++)
+			{
+				gChains_ctrl.chCfg[i].encFlag		= FALSE;
+				gChains_ctrl.chCfg[i].serverEnable 	= FALSE;
+				gChains_ctrl.chCfg[i].clientEnable 	= TRUE;
+				gChains_ctrl.chCfg[i].protocol     	= TRANSFER_PROTOCOL_NONE;
+			}
+
+
+			Chains_run(Chains_singleChCapOsdDis);
+			break;
+
+
+	}
 }
 
 int main ( int argc, char **argv )
@@ -234,6 +609,7 @@ Void Chains_main()
 {
     char ch[MAX_INPUT_STR_SIZE];
     Bool done;
+	int demoId;
 
     done = FALSE;
 
@@ -241,111 +617,40 @@ Void Chains_main()
 
     while(!done)
     {
-        Chains_menuMainShow();
+		demoId = ~0;
+        
+		Chains_menuMainShow();
 
         fgets(ch, MAX_INPUT_STR_SIZE, stdin);
-        if(ch[1] != '\n' || ch[0] == '\n')
-            continue;
+
+		if(ch[0] >= '0' && ch[0] <= '9')
+		{
+			demoId = atoi(ch);
+		}
 
         printf(" \r\n");
 
-        Chains_menuMainRunVs(ch[0]);
+        Chains_menuMainRunCh(demoId);
 
         switch(ch[0])
         {
-            case 's':
-                Chains_menuSettings();
-                break;
             case 'x':
                 done = TRUE;
                 break;
-            case 'd':
-                Chains_detectBoard();
-                break;
         }
 
     }
 }
 
-Void Chains_menuCurrentSettingsShow()
-{
-    static char *nsfModeName[] =
-        { "SNF + TNF", "CHR DS ONLY" };
-
-    printf("\r\n Current System Settings,");
-    printf("\r\n NSF Mode              : %s", nsfModeName[gChains_ctrl.bypassNsf]);
-}
-
-char gChains_menuSettings0[] = {
-    "\r\n ==============="
-    "\r\n System Settings"
-    "\r\n ==============="
-    "\r\n"
-};
-
-char gChains_menuSettings1[] = {
-    "\r\n"
-    "\r\n 1: NSF Bypass Mode"
-    "\r\n "
-    "\r\n x: Exit "
-    "\r\n "
-};
-
-Void Chains_menuSettingsShow()
-{
-    printf(gChains_menuSettings0);
-
-    Chains_menuCurrentSettingsShow();
-
-    printf(gChains_menuSettings1);
-}
-
-Void Chains_menuSettings()
-{
-    char ch[MAX_INPUT_STR_SIZE];
-    Bool done = FALSE;
-    char inputStr[MAX_INPUT_STR_SIZE];
-    Int32 value;
-
-    Chains_menuSettingsShow();
-
-    while(!done)
-    {
-        printf("\r\n Enter Choice: ");
-
-    fgets(ch, MAX_INPUT_STR_SIZE, stdin);
-    if(ch[1] != '\n' || ch[0] == '\n')
-        continue;
-        printf(" \r\n");
-
-        switch(ch[0])
-        {
-            case '1':
-                printf(" \r\n Enter NSF Mode [1: CHR DS ONLY, 2: SNF + TNF] : ");
-                fgets(inputStr, MAX_INPUT_STR_SIZE, stdin);
-                value = atoi(inputStr);
-
-                if(value==1)
-                    gChains_ctrl.bypassNsf = TRUE;
-                if(value==2)
-                    gChains_ctrl.bypassNsf = FALSE;
-
-                break;
-
-            case 'x':
-                done = TRUE;
-                break;
-        }
-    }
-}
-
 Int32 Chains_displayCtrlInit(UInt32 displayRes[])
 {
-    Int32   status, i;
+    Int32   status = OSA_SOK, i;
 
     VDIS_PARAMS_S prm;
 
-    for (i = 0; i < SYSTEM_DC_MAX_VENC; i++)
+    Vdis_params_init(&prm);
+    
+	for (i = 0; i < SYSTEM_DC_MAX_VENC; i++)
     {
         prm.deviceParams[i].resolution = displayRes[i];
     }
@@ -353,14 +658,30 @@ Int32 Chains_displayCtrlInit(UInt32 displayRes[])
    /* Setting SD resolution for SD VENC */
    prm.deviceParams[SYSTEM_DC_VENC_SD].resolution = VSYS_STD_NTSC;
 
-    status = System_linkControl(
+    prm.deviceParams[SYSTEM_DC_VENC_HDMI].enable = TRUE;
+    prm.deviceParams[SYSTEM_DC_VENC_DVO2].enable = TRUE;
+    prm.deviceParams[SYSTEM_DC_VENC_HDCOMP].enable = TRUE;
+    prm.deviceParams[SYSTEM_DC_VENC_SD].enable = TRUE;
+
+	prm.enableLayoutGridDraw	= TRUE;
+    prm.enableConfigExtVideoEncoder = TRUE;
+    prm.enableConfigExtThsFilter = FALSE;
+    prm.enableEdgeEnhancement = TRUE;
+    prm.numChannels = 2;
+    prm.numUserChannels = 1;
+
+	Vdis_tiedVencInit(VDIS_DEV_HDCOMP,VDIS_DEV_DVO2,&prm);
+	Vdis_init(&prm);
+
+	status = System_linkControl(
         SYSTEM_LINK_ID_M3VPSS,
         SYSTEM_M3VPSS_CMD_GET_DISPLAYCTRL_INIT,
         &prm,
         sizeof(prm),
         TRUE
         );
-    UTILS_assert(status==OSA_SOK);
+	
+	UTILS_assert(status==OSA_SOK);
 
     return status;
 }
@@ -376,16 +697,12 @@ Int32 Chains_displayCtrlDeInit()
         0,
         TRUE
         );
+	Vdis_exit();
     UTILS_assert(status==OSA_SOK);
 
     return status;
 }
 
-Int32 Chains_grpxEnable(UInt32 grpxId, Bool enable)
-{
-    return 0;
-}
-
 Int32 Chains_prfLoadCalcEnable(Bool enable, Bool printStatus, Bool printTskLoad)
 {
     UInt32 numProcs, procId;
@@ -695,3 +1012,100 @@ unsigned int Chains_IntraFrRateInputRunTime()
 
     return value;
 }
+
+
+
+char gChains_CapSwMsDisMenu[] = {
+    "\r\n ===================="
+    "\r\n Chains Run-time Menu"
+    "\r\n ===================="
+    "\r\n"
+    "\r\n 0: Stop Chain"
+    "\r\n"
+    "\r\n Enter Choice: "
+};
+
+char gChains_RecvOneDecDisMenu[] = {
+    "\r\n ===================="
+    "\r\n Chains Run-time Menu"
+    "\r\n ===================="
+    "\r\n"
+    "\r\n 0: Stop Chain"
+    "\r\n"
+    "\r\n 1: Select One Channel"
+    "\r\n "
+    "\r\n Enter Choice: "
+};
+
+char gChains_RecvFourDecSwMsDisMenu[] = {
+    "\r\n ===================="
+    "\r\n Chains Run-time Menu"
+    "\r\n ===================="
+    "\r\n"
+    "\r\n 0: Stop Chain"
+    "\r\n"
+    "\r\n 1: 2 x 2 Channels Layout"
+    "\r\n 2: 1 + 3 Channels Layout Vertical"
+    "\r\n 3: 1 + 3 Channels Layout Horizontal"
+    "\r\n 4: Change Channels Layout"
+    "\r\n "
+    "\r\n Enter Choice: "
+};
+
+char gChains_CapRecvFourDecSwMsDisMenu[] = {
+    "\r\n ===================="
+    "\r\n Chains Run-time Menu"
+    "\r\n ===================="
+    "\r\n"
+    "\r\n 0: Stop Chain"
+    "\r\n"
+    "\r\n 1: 1 + 4 Channels Layout Vertical"
+    "\r\n 2: 1 + 4 Channels Layout Horizontal"
+    "\r\n 3: Change Channels Layout"
+    "\r\n "
+    "\r\n Enter Choice: "
+};
+
+/*
+ *  --------------------- Public function definition ---------------------------
+ */
+
+char Chains_CapSwMsDisMenu()
+{
+    char ch[MAX_INPUT_SIZE];
+    printf(gChains_CapSwMsDisMenu);
+    fgets(ch, MAX_INPUT_SIZE, stdin);
+    if(ch[1] != '\n' || ch[0] == '\n')
+    ch[0] = '\n';
+    return ch[0];
+}
+
+char Chains_RecvOneDecDisMenu()
+{
+    char ch[MAX_INPUT_SIZE];
+    printf(gChains_RecvOneDecDisMenu);
+    fgets(ch, MAX_INPUT_SIZE, stdin);
+    if(ch[1] != '\n' || ch[0] == '\n')
+    ch[0] = '\n';
+    return ch[0];
+}
+
+char Chains_RecvFourDecSwMsDisMenu()
+{
+    char ch[MAX_INPUT_SIZE];
+    printf(gChains_RecvFourDecSwMsDisMenu);
+    fgets(ch, MAX_INPUT_SIZE, stdin);
+    if(ch[1] != '\n' || ch[0] == '\n')
+    ch[0] = '\n';
+    return ch[0];
+}
+
+char Chains_CapRecvFourDecSwMsDisMenu()
+{
+    char ch[MAX_INPUT_SIZE];
+    printf(gChains_CapRecvFourDecSwMsDisMenu);
+    fgets(ch, MAX_INPUT_SIZE, stdin);
+    if(ch[1] != '\n' || ch[0] == '\n')
+    ch[0] = '\n';
+    return ch[0];
+}
diff --git a/dvr_rdk/demos/link_api_demos/common/chains_swMs.c b/dvr_rdk/demos/link_api_demos/common/chains_swMs.c
old mode 100755
new mode 100644
index 8a6df85..cd36a6f
--- a/dvr_rdk/demos/link_api_demos/common/chains_swMs.c
+++ b/dvr_rdk/demos/link_api_demos/common/chains_swMs.c
@@ -13,41 +13,7 @@
 
 Int32 Chains_swMsGetOutSize(UInt32 outRes, UInt32 * width, UInt32 * height)
 {
-    switch (outRes)
-    {
-        case VSYS_STD_MAX:
-            *width = 1920;
-            *height = 1200;
-            break;
-
-        case VSYS_STD_720P_60:
-            *width = 1280;
-            *height = 720;
-            break;
-        case VSYS_STD_XGA_60:
-            *width = 1024;
-            *height = 768;
-            break;
-        default:
-        case VSYS_STD_1080I_60:
-        case VSYS_STD_1080P_60:
-        case VSYS_STD_1080P_30:
-            *width = 1920;
-            *height = 1080;
-            break;
-
-        case VSYS_STD_NTSC:
-            *width = 720;
-            *height = 480;
-            break;
-
-        case VSYS_STD_PAL:
-            *width = 720;
-            *height = 576;
-            break;
-
-    }
-    return 0;
+	return Vsys_getStdSize(outRes, width, height);
 }
 
 Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
@@ -75,10 +41,14 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
     layoutInfo->onlyCh2WinMapChanged = FALSE;
     /* restore the value OR
        Modify with new value if required */
-    layoutInfo->outputFPS = SwMsOutputFps;
+	layoutInfo->outputFPS = SwMsOutputFps;
+
+	for(winId = 0; winId < SYSTEM_SW_MS_MAX_WIN; winId++ ){
+		layoutInfo->winInfo[winId].bypass = FALSE;
+	}
 
-    if(layoutId > CHAINS_MAX_LAYOUTS)
-        layoutId = 0;
+	if(layoutId > CHAINS_MAX_LAYOUTS)
+		layoutId = 0;
 
     if(layoutId == 0)
     {
@@ -98,8 +68,7 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
                 winInfo->height = SystemUtils_align(outHeight/2, heightAlign);
                 winInfo->startX = winInfo->width*col;
                 winInfo->startY = winInfo->height*row;
-                winInfo->bypass = TRUE;
-                winInfo->channelNum = devId*SYSTEM_SW_MS_MAX_WIN + winId;
+                winInfo->channelNum = winId;
             }
         }
 
@@ -113,8 +82,7 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
             winInfo->height = layoutInfo->winInfo[0].height/2;
             winInfo->startX = layoutInfo->winInfo[0].width*2;
             winInfo->startY = winInfo->height*row;
-            winInfo->bypass = TRUE;
-            winInfo->channelNum = devId*SYSTEM_SW_MS_MAX_WIN + winId;
+            winInfo->channelNum = winId;
         }
     }
 
@@ -136,8 +104,7 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
                 winInfo->height = SystemUtils_align(outHeight/2, heightAlign);
                 winInfo->startX = winInfo->width*col;
                 winInfo->startY = winInfo->height*row;
-                winInfo->bypass = TRUE;
-                winInfo->channelNum = devId*SYSTEM_SW_MS_MAX_WIN + winId;
+                winInfo->channelNum = winId;
             }
         }
     }
@@ -156,8 +123,7 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
         winInfo->startY = 0;
         winInfo->width  = outWidth;
         winInfo->height = outHeight;
-        winInfo->bypass = TRUE;
-        winInfo->channelNum = devId*SYSTEM_SW_MS_MAX_WIN + winId;
+        winInfo->channelNum = winId;
     }
 
     if(layoutId == 3)
@@ -174,8 +140,7 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
         winInfo->startY = 0;
         winInfo->width  = outWidth;
         winInfo->height = outHeight;
-        winInfo->bypass = TRUE;
-        winInfo->channelNum = devId*SYSTEM_SW_MS_MAX_WIN + winId;
+        winInfo->channelNum = winId;
 
         for(col=0; col<2; col++)
         {
@@ -201,8 +166,7 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
                             outHeight - winInfo->height - outHeight/20,
                             heightAlign
                             );
-            winInfo->bypass = TRUE;
-            winInfo->channelNum = devId*SYSTEM_SW_MS_MAX_WIN + winId;
+            winInfo->channelNum = winId;
         }
     }
 
@@ -224,8 +188,7 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
                 winInfo->height = SystemUtils_align(outHeight/3, heightAlign);
                 winInfo->startX = winInfo->width*col;
                 winInfo->startY = winInfo->height*row;
-                winInfo->bypass = TRUE;
-                winInfo->channelNum = devId*SYSTEM_SW_MS_MAX_WIN + winId;
+                winInfo->channelNum = winId;
             }
         }
 
@@ -249,8 +212,7 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
                 winInfo->height = SystemUtils_align(outHeight/4, heightAlign);
                 winInfo->startX = winInfo->width*col;
                 winInfo->startY = winInfo->height*row;
-                winInfo->bypass = TRUE;
-                winInfo->channelNum = devId*SYSTEM_SW_MS_MAX_WIN + winId;
+                winInfo->channelNum = winId;
             }
         }
     }
@@ -269,8 +231,7 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
         winInfo->height = SystemUtils_align((outHeight*2)/3, heightAlign);
         winInfo->startX = 0;
         winInfo->startY = 0;
-        winInfo->bypass = TRUE;
-        winInfo->channelNum = devId*SYSTEM_SW_MS_MAX_WIN + winId;
+        winInfo->channelNum = winId;
 
         for(row=0; row<2; row++)
         {
@@ -282,8 +243,7 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
             winInfo->height = SystemUtils_align(layoutInfo->winInfo[0].height/2, heightAlign);
             winInfo->startX = layoutInfo->winInfo[0].width;
             winInfo->startY = winInfo->height*row;
-            winInfo->bypass = TRUE;
-            winInfo->channelNum = devId*SYSTEM_SW_MS_MAX_WIN + winId;
+            winInfo->channelNum = winId;
 
         }
 
@@ -297,8 +257,7 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
             winInfo->height = SystemUtils_align(layoutInfo->winInfo[0].height/2, heightAlign);
             winInfo->startX = winInfo->width*col;
             winInfo->startY = layoutInfo->winInfo[0].height;
-            winInfo->bypass = TRUE;
-            winInfo->channelNum = devId*SYSTEM_SW_MS_MAX_WIN + winId;
+            winInfo->channelNum = winId;
         }
 
     }
@@ -316,8 +275,7 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
         winInfo->height = SystemUtils_align((outHeight)/4, heightAlign)*3;
         winInfo->startX = 0;
         winInfo->startY = 0;
-        winInfo->bypass = TRUE;
-        winInfo->channelNum = devId*SYSTEM_SW_MS_MAX_WIN + winId;
+        winInfo->channelNum = winId;
 
         for(row=0; row<3; row++)
         {
@@ -333,8 +291,7 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
                                 heightAlign);
             winInfo->startX = layoutInfo->winInfo[0].width;
             winInfo->startY = winInfo->height*row;
-            winInfo->bypass = TRUE;
-            winInfo->channelNum = devId*SYSTEM_SW_MS_MAX_WIN + winId;
+            winInfo->channelNum = winId;
 
         }
 
@@ -350,8 +307,7 @@ Void Chains_swMsGenerateLayoutParams(UInt32 devId, UInt32 layoutId,
                                 heightAlign);
             winInfo->startX = winInfo->width*col;
             winInfo->startY = layoutInfo->winInfo[0].height;
-            winInfo->bypass = TRUE;
-            winInfo->channelNum = devId*SYSTEM_SW_MS_MAX_WIN + winId;
+            winInfo->channelNum = winId;
         }
     }
 }
diff --git a/dvr_rdk/demos/link_api_demos/common/chains_swMs.h b/dvr_rdk/demos/link_api_demos/common/chains_swMs.h
old mode 100755
new mode 100644
diff --git a/dvr_rdk/demos/link_api_demos/common/ti_swosd_logo_224x30_yuv422i.h b/dvr_rdk/demos/link_api_demos/common/ti_swosd_logo_224x30_yuv422i.h
new file mode 100644
index 0000000..4e8ed5c
--- /dev/null
+++ b/dvr_rdk/demos/link_api_demos/common/ti_swosd_logo_224x30_yuv422i.h
@@ -0,0 +1,852 @@
+#ifndef _MCFW_SWOSD_TI_LOGO_H_
+#define _MCFW_SWOSD_TI_LOGO_H_
+
+// pitch of 232 pixels
+static unsigned char gMCFW_swosdTiLogoYuv422i[] = {
+
+
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xf1,0x85,0x8a,0x72,0x67,0xe9,0x65,0x71,0x74,0xf3,0x65,0x71,0x65,0xf9,
+0x90,0x77,0xf0,0x86,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xe9,0x8c,0x61,0x6f,0x43,0xff,0x47,0x64,0x44,0xff,0x49,0x63,0x49,0xff,
+0x73,0x76,0xeb,0x8b,0xfa,0x7e,0xfa,0x7d,0xdf,0x7c,0xc8,0xa9,0xd7,0x7c,0xf8,0x80,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xf1,0x85,0x64,0x6e,0x42,0xff,0x47,0x64,0x49,0xff,0x47,0x64,0x46,0xff,
+0x73,0x76,0xed,0x89,0xfa,0x7e,0xfa,0x7d,0x6f,0x70,0x40,0xfd,0x52,0x72,0xd0,0xa2,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xf1,0x85,0x64,0x6e,0x42,0xff,0x47,0x64,0x49,0xff,0x47,0x64,0x47,0xff,
+0x73,0x76,0xf5,0x82,0xfa,0x7e,0xf1,0x85,0x64,0x6e,0x43,0xff,0x75,0x75,0xdc,0x97,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xf1,0x85,0x64,0x6e,0x43,0xff,0x47,0x64,0x47,0xff,0x47,0x64,0x47,0xff,
+0x73,0x76,0xeb,0x8b,0xfa,0x7e,0xfa,0x7d,0xa8,0x77,0xa0,0xcd,0xc9,0x7b,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xf1,0x85,0x64,0x6e,0x42,0xff,0x47,0x64,0x49,0xff,0x44,0x66,0x44,0xff,
+0x55,0x71,0x93,0xd8,0xd4,0x7a,0xdf,0x95,0xab,0x76,0xab,0xc3,0xe9,0x7b,0xdb,0x98,
+0x9d,0x75,0x9d,0xcf,0x9d,0x75,0x90,0xd4,0x9e,0x78,0xe2,0x92,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xf8,0x80,0x88,0x80,0x70,0x80,0x70,0x80,0x72,0x7e,0x7a,0x7d,0x82,0x7e,0x80,0x80,
+0x80,0x80,0x70,0x80,0x70,0x80,0x72,0x7d,0x7a,0x7e,0xd2,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xa2,0x7e,0x6a,0x7d,
+0x82,0x7e,0x78,0x80,0x82,0x7e,0xe2,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xf0,0x86,0x64,0x6e,0x42,0xff,0x47,0x64,0x49,0xff,0x47,0x64,0x47,0xff,
+0x47,0x64,0x49,0xff,0xb8,0x77,0xad,0xc1,0x44,0x66,0x44,0xff,0xb4,0x7a,0x90,0xcd,
+0x44,0x66,0x44,0xff,0x49,0x63,0x49,0xff,0x42,0x72,0xb7,0xb8,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0x97,0x7c,0x07,0x80,0x08,0x80,0x0a,0x7d,0x12,0x7e,0x08,0x80,0x0a,0x7e,0x08,0x80,
+0x08,0x80,0x0a,0x7d,0x0a,0x7e,0x08,0x80,0x07,0x7c,0x50,0x80,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xaa,0x7e,0x18,0x80,
+0x08,0x80,0x08,0x80,0x72,0x7e,0xf0,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xf1,0x85,0x64,0x6e,0x42,0xff,0x47,0x64,0x49,0xff,0x44,0x66,0x44,0xff,
+0x44,0x66,0x48,0xff,0xc9,0x7b,0x90,0xbf,0x43,0x6a,0x64,0xff,0xbc,0x7a,0x72,0xd2,
+0x44,0x66,0x47,0xff,0x46,0x61,0x47,0xff,0x3c,0x71,0xc1,0xaf,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0x57,0x7c,0x62,0x7d,0xaa,0x7e,0xc2,0x7d,0xd0,0x80,0x80,0x80,0x08,0x80,0x08,0x80,
+0x50,0x80,0xca,0x7d,0xd2,0x7e,0xba,0x7d,0x92,0x7e,0x57,0x80,0xe8,0x80,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x62,0x7d,
+0x07,0x7c,0x1f,0x80,0xd0,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xf1,0x85,0x64,0x6e,0x42,0xff,0x47,0x64,0x47,0xff,0x47,0x64,0x47,0xff,
+0x44,0x6e,0x6f,0xf7,0xd4,0x7d,0x75,0xc8,0x40,0x6b,0x79,0xee,0xc7,0x7c,0x74,0xcf,
+0x4d,0x69,0x47,0xff,0x46,0x61,0x47,0xff,0x44,0x71,0xc7,0xaa,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xc2,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xd2,0x7d,0x12,0x7e,0x08,0x80,
+0x90,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xda,0x7e,0xa2,0x7d,0xc0,0x80,0xd8,0x80,
+0xd8,0x80,0xd8,0x80,0xd7,0x7c,0xe2,0x7d,0xf2,0x7e,0xfa,0x7d,0xd0,0x80,0xd2,0x7d,
+0xda,0x7e,0xe0,0x80,0xd2,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xd2,0x7e,0xe0,0x80,
+0xca,0x7e,0xe2,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xe2,0x7e,0xd2,0x7d,
+0xf2,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xd2,0x7e,0xb4,0x7b,0xca,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x62,0x7d,
+0x08,0x80,0x22,0x7d,0xd0,0x80,0xfa,0x7d,0xe2,0x7e,0xd2,0x7d,0xe0,0x80,0xea,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xea,0x7e,0xc8,0x80,0xda,0x7e,0xd8,0x80,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xe2,0x7d,0xb4,0x7d,0xc2,0x7d,0xf8,0x80,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xda,0x7d,0xd8,0x80,0xe0,0x80,0xe0,0x80,0xe0,0x80,
+0xda,0x7e,0xd0,0x80,0xd8,0x80,0xea,0x7d,0xfa,0x7e,0xd2,0x7d,0xe0,0x80,0xe0,0x80,
+0xda,0x7e,0xda,0x7d,0xd8,0x80,0xe0,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xf2,0x7e,0xd2,0x7d,0xe0,0x80,0xda,0x7d,0xd2,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xd2,0x7d,0xd2,0x7e,0xd2,0x7d,0xe0,0x80,0xe8,0x80,0xd2,0x7e,0xda,0x7d,
+0xda,0x7e,0xf0,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xe2,0x7e,0xdf,0x80,0xda,0x7e,0xd0,0x80,0xf0,0x80,0xda,0x7d,0xd8,0x80,0xe0,0x80,
+0xda,0x7e,0xd8,0x80,0xd8,0x80,0xd8,0x80,0xd8,0x80,0xd8,0x80,0xfa,0x7e,0xfa,0x7d,
+0xd8,0x80,0xda,0x7d,0xd8,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xd8,0x80,0xd2,0x7d,0xd2,0x7e,0xea,0x7d,0xf8,0x80,0xe2,0x7d,0xd8,0x80,0xda,0x7d,
+0xda,0x7e,0xe0,0x80,0xe0,0x80,0xd8,0x80,0xd8,0x80,0xe0,0x80,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xd7,0x7c,0xba,0x7d,0xca,0x7e,0xf8,0x80,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xf1,0x85,0x64,0x6e,0x42,0xff,0x47,0x64,0x47,0xff,0x43,0x6a,0x5e,0xff,
+0xc8,0x77,0xe7,0x8e,0xc9,0x7b,0x4a,0xd8,0x3e,0x6d,0x7a,0xed,0xfa,0x7e,0xef,0x87,
+0x93,0x76,0x49,0xee,0x47,0x64,0x44,0xff,0x48,0x74,0xc0,0xb0,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xca,0x7d,0x0a,0x7e,0x08,0x80,
+0x8a,0x7e,0xfa,0x7d,0xfa,0x7e,0xc8,0x80,0x42,0x7e,0x32,0x7d,0x32,0x7e,0x1f,0x80,
+0x1f,0x7c,0x1a,0x7d,0x1f,0x7c,0x1f,0x80,0x6a,0x7e,0xfa,0x7d,0x70,0x80,0x1f,0x80,
+0x32,0x7e,0x2a,0x7d,0x58,0x80,0xe0,0x80,0xfa,0x7e,0xda,0x7d,0x50,0x80,0x2a,0x7d,
+0x40,0x80,0xb0,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xca,0x7d,0x32,0x7e,0x2a,0x7d,
+0x68,0x80,0xf8,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xd2,0x7e,0x50,0x80,
+0x1f,0x7c,0x07,0x80,0x12,0x7e,0x32,0x7d,0x48,0x80,0xb0,0x80,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x62,0x7d,
+0x08,0x80,0x22,0x7d,0xc8,0x80,0xfa,0x7d,0x92,0x7e,0x32,0x7d,0x2a,0x7e,0x40,0x80,
+0xd2,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xb4,0x7d,0x38,0x80,0x2a,0x7e,0x68,0x80,
+0xfa,0x7e,0xea,0x7d,0x68,0x80,0x20,0x80,0x12,0x7e,0x0a,0x7d,0x32,0x7e,0x42,0x7d,
+0x98,0x80,0xfa,0x7d,0x9a,0x7e,0x1f,0x80,0x1a,0x7e,0x1f,0x80,0x2a,0x7e,0x32,0x7d,
+0x22,0x7e,0x20,0x80,0x1f,0x7c,0x42,0x7d,0xd0,0x80,0x80,0x80,0x22,0x7e,0x32,0x7d,
+0x2a,0x7e,0x1f,0x80,0x18,0x80,0x22,0x7d,0x38,0x80,0x6a,0x7d,0xd2,0x7e,0xfa,0x7d,
+0xd8,0x80,0x48,0x80,0x2a,0x7e,0x2a,0x7d,0x5a,0x7e,0xea,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0x72,0x7d,0x22,0x7e,0x38,0x80,0xa7,0x7c,0xbf,0x80,0x48,0x80,0x2a,0x7d,
+0x2a,0x7e,0x60,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xd2,0x7d,
+0x42,0x7e,0x2a,0x7d,0x2a,0x7e,0x62,0x7d,0xd8,0x80,0x88,0x80,0x32,0x7e,0x2a,0x7d,
+0x2a,0x7e,0x1f,0x80,0x1a,0x7e,0x1f,0x80,0x18,0x80,0x2a,0x7d,0xb4,0x7d,0xfa,0x7d,
+0x60,0x80,0x2a,0x7d,0x2a,0x7e,0x68,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0x8a,0x7e,0x2a,0x7d,0x32,0x7e,0xa7,0x80,0xa7,0x7c,0x2a,0x7d,0x1f,0x7c,0x1f,0x80,
+0x2a,0x7e,0x32,0x7d,0x22,0x7e,0x20,0x80,0x18,0x80,0x40,0x80,0xd0,0x80,0xfa,0x7d,
+0xca,0x7e,0x50,0x80,0x1f,0x7c,0x07,0x80,0x12,0x7e,0x40,0x80,0x42,0x7e,0xb8,0x80,
+0xfa,0x7e,0xfa,0x7d,0xd9,0x7b,0xd4,0x9f,0xd4,0x7a,0xd4,0x9f,0xd1,0x7b,0xd1,0xa1,
+0xd7,0x7c,0xbb,0xae,0x5c,0x6e,0x45,0xff,0x47,0x64,0x44,0xff,0x40,0x6b,0x7a,0xed,
+0xfa,0x7e,0xfa,0x7d,0xb4,0x7a,0x3c,0xe5,0x3c,0x6e,0x93,0xd8,0xfa,0x7e,0xfa,0x7d,
+0x9e,0x78,0x45,0xeb,0x47,0x64,0x47,0xff,0x3f,0x70,0x9d,0xcf,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xc2,0x7d,0x0a,0x7e,0x08,0x80,
+0x8a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x72,0x7e,0x07,0x80,0x07,0x7c,0x50,0x80,
+0x7f,0x7c,0x7f,0x80,0x7f,0x7c,0x42,0x7d,0x12,0x7e,0xbf,0x80,0xea,0x7e,0x50,0x80,
+0x0a,0x7e,0x08,0x80,0x58,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x32,0x7e,0x18,0x80,
+0xb8,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x70,0x80,0x08,0x80,0x08,0x80,
+0x0a,0x7e,0xc2,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xe2,0x7d,0x2a,0x7e,0x08,0x80,
+0x50,0x80,0x82,0x7d,0x80,0x80,0x42,0x7d,0x0a,0x7e,0x62,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x60,0x80,
+0x08,0x80,0x22,0x7d,0xca,0x7e,0xfa,0x7d,0xf0,0x80,0x3f,0x80,0x08,0x80,0x08,0x80,
+0x3f,0x7c,0xe2,0x7d,0xfa,0x7e,0xfa,0x7d,0xf8,0x80,0x60,0x80,0x07,0x7c,0xb8,0x80,
+0xfa,0x7e,0x5a,0x7d,0x07,0x7c,0x42,0x7d,0x7f,0x7c,0x7f,0x80,0x58,0x80,0x08,0x80,
+0x38,0x80,0xea,0x7d,0x40,0x80,0x2a,0x7d,0x8a,0x7e,0x58,0x80,0x0a,0x7e,0x0a,0x7d,
+0x38,0x80,0x7a,0x7d,0x68,0x80,0x08,0x80,0xaa,0x7e,0xe0,0x80,0x18,0x80,0x08,0x80,
+0x1f,0x7c,0x72,0x7d,0x82,0x7e,0x5a,0x7d,0x0a,0x7e,0x0a,0x7d,0x22,0x7e,0xd0,0x80,
+0xfa,0x7e,0x80,0x80,0x08,0x80,0x08,0x80,0xa2,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xc8,0x80,0x12,0x7e,0x2a,0x7d,0xea,0x7e,0xfa,0x7d,0x60,0x80,0x08,0x80,
+0x08,0x80,0x12,0x7d,0xb0,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x7f,0x80,
+0x0a,0x7e,0x08,0x80,0x07,0x7c,0xba,0x7d,0xfa,0x7e,0xe8,0x80,0x32,0x7e,0x08,0x80,
+0x18,0x80,0x6a,0x7d,0x7f,0x7c,0x7f,0x80,0x77,0x7c,0x1f,0x80,0x48,0x80,0xf8,0x80,
+0xd0,0x80,0x12,0x7d,0x08,0x80,0x08,0x80,0x6a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xd0,0x80,0x20,0x80,0x38,0x80,0xe8,0x80,0x50,0x80,0x1f,0x80,0x78,0x80,0x68,0x80,
+0x0a,0x7e,0x08,0x80,0x2a,0x7e,0x82,0x7d,0x62,0x7e,0x1a,0x7d,0x82,0x7e,0xea,0x7d,
+0x40,0x80,0x08,0x80,0x50,0x80,0x82,0x7d,0x7a,0x7e,0x42,0x7d,0x08,0x80,0x60,0x80,
+0xfa,0x7e,0xfa,0x7d,0x7d,0x71,0x4f,0xf7,0x4e,0x6c,0x4e,0xff,0x54,0x6e,0x4e,0xff,
+0x4e,0x6c,0x54,0xff,0x47,0x64,0x47,0xff,0x44,0x66,0x44,0xff,0x3e,0x6d,0x84,0xe4,
+0xf7,0x7c,0xfa,0x7d,0x9d,0x75,0x3c,0xec,0x4f,0x70,0xb7,0xb8,0xfa,0x7e,0xef,0x87,
+0x6f,0x70,0x40,0xfd,0x49,0x63,0x49,0xff,0x44,0x66,0x53,0xff,0xdb,0x7a,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xc2,0x7d,0x0a,0x7e,0x08,0x80,
+0x88,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x92,0x7e,0x0a,0x7d,0x12,0x7e,0xd2,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf8,0x80,0xa0,0x80,0xb0,0x80,0xfa,0x7e,0xe0,0x80,
+0x40,0x80,0x0a,0x7d,0x1a,0x7e,0xba,0x7d,0xfa,0x7e,0x90,0x80,0x0a,0x7e,0x98,0x80,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xe0,0x80,0x32,0x7d,0x18,0x80,0x18,0x80,
+0x08,0x80,0x80,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x88,0x80,0x07,0x7c,0x42,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x90,0x80,0x58,0x80,0xda,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x62,0x7d,
+0x08,0x80,0x22,0x7d,0xca,0x7e,0xfa,0x7d,0xfa,0x7e,0x62,0x7d,0x0a,0x7e,0x08,0x80,
+0x08,0x80,0x48,0x80,0xea,0x7e,0xfa,0x7d,0xfa,0x7e,0x7f,0x80,0x12,0x7e,0xda,0x7d,
+0xc2,0x7e,0x0a,0x7d,0x32,0x7e,0xda,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xba,0x7d,
+0x50,0x80,0x77,0x80,0x70,0x80,0xe2,0x7d,0xfa,0x7e,0xc2,0x7d,0x1f,0x7c,0x07,0x80,
+0xa2,0x7e,0xfa,0x7d,0xfa,0x7e,0x98,0x80,0x7a,0x7e,0xf0,0x80,0x40,0x80,0x08,0x80,
+0x6a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x8a,0x7e,0x0a,0x7d,0x07,0x7c,0x77,0x80,
+0xfa,0x7e,0xa0,0x80,0x0a,0x7e,0x18,0x80,0xc2,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xe2,0x7d,0x2a,0x7e,0x42,0x7d,0xf8,0x80,0xfa,0x7d,0x72,0x7e,0x07,0x80,
+0x08,0x80,0x08,0x80,0x58,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xe2,0x7e,0x32,0x7d,
+0x08,0x80,0x08,0x80,0x22,0x7e,0xe0,0x80,0xfa,0x7e,0xfa,0x7d,0x50,0x80,0x07,0x80,
+0x42,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xd2,0x7d,0x82,0x7e,0xe2,0x7d,
+0xfa,0x7e,0x22,0x7d,0x0a,0x7e,0x08,0x80,0x08,0x80,0x80,0x80,0xfa,0x7e,0xfa,0x7d,
+0xea,0x7e,0x32,0x7d,0x62,0x7e,0xca,0x7d,0x70,0x80,0xd0,0x80,0xfa,0x7e,0xea,0x7d,
+0x32,0x7e,0x0a,0x7d,0x6a,0x7e,0xfa,0x7d,0xfa,0x7e,0xb0,0x80,0x70,0x80,0x7a,0x7d,
+0x08,0x80,0x58,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x97,0x7c,0x50,0x80,
+0xfa,0x7e,0xfa,0x7d,0x9d,0x75,0x3c,0xec,0x47,0x64,0x46,0xff,0x47,0x64,0x47,0xff,
+0x47,0x64,0x47,0xff,0x47,0x64,0x47,0xff,0x44,0x66,0x47,0xff,0x44,0x66,0x49,0xff,
+0x75,0x75,0xcf,0xa3,0x7a,0x72,0x40,0xfd,0x65,0x75,0xb9,0xb6,0x93,0x76,0x55,0xeb,
+0x48,0x68,0x44,0xff,0x47,0x64,0x47,0xff,0x44,0x66,0x47,0xff,0x83,0x76,0xf5,0x82,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xc2,0x7d,0x0a,0x7e,0x08,0x80,
+0x88,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x97,0x7c,0x0a,0x7d,0x12,0x7e,0xd8,0x80,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xb8,0x80,0x1a,0x7d,0x07,0x7c,0x50,0x80,0xaa,0x7e,0x1f,0x80,0x58,0x80,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x92,0x7e,0x1a,0x7d,0x9a,0x7e,0x58,0x80,
+0x08,0x80,0x38,0x80,0xea,0x7e,0xfa,0x7d,0xfa,0x7e,0x77,0x80,0x08,0x80,0x2a,0x7d,
+0xd0,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xec,0x7b,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x62,0x7d,
+0x07,0x7c,0x1f,0x80,0xca,0x7e,0xfa,0x7d,0xfa,0x7e,0x58,0x80,0x22,0x7e,0x38,0x80,
+0x08,0x80,0x0a,0x7d,0x62,0x7e,0xfa,0x7d,0xfa,0x7e,0x7f,0x80,0x0a,0x7e,0xda,0x7d,
+0xb4,0x7d,0x0a,0x7d,0x12,0x7e,0xb4,0x7b,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xf0,0x80,0xd2,0x7d,0xf8,0x80,0xfa,0x7d,0xfa,0x7e,0xd2,0x7d,0x18,0x80,0x0a,0x7d,
+0xa0,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xea,0x7e,0xea,0x7d,0x32,0x7e,0x0a,0x7d,
+0x70,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xb8,0x80,0x1a,0x7d,0x08,0x80,0x6a,0x7d,
+0xfa,0x7e,0x9a,0x7d,0x08,0x80,0x18,0x80,0xbf,0x7c,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xda,0x7d,0x22,0x7e,0x42,0x7d,0xfa,0x7e,0xfa,0x7d,0x6a,0x7e,0x12,0x7d,
+0x32,0x7e,0x08,0x80,0x18,0x80,0xc2,0x7d,0xfa,0x7e,0xfa,0x7d,0x97,0x7c,0x1f,0x80,
+0x32,0x7e,0x0a,0x7d,0x20,0x80,0xda,0x7d,0xfa,0x7e,0xfa,0x7d,0x50,0x80,0x07,0x80,
+0x48,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0x22,0x7d,0x42,0x7e,0x2a,0x7d,0x08,0x80,0x12,0x7d,0x92,0x7e,0xfa,0x7d,
+0xe8,0x80,0x22,0x7d,0x50,0x80,0xea,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xea,0x7d,
+0x2a,0x7e,0x08,0x80,0x70,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xea,0x7e,0x68,0x80,
+0x08,0x80,0x40,0x80,0xcf,0x7c,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xea,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xf0,0x7f,0x90,0xb0,0x49,0x63,0x47,0xff,0x47,0x64,0x46,0xff,
+0x46,0x61,0x47,0xff,0x47,0x64,0x47,0xff,0x49,0x63,0x47,0xff,0x49,0x63,0x49,0xff,
+0x5c,0x71,0xc9,0xa8,0x64,0x6e,0x42,0xff,0x80,0x74,0xbe,0xb2,0x5c,0x6e,0x45,0xff,
+0x47,0x64,0x47,0xff,0x47,0x64,0x47,0xff,0x47,0x64,0x47,0xff,0x83,0x76,0xf5,0x82,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xc2,0x7d,0x0a,0x7e,0x08,0x80,
+0x8a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x92,0x7e,0x0a,0x7d,0x12,0x7e,0xa7,0x80,
+0xe2,0x7e,0xdf,0x80,0xba,0x7e,0x5f,0x80,0xd8,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0x78,0x80,0x08,0x80,0x0a,0x7d,0x0a,0x7e,0x38,0x80,0xea,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x40,0x80,0x38,0x80,0xfa,0x7e,0x92,0x7d,
+0x08,0x80,0x0a,0x7d,0xb0,0x80,0xfa,0x7d,0xfa,0x7e,0xaa,0x7d,0x08,0x80,0x08,0x80,
+0x12,0x7e,0x40,0x80,0x70,0x80,0xa7,0x80,0xd8,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x60,0x80,
+0x0a,0x7e,0x22,0x7d,0xca,0x7e,0xfa,0x7d,0xfa,0x7e,0x50,0x80,0x3f,0x7c,0xd2,0x7d,
+0x42,0x7e,0x07,0x80,0x0a,0x7e,0x80,0x80,0xfa,0x7e,0x82,0x7d,0x0a,0x7e,0xd2,0x7d,
+0xd8,0x80,0x22,0x7d,0x08,0x80,0x0a,0x7d,0x32,0x7e,0x6a,0x7d,0x9f,0x7c,0xd2,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xca,0x7d,0x1f,0x7c,0x07,0x80,
+0x9a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf0,0x80,0x38,0x80,0x08,0x80,
+0x68,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x70,0x80,0x0a,0x7d,0x08,0x80,0xa2,0x7d,
+0xfa,0x7e,0xa2,0x7d,0x08,0x80,0x18,0x80,0xbf,0x7c,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xe0,0x80,0x22,0x7e,0x40,0x80,0xf8,0x80,0xfa,0x7d,0x6a,0x7e,0x20,0x80,
+0x90,0x80,0x1f,0x80,0x0a,0x7e,0x62,0x7d,0xfa,0x7e,0xfa,0x7d,0x38,0x80,0x58,0x80,
+0x7a,0x7e,0x12,0x7d,0x18,0x80,0xd8,0x80,0xfa,0x7e,0xfa,0x7d,0x50,0x80,0x07,0x80,
+0x38,0x80,0xd0,0x80,0xe2,0x7e,0xe2,0x7d,0x82,0x7e,0x70,0x80,0xf2,0x7e,0xfa,0x7d,
+0xfa,0x7e,0x20,0x80,0x88,0x80,0xca,0x7d,0x18,0x80,0x08,0x80,0x20,0x80,0xb0,0x80,
+0xfa,0x7e,0x32,0x7d,0x48,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xea,0x7d,
+0x2a,0x7e,0x08,0x80,0x6a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xa7,0x80,
+0x0a,0x7e,0x08,0x80,0x12,0x7e,0x38,0x80,0x78,0x80,0xb0,0x80,0xd8,0x80,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf7,0x80,0x88,0x74,0x3c,0xf3,0x47,0x64,0x47,0xff,
+0x47,0x64,0x47,0xff,0x47,0x64,0x47,0xff,0x47,0x64,0x46,0xff,0x47,0x64,0x49,0xff,
+0x82,0x73,0xcc,0xa6,0x53,0x6a,0x44,0xff,0x90,0x74,0xc0,0xb0,0x4b,0x6a,0x47,0xff,
+0x47,0x64,0x47,0xff,0x47,0x64,0x47,0xff,0x49,0x63,0x47,0xff,0x80,0x77,0xf5,0x82,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xc2,0x7d,0x0a,0x7e,0x08,0x80,
+0x88,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x92,0x7e,0x0a,0x7d,0x0a,0x7e,0x18,0x80,
+0x1f,0x7c,0x1f,0x80,0x12,0x7e,0x18,0x80,0xe8,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xf8,0x80,0x42,0x7e,0x07,0x80,0x0a,0x7e,0x90,0x80,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xbf,0x80,0x0a,0x7e,0x80,0x80,0xfa,0x7e,0xe2,0x7d,
+0x2a,0x7e,0x08,0x80,0x58,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x70,0x80,0x12,0x7d,
+0x08,0x80,0x08,0x80,0x08,0x80,0x08,0x80,0x18,0x80,0x80,0x80,0xf8,0x80,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x5a,0x7d,
+0x08,0x80,0x22,0x7d,0xca,0x7e,0xfa,0x7d,0xfa,0x7e,0x50,0x80,0x32,0x7e,0xf2,0x7d,
+0xea,0x7e,0x32,0x7d,0x08,0x80,0x12,0x7d,0x92,0x7e,0x7f,0x80,0x12,0x7e,0xca,0x7d,
+0xfa,0x7e,0x92,0x7d,0x1f,0x7c,0x0a,0x7d,0x08,0x80,0x08,0x80,0x08,0x80,0x12,0x7d,
+0x68,0x80,0xea,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xc2,0x7d,0x22,0x7e,0x0a,0x7d,
+0x97,0x7c,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf0,0x80,0x32,0x7e,0x08,0x80,
+0x2a,0x7e,0x6a,0x7d,0x70,0x80,0x57,0x80,0x1a,0x7e,0x1f,0x80,0x7a,0x7e,0xfa,0x7d,
+0xfa,0x7e,0x97,0x80,0x08,0x80,0x18,0x80,0xc2,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xe0,0x80,0x22,0x7e,0x40,0x80,0xf8,0x80,0xfa,0x7d,0x6a,0x7e,0x18,0x80,
+0xd0,0x80,0x6a,0x7d,0x08,0x80,0x2a,0x7d,0xea,0x7e,0xc0,0x80,0x12,0x7e,0xb0,0x80,
+0x92,0x7e,0x07,0x80,0x20,0x80,0xda,0x7d,0xfa,0x7e,0xfa,0x7d,0x50,0x80,0x0a,0x7d,
+0x0a,0x7e,0x18,0x80,0x22,0x7e,0x18,0x80,0x0a,0x7e,0x50,0x80,0xf2,0x7e,0xfa,0x7d,
+0xfa,0x7e,0x22,0x7d,0x7a,0x7e,0xfa,0x7d,0xb0,0x80,0x12,0x7d,0x08,0x80,0x32,0x7d,
+0xa7,0x7c,0x38,0x80,0x48,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xe2,0x7d,
+0x2a,0x7e,0x08,0x80,0x6a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0x70,0x80,0x1a,0x7d,0x0a,0x7e,0x08,0x80,0x08,0x80,0x08,0x80,0x20,0x80,0x80,0x80,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xeb,0x82,0x80,0xb7,0x47,0x64,0x47,0xff,
+0x44,0x66,0x44,0xff,0x47,0x64,0x47,0xff,0x47,0x64,0x47,0xff,0x44,0x66,0x47,0xff,
+0x9d,0x75,0xb6,0xb9,0x47,0x64,0x47,0xff,0xad,0x75,0xb8,0xb7,0x47,0x64,0x49,0xff,
+0x47,0x64,0x44,0xff,0x49,0x63,0x49,0xff,0x44,0x66,0x47,0xff,0x83,0x76,0xf5,0x82,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xc2,0x7d,0x0a,0x7e,0x08,0x80,
+0x8a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x92,0x7e,0x0a,0x7d,0x0a,0x7e,0x82,0x7d,
+0xb0,0x80,0xb0,0x80,0x9a,0x7e,0x50,0x80,0xd8,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xe2,0x7d,0x32,0x7e,0x08,0x80,0x08,0x80,0x2a,0x7d,0xda,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x68,0x80,0x12,0x7e,0xb4,0x7b,0xfa,0x7e,0xea,0x7d,
+0x58,0x80,0x08,0x80,0x12,0x7e,0xe2,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xc0,0x80,
+0x80,0x80,0x50,0x80,0x1f,0x7c,0x12,0x7d,0x08,0x80,0x0a,0x7d,0x90,0x80,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x62,0x7d,
+0x08,0x80,0x22,0x7d,0xd0,0x80,0xfa,0x7d,0xfa,0x7e,0x50,0x80,0x38,0x80,0xf2,0x7d,
+0xfa,0x7e,0xca,0x7d,0x22,0x7e,0x08,0x80,0x12,0x7e,0x1f,0x80,0x1f,0x7c,0xca,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xd2,0x7e,0x88,0x80,0x58,0x80,0x2a,0x7d,0x12,0x7e,0x08,0x80,
+0x0a,0x7e,0x5a,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xc2,0x7d,0x1f,0x7c,0x07,0x80,
+0x9a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xea,0x7d,0x38,0x80,0x08,0x80,
+0x12,0x7e,0x22,0x7d,0x18,0x80,0x08,0x80,0x0a,0x7e,0x7f,0x80,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xa0,0x80,0x08,0x80,0x12,0x7d,0xc2,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xe0,0x80,0x22,0x7e,0x40,0x80,0xf8,0x80,0xfa,0x7d,0x68,0x80,0x18,0x80,
+0xd2,0x7e,0xc8,0x80,0x08,0x80,0x0a,0x7d,0x70,0x80,0x57,0x80,0x40,0x80,0xfa,0x7d,
+0x97,0x7c,0x07,0x80,0x22,0x7e,0xd8,0x80,0xfa,0x7e,0xfa,0x7d,0x50,0x80,0x07,0x80,
+0x32,0x7e,0xa0,0x80,0xb0,0x80,0xb2,0x7d,0x6a,0x7e,0x68,0x80,0xf0,0x80,0xfa,0x7d,
+0xfa,0x7e,0x22,0x7d,0x77,0x7c,0xfa,0x7d,0xfa,0x7e,0x98,0x80,0x0a,0x7e,0x08,0x80,
+0x18,0x80,0x0a,0x7d,0x57,0x7c,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xe5,0x7b,
+0x32,0x7e,0x0a,0x7d,0x6a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xc2,0x7d,0x7a,0x7e,0x50,0x80,0x22,0x7e,0x12,0x7d,0x08,0x80,0x08,0x80,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xdb,0x91,0x48,0x68,0x44,0xff,
+0x47,0x64,0x47,0xff,0x49,0x63,0x49,0xff,0x47,0x64,0x47,0xff,0x44,0x66,0x47,0xff,
+0xb8,0x77,0xad,0xc1,0x43,0x6a,0x5e,0xff,0xb8,0x77,0xad,0xc1,0x49,0x6b,0x44,0xff,
+0x44,0x66,0x47,0xff,0x44,0x66,0x44,0xff,0x47,0x64,0x47,0xff,0x73,0x76,0xf5,0x82,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xc2,0x7d,0x0a,0x7e,0x08,0x80,
+0x8a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x97,0x7c,0x0a,0x7d,0x18,0x80,0xd8,0x80,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xe8,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0x50,0x80,0x22,0x7e,0x72,0x7d,0x18,0x80,0x08,0x80,0x50,0x80,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xe2,0x7e,0x32,0x7d,0x08,0x80,0x22,0x7d,0x22,0x7e,0x2a,0x7d,
+0x12,0x7e,0x0a,0x7d,0x07,0x7c,0x7f,0x80,0xfa,0x7e,0xf8,0x80,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xf0,0x80,0xa7,0x80,0x2a,0x7e,0x08,0x80,0x50,0x80,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x62,0x7d,
+0x0a,0x7e,0x1f,0x80,0xc2,0x7e,0xfa,0x7d,0xfa,0x7e,0x58,0x80,0x32,0x7e,0xf0,0x80,
+0xfa,0x7e,0xfa,0x7d,0xb8,0x80,0x12,0x7d,0x08,0x80,0x08,0x80,0x2a,0x7e,0xca,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf2,0x7d,0xba,0x7e,0x38,0x80,
+0x08,0x80,0x2a,0x7d,0xea,0x7e,0xfa,0x7d,0xfa,0x7e,0xca,0x7d,0x1f,0x7c,0x07,0x80,
+0x98,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf0,0x80,0x32,0x7e,0x08,0x80,
+0x62,0x7e,0xfa,0x7d,0xe2,0x7e,0x48,0x80,0x07,0x7c,0x1f,0x80,0xb8,0x80,0xfa,0x7d,
+0xfa,0x7e,0x97,0x80,0x07,0x7c,0x1f,0x80,0xc2,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xe2,0x7d,0x22,0x7e,0x40,0x80,0xf2,0x7e,0xfa,0x7d,0x6a,0x7e,0x12,0x7d,
+0xd2,0x7e,0xfa,0x7d,0x42,0x7e,0x07,0x80,0x08,0x80,0x0a,0x7d,0x92,0x7e,0xfa,0x7d,
+0x8a,0x7e,0x08,0x80,0x22,0x7e,0xd8,0x80,0xfa,0x7e,0xfa,0x7d,0x50,0x80,0x07,0x80,
+0x48,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xe8,0x80,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0x1f,0x80,0x7f,0x7c,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x7f,0x7c,0x0a,0x7d,
+0x08,0x80,0x08,0x80,0x58,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xe8,0x80,
+0x2a,0x7e,0x08,0x80,0x6a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xea,0x7e,0x9a,0x7d,0x22,0x7e,0x08,0x80,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x79,0x6f,0x3d,0xf9,
+0x47,0x64,0x49,0xff,0x45,0x69,0x51,0xff,0x48,0x68,0x44,0xff,0x48,0x68,0x4d,0xff,
+0xd4,0x7a,0xdb,0x98,0xbb,0x76,0xc4,0xad,0xf8,0x80,0xef,0x87,0x95,0x75,0x5f,0xe9,
+0x49,0x63,0x47,0xff,0x49,0x63,0x47,0xff,0x43,0x6a,0x5e,0xff,0xae,0x78,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xc2,0x7d,0x0a,0x7e,0x08,0x80,
+0x88,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x97,0x7c,0x07,0x80,0x18,0x80,0xd8,0x80,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xe0,0x80,0xfa,0x7e,0xfa,0x7d,
+0x92,0x7e,0x07,0x80,0x9a,0x7e,0xfa,0x7d,0x6a,0x7e,0x0a,0x7d,0x08,0x80,0x90,0x80,
+0xfa,0x7e,0xfa,0x7d,0xa7,0x7c,0x07,0x80,0x60,0x80,0x8a,0x7d,0x88,0x80,0x8a,0x7d,
+0x7f,0x7c,0x1f,0x80,0x08,0x80,0x40,0x80,0xfa,0x7e,0x88,0x80,0xb0,0x80,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x7f,0x7c,0x07,0x80,0x42,0x7e,0xf2,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x62,0x7d,
+0x08,0x80,0x22,0x7d,0xca,0x7e,0xfa,0x7d,0xfa,0x7e,0x58,0x80,0x32,0x7e,0xf2,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xa0,0x80,0x18,0x80,0x08,0x80,0x2a,0x7e,0xd2,0x7d,
+0xa2,0x7e,0x8a,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xa8,0x80,
+0x08,0x80,0x2a,0x7d,0xe0,0x80,0xfa,0x7d,0xfa,0x7e,0xc2,0x7d,0x1f,0x7c,0x07,0x80,
+0xa0,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf0,0x80,0x38,0x80,0x08,0x80,
+0x72,0x7e,0xfa,0x7d,0xfa,0x7e,0xc0,0x80,0x1f,0x7c,0x07,0x80,0x2a,0x7e,0xea,0x7d,
+0xfa,0x7e,0xa2,0x7d,0x08,0x80,0x12,0x7d,0xb0,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xd8,0x80,0x20,0x80,0x48,0x80,0xfa,0x7e,0xfa,0x7d,0x6a,0x7e,0x12,0x7d,
+0xd2,0x7e,0xfa,0x7d,0xa7,0x7c,0x07,0x80,0x0a,0x7e,0x2a,0x7d,0xe2,0x7e,0xfa,0x7d,
+0x88,0x80,0x08,0x80,0x22,0x7e,0xda,0x7d,0xfa,0x7e,0xfa,0x7d,0x58,0x80,0x08,0x80,
+0x48,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf0,0x80,
+0xfa,0x7e,0x22,0x7d,0x80,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x62,0x7d,
+0x08,0x80,0x08,0x80,0x5a,0x7e,0xf8,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xea,0x7d,
+0x2a,0x7e,0x0a,0x7d,0x6a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xf8,0x80,0x77,0x80,
+0xa7,0x7c,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x6a,0x7e,0x08,0x80,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xc1,0x7b,0x4a,0xd8,
+0x49,0x63,0x49,0xff,0x90,0x74,0xc9,0xa8,0xac,0x79,0x4f,0xe2,0x42,0x67,0x4e,0xff,
+0xf1,0x7b,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xda,0x7e,0x5d,0xc8,
+0x47,0x64,0x47,0xff,0x44,0x6e,0x6f,0xf7,0xad,0x75,0xdc,0x97,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xd0,0x80,0x0a,0x7e,0x08,0x80,
+0x88,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x9a,0x7e,0x08,0x80,0x12,0x7e,0xba,0x7d,
+0xf2,0x7e,0xf2,0x7d,0xf2,0x7e,0xea,0x7d,0x9a,0x7e,0x62,0x7d,0xfa,0x7e,0xca,0x7d,
+0x1a,0x7e,0x50,0x80,0xfa,0x7e,0xfa,0x7d,0xea,0x7e,0x40,0x80,0x07,0x7c,0x1f,0x80,
+0xca,0x7e,0xfa,0x7d,0x48,0x80,0x32,0x7d,0xf8,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0x70,0x80,0x0a,0x7e,0x0a,0x7d,0xc2,0x7e,0x8a,0x7d,0x12,0x7e,0x92,0x7d,
+0xe0,0x80,0xfa,0x7d,0xfa,0x7e,0xd8,0x80,0x42,0x7e,0x07,0x80,0x7a,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x60,0x80,
+0x07,0x7c,0x1f,0x80,0xd0,0x80,0xfa,0x7d,0xfa,0x7e,0x50,0x80,0x32,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x8a,0x7e,0x08,0x80,0x22,0x7e,0xe0,0x80,
+0xa7,0x7c,0x0a,0x7d,0x70,0x80,0xda,0x7d,0xfa,0x7e,0xfa,0x7d,0xea,0x7e,0x5a,0x7d,
+0x08,0x80,0x48,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xd0,0x80,0x1f,0x7c,0x07,0x80,
+0xa0,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf2,0x7d,0x32,0x7e,0x08,0x80,
+0x6a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x62,0x7e,0x07,0x80,0x07,0x7c,0x70,0x80,
+0xfa,0x7e,0xea,0x7d,0x18,0x80,0x08,0x80,0x58,0x80,0xe0,0x80,0xfa,0x7e,0xfa,0x7d,
+0xf0,0x80,0x7a,0x7d,0x08,0x80,0x8a,0x7d,0xfa,0x7e,0xfa,0x7d,0x6a,0x7e,0x18,0x80,
+0xd2,0x7e,0xfa,0x7d,0xea,0x7e,0x32,0x7d,0x07,0x7c,0x77,0x80,0xfa,0x7e,0xfa,0x7d,
+0x88,0x80,0x08,0x80,0x18,0x80,0xe8,0x80,0xfa,0x7e,0xfa,0x7d,0x50,0x80,0x07,0x80,
+0x40,0x80,0xea,0x7d,0xf2,0x7e,0xf2,0x7d,0xf0,0x80,0xd7,0x80,0x62,0x7e,0xa2,0x7d,
+0xfa,0x7e,0x22,0x7d,0x78,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf0,0x80,
+0x50,0x80,0x07,0x80,0x57,0x7c,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf0,0x80,
+0x2a,0x7e,0x0a,0x7d,0x6a,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x6a,0x7d,
+0x0a,0x7e,0x8a,0x7d,0xe2,0x7e,0xfa,0x7d,0xfa,0x7e,0xe0,0x80,0x38,0x80,0x08,0x80,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xf3,0x82,0xae,0xa4,
+0x74,0x71,0x8c,0xdd,0xfa,0x7e,0xfa,0x7d,0xf8,0x80,0x9e,0xab,0x44,0x66,0x4b,0xff,
+0xc9,0x7b,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xb7,0x7c,0x42,0xdf,
+0x42,0x67,0x64,0xff,0xac,0x7a,0xf0,0x86,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x72,0x7d,0x08,0x80,0x08,0x80,
+0x3f,0x7c,0xe2,0x7d,0xfa,0x7e,0xf8,0x80,0x58,0x80,0x08,0x80,0x07,0x7c,0x1f,0x80,
+0x38,0x80,0x38,0x80,0x40,0x80,0x22,0x7d,0x07,0x7c,0x70,0x80,0xc2,0x7e,0x1f,0x80,
+0x08,0x80,0x90,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x58,0x80,0x08,0x80,0x08,0x80,
+0x2a,0x7e,0x6a,0x7d,0x07,0x7c,0x42,0x7d,0xe8,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0x70,0x80,0x0a,0x7e,0x08,0x80,0x42,0x7e,0x97,0x80,0x08,0x80,0x08,0x80,
+0x1f,0x7c,0x50,0x80,0x50,0x80,0x22,0x7d,0x07,0x7c,0x42,0x7d,0xda,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xbf,0x7c,0x2a,0x7d,
+0x08,0x80,0x0a,0x7d,0x7f,0x7c,0xfa,0x7d,0xda,0x7e,0x20,0x80,0x08,0x80,0xaa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x62,0x7d,0x12,0x7e,0xd0,0x80,
+0xea,0x7e,0x2a,0x7d,0x08,0x80,0x18,0x80,0x42,0x7e,0x57,0x80,0x32,0x7e,0x08,0x80,
+0x38,0x80,0xc2,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x8a,0x7d,0x08,0x80,0x08,0x80,
+0x57,0x7c,0xe2,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xaa,0x7d,0x08,0x80,0x08,0x80,
+0x2a,0x7e,0xda,0x7d,0xfa,0x7e,0xfa,0x7d,0xd8,0x80,0x38,0x80,0x08,0x80,0x08,0x80,
+0x6a,0x7e,0xf8,0x80,0xa7,0x7c,0x2a,0x7d,0x08,0x80,0x22,0x7d,0x50,0x80,0x57,0x80,
+0x32,0x7e,0x08,0x80,0x48,0x80,0xea,0x7d,0xfa,0x7e,0xf0,0x80,0x38,0x80,0x08,0x80,
+0x90,0x80,0xfa,0x7d,0xfa,0x7e,0x88,0x80,0x0a,0x7e,0xc2,0x7d,0xfa,0x7e,0xf0,0x80,
+0x42,0x7e,0x07,0x80,0x07,0x7c,0x92,0x7d,0xfa,0x7e,0xc2,0x7d,0x1f,0x7c,0x07,0x80,
+0x08,0x80,0x38,0x80,0x38,0x80,0x40,0x80,0x32,0x7e,0x18,0x80,0x1a,0x7e,0xca,0x7d,
+0xb0,0x80,0x0a,0x7d,0x32,0x7e,0xd2,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xe2,0x7e,0x38,0x80,0x40,0x80,0xf2,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xaa,0x7d,
+0x12,0x7e,0x08,0x80,0x3f,0x7c,0xe2,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xbf,0x80,
+0x0a,0x7e,0x08,0x80,0x22,0x7e,0x50,0x80,0x50,0x80,0x1f,0x80,0x08,0x80,0x48,0x80,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xf4,0x7d,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf7,0x80,0x5b,0x6a,0x44,0xff,
+0x5f,0x70,0x95,0xd6,0xab,0x76,0xab,0xc3,0xab,0x76,0xab,0xc3,0x6f,0x70,0x40,0xfd,
+0x75,0x75,0xcf,0xa3,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xea,0x7e,0x6a,0x7d,0x5f,0x7c,0x62,0x7d,
+0x5f,0x7c,0xb4,0x7b,0xfa,0x7e,0xd2,0x7d,0x6a,0x7e,0x5a,0x7d,0x62,0x7e,0x50,0x80,
+0x50,0x80,0x50,0x80,0x48,0x80,0x58,0x80,0x70,0x80,0xc2,0x7d,0x8a,0x7e,0x50,0x80,
+0x60,0x80,0x90,0x80,0xf2,0x7e,0xfa,0x7d,0xe2,0x7e,0x7a,0x7d,0x62,0x7e,0x62,0x7d,
+0x60,0x80,0x58,0x80,0x5a,0x7e,0x70,0x80,0xc2,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xe2,0x7e,0x88,0x80,0x5f,0x7c,0x62,0x7d,0x5a,0x7e,0x9a,0x7d,0x8a,0x7e,0x98,0x80,
+0x58,0x80,0x32,0x7d,0x32,0x7e,0x42,0x7d,0x82,0x7e,0xe8,0x80,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x98,0x80,0x5a,0x7d,
+0x62,0x7e,0x5f,0x80,0x78,0x80,0xd8,0x80,0xb0,0x80,0x62,0x7d,0x5f,0x7c,0x7f,0x80,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xea,0x7d,0x82,0x7e,0xd2,0x7d,
+0xfa,0x7e,0xa7,0x80,0x90,0x80,0x62,0x7d,0x32,0x7e,0x32,0x7d,0x3f,0x7c,0x7f,0x80,
+0xd2,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xe2,0x7e,0x77,0x80,0x5f,0x7c,0x62,0x7d,
+0x5a,0x7e,0xba,0x7d,0xfa,0x7e,0xfa,0x7d,0xea,0x7e,0x88,0x80,0x5a,0x7e,0x62,0x7d,
+0x60,0x80,0xa0,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xd2,0x7d,0x6a,0x7e,0x42,0x7d,
+0x38,0x80,0xc2,0x7d,0xfa,0x7e,0xc2,0x7d,0x72,0x7e,0x3f,0x80,0x38,0x80,0x32,0x7d,
+0x42,0x7e,0x7f,0x80,0xf0,0x80,0xfa,0x7d,0xfa,0x7e,0xc0,0x80,0x62,0x7e,0x5f,0x80,
+0x80,0x80,0xf2,0x7d,0xfa,0x7e,0xe0,0x80,0x8a,0x7e,0xfa,0x7d,0xfa,0x7e,0xc2,0x7d,
+0x62,0x7e,0x62,0x7d,0x5f,0x7c,0x7f,0x80,0xd2,0x7e,0x9a,0x7d,0x60,0x80,0x68,0x80,
+0x62,0x7e,0x50,0x80,0x50,0x80,0x48,0x80,0x50,0x80,0x50,0x80,0xa2,0x7e,0xf0,0x80,
+0x88,0x80,0x60,0x80,0x58,0x80,0xaa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xc2,0x7d,0x92,0x7e,0xf2,0x7d,0xfa,0x7e,0xfa,0x7d,0xf8,0x80,0x82,0x7d,
+0x5a,0x7e,0x62,0x7d,0x62,0x7e,0xaa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xea,0x7d,
+0xa0,0x80,0x88,0x80,0x60,0x80,0x38,0x80,0x38,0x80,0x48,0x80,0x92,0x7e,0xea,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0x9d,0x75,0x3c,0xec,
+0x47,0x64,0x47,0xff,0x48,0x68,0x4b,0xff,0x44,0x66,0x44,0xff,0x43,0x6a,0x64,0xff,
+0xe9,0x7b,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf2,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xf2,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xf8,0x80,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf8,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xf0,0x80,0xea,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xf2,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xf8,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf8,0x80,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xf2,0x7e,0xea,0x7d,0xf8,0x80,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf0,0x80,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xf8,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf0,0x80,
+0xea,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf2,0x7d,0xea,0x7e,0xea,0x7d,
+0xf8,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xf8,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf8,0x80,0xfa,0x7e,0xf2,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xf8,0x80,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf2,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf8,0x80,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xea,0x7d,0xea,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xe6,0x84,0x4d,0xc8,
+0x47,0x64,0x47,0xff,0x47,0x64,0x47,0xff,0x49,0x63,0x49,0xff,0x4a,0x72,0xb5,0xba,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0x9e,0xab,
+0x47,0x64,0x47,0xff,0x46,0x61,0x47,0xff,0x47,0x64,0x46,0xff,0x80,0x77,0xf5,0x82,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xf7,0x80,
+0x64,0x6e,0x42,0xff,0x47,0x64,0x47,0xff,0x47,0x64,0x44,0xff,0xae,0x78,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xb5,0x7d,0x4a,0xe6,0x44,0x66,0x47,0xff,0x49,0x63,0x49,0xff,0x9e,0x78,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xf8,0x80,0xbe,0xa4,0x4e,0x6c,0x45,0xff,0x49,0x63,0x47,0xff,0x73,0x76,0xe9,0x8d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xc9,0x7b,0x90,0xbf,0x65,0x71,0x65,0xf9,0x90,0x77,0xed,0x89,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,0xfa,0x7e,0xfa,0x7d,
+ // 13440 bytes
+
+};
+
+#endif
\ No newline at end of file
diff --git a/dvr_rdk/demos/link_api_demos/video_chains/MAKEFILE.MK b/dvr_rdk/demos/link_api_demos/video_chains/MAKEFILE.MK
deleted file mode 100755
index bd5124a..0000000
--- a/dvr_rdk/demos/link_api_demos/video_chains/MAKEFILE.MK
+++ /dev/null
@@ -1,8 +0,0 @@
-
-include $(dvr_rdk_PATH)/makerules/common_header_a8.mk
-
-INCLUDE+= $(MCFW_INC) $(OSA_INC) $(SYSLINK_INC) $(CODEC_INC)
-
-include $(dvr_rdk_PATH)/makerules/common_footer_a8.mk
-
-
diff --git a/dvr_rdk/demos/link_api_demos/video_chains/chains_encDecLoopBack.c b/dvr_rdk/demos/link_api_demos/video_chains/chains_encDecLoopBack.c
deleted file mode 100755
index 30c1e7a..0000000
--- a/dvr_rdk/demos/link_api_demos/video_chains/chains_encDecLoopBack.c
+++ /dev/null
@@ -1,340 +0,0 @@
-/*******************************************************************************
- *                                                                             *
- * Copyright (c) 2009 Texas Instruments Incorporated - http://www.ti.com/      *
- *                        ALL RIGHTS RESERVED                                  *
- *                                                                             *
- ******************************************************************************/
-
-#include <demos/link_api_demos/common/chains.h>
-
-
-/**
-                         SRC (YUV420SP)
-                          |
-                          |
-                         ENC (BitStream)
-                          |
-                         IPC_BITS_OUT_M3 (BitStream)
-                          |
-                         IPC_BITS_IN_A8 (BitStream)
-                          |
-                         fwrite() - write to harddisk
-                          |
-                         fread() - read from harddisk
-                          |
-                         IPC_BITS_OUT_A8 (BitStream)
-                          |
-                         IPC_BITS_IN_M3 (BitStream)
-                          |
-                         DEC (YUV420SP)
-                          |
-                          |
-                         SNK
-*/
-#define SRC_NUM_CH 16
-static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
-{
-    .isPopulated = 1,
-    .ivaMap[0] = 
-    {
-        .EncNumCh  = 10,
-        .EncChList = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0 , 0, 0},
-        .DecNumCh  = 0,
-        .DecChList = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
-    },
-    .ivaMap[1] = 
-    {
-        .EncNumCh  = 0, 
-        .EncChList = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31},
-        .DecNumCh  = 12,
-        .DecChList = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0 , 0, 0},
-    },
-    .ivaMap[2] = 
-    {
-        .EncNumCh  = 6,
-        .EncChList = {10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
-        .DecNumCh  = 4,
-        .DecChList = {12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
-    },
-};
-
-Void Chains_multiChEncDecLoopBack(Chains_Ctrl *chainsCfg)
-{
-    NullSrcLink_CreateParams srcPrm;
-    EncLink_CreateParams     encPrm;
-    DecLink_CreateParams     decPrm;
-    NullLink_CreateParams    snkPrm;
-    IpcLink_CreateParams     ipcOutVpssPrm;
-    IpcLink_CreateParams     ipcInVpssPrm;
-    IpcLink_CreateParams     ipcOutVideoPrm;
-    IpcLink_CreateParams     ipcInVideoPrm;
-    IpcBitsOutLinkHLOS_CreateParams   ipcBitsOutHostPrm;
-    IpcBitsOutLinkRTOS_CreateParams   ipcBitsOutVideoPrm;
-    IpcBitsInLinkHLOS_CreateParams    ipcBitsInHostPrm;
-    IpcBitsInLinkRTOS_CreateParams    ipcBitsInVideoPrm;
-    Int i;
-    Bool isProgressive;
-    System_LinkInfo bitsProducerLinkInfo;
-
-    UInt32 srcId, encId, decId, snkId;
-    UInt32 ipcOutVpssId, ipcInVpssId;
-    UInt32 ipcOutVideoId, ipcInVideoId;
-    UInt32 ipcBitsOutVideoId, ipcBitsInHostId;
-    UInt32 ipcBitsInVideoId, ipcBitsOutHostId;
-    char ch;
-
-    Chains_ipcBitsInit();
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVpssPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVideoPrm);
-    CHAINS_INIT_STRUCT(IpcBitsOutLinkHLOS_CreateParams,ipcBitsOutHostPrm);
-    CHAINS_INIT_STRUCT(IpcBitsOutLinkRTOS_CreateParams,ipcBitsOutVideoPrm);
-    CHAINS_INIT_STRUCT(IpcBitsInLinkHLOS_CreateParams,ipcBitsInHostPrm);
-    CHAINS_INIT_STRUCT(IpcBitsInLinkRTOS_CreateParams,ipcBitsInVideoPrm);
-    CHAINS_INIT_STRUCT(DecLink_CreateParams, decPrm);
-    CHAINS_INIT_STRUCT(EncLink_CreateParams, encPrm);
-
-    srcId  = SYSTEM_VPSS_LINK_ID_NULL_SRC_0;
-    encId  = SYSTEM_LINK_ID_VENC_0;
-    decId  = SYSTEM_LINK_ID_VDEC_0;
-    snkId  = SYSTEM_VPSS_LINK_ID_NULL_0;
-
-    ipcOutVpssId = SYSTEM_VPSS_LINK_ID_IPC_OUT_M3_0;
-    ipcInVideoId = SYSTEM_VIDEO_LINK_ID_IPC_IN_M3_0;
-    ipcOutVideoId= SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_0;
-    ipcInVpssId  = SYSTEM_VPSS_LINK_ID_IPC_IN_M3_0;
-
-    ipcBitsOutVideoId = SYSTEM_VIDEO_LINK_ID_IPC_BITS_OUT_0;
-    ipcBitsInHostId   = SYSTEM_HOST_LINK_ID_IPC_BITS_IN_0;
-    ipcBitsOutHostId  = SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0;
-    ipcBitsInVideoId  = SYSTEM_VIDEO_LINK_ID_IPC_BITS_IN_0;
-
-
-    srcPrm.tilerEnable = TRUE;
-    isProgressive = TRUE;
-
-    System_linkControl(
-        SYSTEM_LINK_ID_M3VIDEO,
-        SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
-        &systemVid_encDecIvaChMapTbl,
-        sizeof(SystemVideo_Ivahd2ChMap_Tbl),
-        TRUE
-    );
-
-    srcPrm.outQueParams.nextLink = ipcOutVpssId;
-    if (isProgressive){
-        srcPrm.timerPeriod          = 30;
-    }else {
-        srcPrm.timerPeriod          = 15;
-    }
-    srcPrm.inputInfo.numCh          = SRC_NUM_CH;
-    for(i=0; i<srcPrm.inputInfo.numCh; i++)
-    {
-        System_LinkChInfo *pChInfo;
-
-        pChInfo = &srcPrm.inputInfo.chInfo[i];
-
-        pChInfo->dataFormat = SYSTEM_DF_YUV420SP_UV;
-        pChInfo->memType    = SYSTEM_MT_TILEDMEM;
-        pChInfo->width      = 720;
-        if (isProgressive){
-            pChInfo->height     = 480;
-            pChInfo->scanFormat = SYSTEM_SF_PROGRESSIVE;
-        } else{
-            pChInfo->height     = 480/2;
-            pChInfo->scanFormat = SYSTEM_SF_INTERLACED;
-        }
-        pChInfo->pitch[0]   = SystemUtils_align(pChInfo->width+pChInfo->startX,
-                                                SYSTEM_BUFFER_ALIGNMENT);
-        pChInfo->pitch[1]   = pChInfo->pitch[0];
-        pChInfo->pitch[2]   = 0;
-    }
-
-    ipcOutVpssPrm.inQueParams.prevLinkId    = srcId;
-    ipcOutVpssPrm.inQueParams.prevLinkQueId = 1;
-    ipcOutVpssPrm.numOutQue                 = 1;
-    ipcOutVpssPrm.outQueParams[0].nextLink     = ipcInVideoId;
-    ipcOutVpssPrm.notifyNextLink            = TRUE;
-    ipcOutVpssPrm.notifyPrevLink            = TRUE;
-    ipcOutVpssPrm.noNotifyMode              = FALSE;
-
-    ipcInVideoPrm.inQueParams.prevLinkId    = ipcOutVpssId;
-    ipcInVideoPrm.inQueParams.prevLinkQueId = 0;
-    ipcInVideoPrm.numOutQue                 = 1;
-    ipcInVideoPrm.outQueParams[0].nextLink     = encId;
-    ipcInVideoPrm.notifyNextLink            = TRUE;
-    ipcInVideoPrm.notifyPrevLink            = TRUE;
-    ipcInVideoPrm.noNotifyMode              = FALSE;
-
-    for (i=0; i<SRC_NUM_CH; i++) {
-        encPrm.chCreateParams[i].format     = IVIDEO_H264HP;
-        encPrm.chCreateParams[i].profile    = IH264_HIGH_PROFILE;
-        encPrm.chCreateParams[i].dataLayout = VCODEC_FIELD_SEPARATED;
-        if (isProgressive)
-            encPrm.chCreateParams[i].fieldMergeEncodeEnable  = FALSE;
-        else
-            encPrm.chCreateParams[i].fieldMergeEncodeEnable  = TRUE;
-        encPrm.chCreateParams[i].maxBitRate = -1;
-        encPrm.chCreateParams[i].encodingPreset = 3;
-        encPrm.chCreateParams[i].rateControlPreset = 0;
-        encPrm.chCreateParams[i].enableHighSpeed = 0;
-        encPrm.chCreateParams[i].defaultDynamicParams.intraFrameInterval = 30;
-        encPrm.chCreateParams[i].encodingPreset = XDM_DEFAULT;
-        encPrm.chCreateParams[i].enableAnalyticinfo = 0;
-        encPrm.chCreateParams[i].enableWaterMarking = 0;
-        encPrm.chCreateParams[i].rateControlPreset =
-                                 IVIDEO_STORAGE;
-        encPrm.chCreateParams[i].defaultDynamicParams.inputFrameRate = 30;
-        encPrm.chCreateParams[i].defaultDynamicParams.targetBitRate =
-                                 (2 * 1000 * 1000);
-        encPrm.chCreateParams[i].defaultDynamicParams.interFrameInterval = 1;
-        encPrm.chCreateParams[i].defaultDynamicParams.mvAccuracy =
-                                 IVIDENC2_MOTIONVECTOR_QUARTERPEL;
-        encPrm.chCreateParams[i].defaultDynamicParams.rcAlg = 0 ;
-        encPrm.chCreateParams[i].defaultDynamicParams.qpMin = 10;
-        encPrm.chCreateParams[i].defaultDynamicParams.qpMax = 40;
-        encPrm.chCreateParams[i].defaultDynamicParams.qpInit = -1;
-        encPrm.chCreateParams[i].defaultDynamicParams.vbrDuration = 8;
-        encPrm.chCreateParams[i].defaultDynamicParams.vbrSensitivity = 0;
-    }
-    encPrm.inQueParams.prevLinkId   = ipcInVideoId;
-    encPrm.inQueParams.prevLinkQueId= 0;
-    encPrm.outQueParams.nextLink = ipcBitsOutVideoId;
-    encPrm.numBufPerCh[0] = 6;
-    encPrm.numBufPerCh[1] = 6;
-    encPrm.numBufPerCh[2] = 6;
-    encPrm.numBufPerCh[3] = 6;
-
-    ipcBitsOutVideoPrm.baseCreateParams.inQueParams.prevLinkId = encId;
-    ipcBitsOutVideoPrm.baseCreateParams.inQueParams.prevLinkQueId = 0;
-    ipcBitsOutVideoPrm.baseCreateParams.numOutQue                 = 1;
-    ipcBitsOutVideoPrm.baseCreateParams.outQueParams[0].nextLink = ipcBitsInHostId;
-    Chains_ipcBitsInitCreateParams_BitsOutRTOS(&ipcBitsOutVideoPrm,
-                                               TRUE);
-
-    ipcBitsInHostPrm.baseCreateParams.inQueParams.prevLinkId = ipcBitsOutVideoId;
-    ipcBitsInHostPrm.baseCreateParams.inQueParams.prevLinkQueId = 0;
-    Chains_ipcBitsInitCreateParams_BitsInHLOS(&ipcBitsInHostPrm);
-
-    System_linkCreate(srcId, &srcPrm, sizeof(srcPrm));
-    System_linkCreate(ipcOutVpssId , &ipcOutVpssPrm , sizeof(ipcOutVpssPrm) );
-    System_linkCreate(ipcInVideoId , &ipcInVideoPrm , sizeof(ipcInVideoPrm) );
-    System_linkCreate(encId, &encPrm, sizeof(encPrm));
-    System_linkCreate(ipcBitsOutVideoId, &ipcBitsOutVideoPrm, sizeof(ipcBitsOutVideoPrm));
-    System_linkCreate(ipcBitsInHostId, &ipcBitsInHostPrm, sizeof(ipcBitsInHostPrm));
-
-
-    System_linkGetInfo(ipcBitsInHostId,&bitsProducerLinkInfo);
-    OSA_assert(bitsProducerLinkInfo.numQue = 1);
-    ipcBitsOutHostPrm.baseCreateParams.numOutQue                = 1;
-    ipcBitsOutHostPrm.baseCreateParams.outQueParams[0].nextLink = ipcBitsInVideoId;
-    Chains_ipcBitsInitCreateParams_BitsOutHLOS(&ipcBitsOutHostPrm,
-                                               &bitsProducerLinkInfo.queInfo[0]);
-    ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkId = ipcBitsOutHostId;
-    ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkQueId = 0;
-    ipcBitsInVideoPrm.baseCreateParams.numOutQue                 = 1;
-    ipcBitsInVideoPrm.baseCreateParams.outQueParams[0].nextLink = decId;
-    Chains_ipcBitsInitCreateParams_BitsInRTOS(&ipcBitsInVideoPrm,
-                                              TRUE);
-    for (i=0; i<SRC_NUM_CH; i++) {
-        decPrm.chCreateParams[i].format          = IVIDEO_H264HP;
-        decPrm.chCreateParams[i].profile         = IH264VDEC_PROFILE_ANY;
-        decPrm.chCreateParams[i].targetMaxWidth  = 720;
-        decPrm.chCreateParams[i].targetMaxHeight = 576;
-        if (isProgressive)
-            decPrm.chCreateParams[i].processCallLevel  = VDEC_FRAMELEVELPROCESSCALL;
-        else
-            decPrm.chCreateParams[i].processCallLevel  = VDEC_FIELDLEVELPROCESSCALL;
-        decPrm.chCreateParams[i].numBufPerCh = 6;
-        decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = 30;
-        decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate =
-                                 (2 * 1000 * 1000);
-        decPrm.chCreateParams[i].tilerEnable = TRUE;
-    }
-    decPrm.inQueParams.prevLinkId = ipcBitsInVideoId;
-    decPrm.inQueParams.prevLinkQueId = 0;
-    decPrm.outQueParams.nextLink     = ipcOutVideoId;
-
-    ipcOutVideoPrm.inQueParams.prevLinkId    = decId;
-    ipcOutVideoPrm.inQueParams.prevLinkQueId = 0;
-    ipcOutVideoPrm.numOutQue                   = 1;
-    ipcOutVideoPrm.outQueParams[0].nextLink     = ipcInVpssId;
-    ipcOutVideoPrm.notifyNextLink            = TRUE;
-    ipcOutVideoPrm.notifyPrevLink            = TRUE;
-    ipcOutVideoPrm.noNotifyMode              = FALSE;
-
-    ipcInVpssPrm.inQueParams.prevLinkId    = ipcOutVideoId;
-    ipcInVpssPrm.inQueParams.prevLinkQueId = 0;
-    ipcInVpssPrm.numOutQue                    = 1;
-    ipcInVpssPrm.outQueParams[0].nextLink     = snkId;
-    ipcInVpssPrm.notifyNextLink            = TRUE;
-    ipcInVpssPrm.notifyPrevLink            = TRUE;
-    ipcInVpssPrm.noNotifyMode              = FALSE;
-
-    snkPrm.numInQue = 1;
-    snkPrm.inQueParams[0].prevLinkId = ipcInVpssId;
-    snkPrm.inQueParams[0].prevLinkQueId = 0;
-
-    System_linkCreate(ipcBitsOutHostId,&ipcBitsOutHostPrm,sizeof(ipcBitsOutHostPrm));
-    System_linkCreate(ipcBitsInVideoId,&ipcBitsInVideoPrm,sizeof(ipcBitsInVideoPrm));
-    System_linkCreate(decId, &decPrm, sizeof(decPrm));
-    System_linkCreate(ipcOutVideoId, &ipcOutVideoPrm, sizeof(ipcOutVideoPrm));
-    System_linkCreate(ipcInVpssId  , &ipcInVpssPrm  , sizeof(ipcInVpssPrm)  );
-    System_linkCreate(snkId, &snkPrm, sizeof(snkPrm));
-
-    Chains_memPrintHeapStatus();
-    //Utils_encdecHdvicpPrfInit();
-
-    {
-        System_linkStart(snkId);
-        System_linkStart(encId);
-        System_linkStart(decId);
-        System_linkStart(srcId);
-        System_linkStart(ipcBitsOutHostId);
-
-        /* Start taking CPU load just before starting of links */
-        Chains_prfLoadCalcEnable(TRUE, FALSE, FALSE);
-
-        while(1)
-        {
-            ch = Chains_menuRunTime();
-            if(ch=='0')
-                break;
-            if(ch=='i')
-            {
-                System_linkControl(encId,
-                       ENC_LINK_CMD_PRINT_IVAHD_STATISTICS, NULL, 0, TRUE);
-            }
-        }
-
-        System_linkStop(srcId);
-        System_linkStop(encId);
-        Chains_ipcBitsStop();
-        System_linkStop(ipcBitsOutHostId);
-        System_linkStop(ipcBitsInVideoId);
-        System_linkStop(decId);
-        System_linkStop(snkId);
-    }
-
-    System_linkDelete(srcId);
-    System_linkDelete(ipcOutVpssId );
-    System_linkDelete(ipcInVideoId );
-    System_linkDelete(encId);
-    System_linkDelete(ipcBitsOutVideoId);
-    System_linkDelete(ipcBitsInHostId);
-    System_linkDelete(ipcBitsOutHostId);
-    System_linkDelete(ipcBitsInVideoId);
-    System_linkDelete(decId);
-    System_linkDelete(ipcOutVideoId);
-    System_linkDelete(ipcInVpssId  );
-    System_linkDelete(snkId);
-
-    /* Print the HWI, SWI and all tasks load */
-    /* Reset the accumulated timer ticks */
-    Chains_prfLoadCalcEnable(FALSE, TRUE, FALSE);
-    //Utils_encdecHdvicpPrfPrint();
-    Chains_ipcBitsExit();
-
-}
-
diff --git a/dvr_rdk/demos/link_api_demos/vpss_chains/MAKEFILE.MK b/dvr_rdk/demos/link_api_demos/vpss_chains/MAKEFILE.MK
deleted file mode 100755
index bd5124a..0000000
--- a/dvr_rdk/demos/link_api_demos/vpss_chains/MAKEFILE.MK
+++ /dev/null
@@ -1,8 +0,0 @@
-
-include $(dvr_rdk_PATH)/makerules/common_header_a8.mk
-
-INCLUDE+= $(MCFW_INC) $(OSA_INC) $(SYSLINK_INC) $(CODEC_INC)
-
-include $(dvr_rdk_PATH)/makerules/common_footer_a8.mk
-
-
diff --git a/dvr_rdk/demos/link_api_demos/vpss_chains/chains_multiChCaptureNsfDei.c b/dvr_rdk/demos/link_api_demos/vpss_chains/chains_multiChCaptureNsfDei.c
deleted file mode 100755
index 43165bf..0000000
--- a/dvr_rdk/demos/link_api_demos/vpss_chains/chains_multiChCaptureNsfDei.c
+++ /dev/null
@@ -1,175 +0,0 @@
-/*******************************************************************************
- *                                                                             *
- * Copyright (c) 2009 Texas Instruments Incorporated - http://www.ti.com/      *
- *                        ALL RIGHTS RESERVED                                  *
- *                                                                             *
- ******************************************************************************/
-
-#include <demos/link_api_demos/common/chains.h>
-
-/*
-                      Capture (YUV422I) 16CH D1 60fps
-                          |
-                          |
-                        NSF (YUV420SP)
-                          |
-                          |
-                      SW Mosaic
-                      (DEIH YUV422I)
-                          |
-                          |
-                          |
-                    Off-Chip HDMI
-                      1080p60
-*/
-
-
-Void Chains_multiChCaptureNsfDei(Chains_Ctrl *chainsCfg)
-{
-    CaptureLink_CreateParams    capturePrm;
-    NsfLink_CreateParams        nsfPrm;
-    static SwMsLink_CreateParams       swMsPrm;
-    DisplayLink_CreateParams    displayPrm;
-
-    CaptureLink_VipInstParams *pCaptureInstPrm;
-    CaptureLink_OutParams     *pCaptureOutPrm;
-
-    UInt32 captureId, nsfId, swMsId, displayId;
-    UInt32 vipInstId;
-
-    Bool switchCh;
-    Bool switchLayout;
-    Bool enableNsf;
-
-    char ch;
-
-    captureId   = SYSTEM_LINK_ID_CAPTURE;
-    nsfId       = SYSTEM_LINK_ID_NSF_0;
-
-    swMsId      = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
-    swMsPrm.numSwMsInst = 1;
-    swMsPrm.swMsInstId[0] = SYSTEM_SW_MS_SC_INST_DEI_SC;
-
-    displayId   = SYSTEM_LINK_ID_DISPLAY_1;
-
-    CaptureLink_CreateParams_Init(&capturePrm);
-    SwMsLink_CreateParams_Init(&swMsPrm);
-
-    capturePrm.numVipInst = 4;
-
-    enableNsf = chainsCfg->enableNsfLink;
-
-    if(enableNsf)
-        capturePrm.outQueParams[0].nextLink = nsfId;
-    else
-        capturePrm.outQueParams[0].nextLink = swMsId;
-
-    capturePrm.tilerEnable = FALSE;
-
-    for(vipInstId=0; vipInstId<capturePrm.numVipInst; vipInstId++)
-    {
-        pCaptureInstPrm                     = &capturePrm.vipInst[vipInstId];
-        pCaptureInstPrm->vipInstId          = (SYSTEM_CAPTURE_INST_VIP0_PORTA+vipInstId)%SYSTEM_CAPTURE_INST_MAX;
-        pCaptureInstPrm->videoDecoderId     = SYSTEM_DEVICE_VID_DEC_TVP5158_DRV;
-        pCaptureInstPrm->inDataFormat       = SYSTEM_DF_YUV422P;
-        pCaptureInstPrm->standard           = SYSTEM_STD_MUX_4CH_D1;
-        pCaptureInstPrm->numOutput          = 1;
-
-        pCaptureOutPrm                      = &pCaptureInstPrm->outParams[0];
-        pCaptureOutPrm->dataFormat          = SYSTEM_DF_YUV422I_YUYV;
-        pCaptureOutPrm->scEnable            = FALSE;
-        pCaptureOutPrm->scOutWidth          = 0;
-        pCaptureOutPrm->scOutHeight         = 0;
-        pCaptureOutPrm->outQueId            = 0;
-    }
-
-    nsfPrm.bypassNsf                = chainsCfg->bypassNsf;
-    nsfPrm.tilerEnable              = FALSE;
-    nsfPrm.inQueParams.prevLinkId   = captureId;
-    nsfPrm.inQueParams.prevLinkQueId= 0;
-    nsfPrm.numOutQue                = 1;
-    nsfPrm.outQueParams[0].nextLink = swMsId;
-
-    if(enableNsf)
-        swMsPrm.inQueParams.prevLinkId = nsfId;
-    else
-        swMsPrm.inQueParams.prevLinkId = captureId;
-
-    swMsPrm.inQueParams.prevLinkQueId = 0;
-    swMsPrm.outQueParams.nextLink     = displayId;
-    swMsPrm.maxInputQueLen            = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
-    swMsPrm.maxOutRes                 = chainsCfg->displayRes[SYSTEM_DC_VENC_HDMI];
-    swMsPrm.lineSkipMode              = TRUE;
-    swMsPrm.layoutPrm.outputFPS       = 60;
-
-
-    Chains_swMsGenerateLayoutParams(0, 0, &swMsPrm);
-
-    CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm);
-    displayPrm.inQueParams[0].prevLinkId    = swMsId;
-    displayPrm.inQueParams[0].prevLinkQueId = 0;
-    displayPrm.displayRes                = swMsPrm.maxOutRes;
-
-    Chains_displayCtrlInit(chainsCfg->displayRes);
-
-    System_linkCreate (captureId, &capturePrm, sizeof(capturePrm));
-    System_linkControl(captureId, CAPTURE_LINK_CMD_CONFIGURE_VIP_DECODERS, NULL, 0, TRUE);
-
-    if(enableNsf)
-        System_linkCreate(nsfId     , &nsfPrm, sizeof(nsfPrm));
-
-    System_linkCreate(swMsId   , &swMsPrm, sizeof(swMsPrm));
-    System_linkCreate(displayId, &displayPrm, sizeof(displayPrm));
-
-    Chains_memPrintHeapStatus();
-
-    {
-        System_linkStart(displayId);
-        if(enableNsf)
-            System_linkStart(nsfId    );
-        System_linkStart(swMsId   );
-
-        /* Start taking CPU load just before starting of links */
-        Chains_prfLoadCalcEnable(TRUE, FALSE, FALSE);
-
-        System_linkStart(captureId);
-
-        while(1)
-        {
-            switchLayout = FALSE;
-            switchCh     = FALSE;
-
-            ch = Chains_menuRunTime();
-
-            if(ch=='0')
-                break;
-            if(ch=='p')
-                System_linkControl(captureId, CAPTURE_LINK_CMD_PRINT_ADV_STATISTICS, NULL, 0, TRUE);
-            if(ch=='s')
-               switchLayout = TRUE;
-            if(ch=='c')
-               switchCh = TRUE;
-
-            Chains_swMsSwitchLayout(&swMsId, &swMsPrm, switchLayout, switchCh, 1);
-        }
-
-        System_linkStop(captureId);
-        if(enableNsf)
-            System_linkStop(nsfId    );
-        System_linkStop(swMsId    );
-        System_linkStop(displayId);
-    }
-
-    System_linkDelete(captureId);
-    if(enableNsf)
-        System_linkDelete(nsfId    );
-    System_linkDelete(swMsId   );
-    System_linkDelete(displayId);
-
-    Chains_displayCtrlDeInit();
-
-    /* Print the HWI, SWI and all tasks load */
-    /* Reset the accumulated timer ticks */
-    Chains_prfLoadCalcEnable(FALSE, TRUE, FALSE);
-}
-
diff --git a/dvr_rdk/demos/link_api_demos/vpss_video_chains/MAKEFILE.MK b/dvr_rdk/demos/link_api_demos/vpss_video_chains/MAKEFILE.MK
deleted file mode 100755
index 6d1cd69..0000000
--- a/dvr_rdk/demos/link_api_demos/vpss_video_chains/MAKEFILE.MK
+++ /dev/null
@@ -1,8 +0,0 @@
-
-include $(dvr_rdk_PATH)/makerules/common_header_a8.mk
-
-INCLUDE+= $(MCFW_INC) $(OSA_INC) $(SYSLINK_INC) $(CODEC_INC) 
-
-include $(dvr_rdk_PATH)/makerules/common_footer_a8.mk
-
-
diff --git a/dvr_rdk/demos/link_api_demos/vpss_video_chains/chains_multiChDucatiSystemUseCaseSwMs1_TriDisplay.c b/dvr_rdk/demos/link_api_demos/vpss_video_chains/chains_multiChDucatiSystemUseCaseSwMs1_TriDisplay.c
deleted file mode 100755
index 3f8c5fd..0000000
--- a/dvr_rdk/demos/link_api_demos/vpss_video_chains/chains_multiChDucatiSystemUseCaseSwMs1_TriDisplay.c
+++ /dev/null
@@ -1,1122 +0,0 @@
-/*******************************************************************************
- *                                                                             *
- * Copyright (c) 2009 Texas Instruments Incorporated - http://www.ti.com/      *
- *                        ALL RIGHTS RESERVED                                  *
- *                                                                             *
- ******************************************************************************/
-
-#include <demos/link_api_demos/common/chains.h>
-#include <demos/link_api_demos/common/chains_ipcBuf.h>
-#include <demos/link_api_demos/common/chains_ipcFrames.h>
-#include <demos/graphic/graphic.h>
-#include <mcfw/interfaces/link_api/system_common.h>
-#include <mcfw/interfaces/common_def/ti_vsys_common_def.h>
-
-
-
-/**
-                        Capture (YUV422I) 16CH D1 60fps
-                          |
-                          |
-                         NSF (YUV420SP) ------------------+
-                          |                               |
-                          |                               |
-                        DEIH (VIP-SC YUV420 )     DEI (VIP-SC YUV420 )
-                          |                               |
-                          |+------------------------------+
-                        MERGE1
-                          |
-                          |
-                         DUP1
-                          ||-------IPCM3OUT(VPS)--IPCM3IN(VID)--ENC
-                          |                                     |
-                          |+-------IPCM3IN(VPS)--IPCM3OUT(VID)--DEC
-                        MERGE2
-                          |
-                          |
-                         DUP2
-                         |||
-         +---------------+|+------------+
-         |                |             |
-         |                |             |
-      SW Mosaic       SW Mosaic         |
-      (SC5 YUV422I)  (SC5 YUV422I)      |
-         |                |             |
- GRPX0   |       GRPX1,2  |             |
-    |    |           |    |             |
-    On-Chip HDMI    Off-Chip HDMI  SDTV (NTSC)
-      1080p60         1080p60        480i60
-*/
-
-/* To enable or disable graphics in the application */
-#define ENABLE_GRPX 1
-
-/* To select if FBDEV interface is used for Graphics */
-#define USE_FBDEV   0
-
-static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
-{
-    .isPopulated = 1,
-    .ivaMap[0] =
-    {
-        .EncNumCh  = 10,
-        .EncChList = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0 , 0, 0},
-        .DecNumCh  = 0,
-        .DecChList = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
-    },
-    .ivaMap[1] =
-    {
-        .EncNumCh  = 16,
-        .EncChList = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31},
-        .DecNumCh  = 12,
-        .DecChList = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0 , 0, 0},
-    },
-    .ivaMap[2] =
-    {
-        .EncNumCh  = 6,
-        .EncChList = {10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
-        .DecNumCh  = 4,
-        .DecChList = {12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
-    },
-};
-
-
-Void chains_multiChDucatiSystemUseCaseSwMsTriDisplay1(Chains_Ctrl *chainsCfg)
-{
-    CaptureLink_CreateParams    capturePrm;
-    NsfLink_CreateParams        nsfPrm;
-    AlgLink_CreateParams        osdPrm;
-    DeiLink_CreateParams        deiPrm[2];
-    MergeLink_CreateParams      merge1Prm;
-    MergeLink_CreateParams      merge2Prm;
-    DupLink_CreateParams        dup1Prm;
-    DupLink_CreateParams        dup2Prm;
-    static SwMsLink_CreateParams       swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-    DisplayLink_CreateParams    displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-    IpcLink_CreateParams        ipcOutVpssPrm;
-    IpcLink_CreateParams        ipcInVpssPrm;
-    IpcLink_CreateParams        ipcOutVideoPrm;
-    IpcLink_CreateParams        ipcInVideoPrm;
-    EncLink_CreateParams        encPrm;
-    DecLink_CreateParams        decPrm;
-    IpcBitsOutLinkHLOS_CreateParams   ipcBitsOutHostPrm;
-    IpcBitsOutLinkRTOS_CreateParams   ipcBitsOutVideoPrm;
-    IpcBitsInLinkHLOS_CreateParams    ipcBitsInHostPrm;
-    IpcBitsInLinkRTOS_CreateParams    ipcBitsInVideoPrm;
-    IpcFramesInLinkRTOS_CreateParams  ipcFramesInDspPrm;
-    IpcFramesOutLinkRTOS_CreateParams  ipcFramesOutVpssPrm;
-    IpcFramesOutLinkRTOS_CreateParams  ipcFramesOutVpssToHostPrm;
-    IpcFramesInLinkHLOS_CreateParams   ipcFramesInHostPrm;
-    IpcFramesOutLinkHLOS_CreateParams  ipcFramesOutHostPrm;
-    IpcFramesInLinkRTOS_CreateParams   ipcFramesInVpssFromHostPrm;
-
-    System_LinkInfo bitsProducerLinkInfo;
-    System_LinkInfo framesProducerLinkInfo;
-
-    CaptureLink_VipInstParams *pCaptureInstPrm;
-    CaptureLink_OutParams     *pCaptureOutPrm;
-
-    UInt32 captureId;
-    UInt32 osdId;
-    UInt32 nsfId;
-    UInt32 deiId[2];
-    UInt32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
-    UInt32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
-    UInt32 grpxId[CHAINS_SW_MS_MAX_DISPLAYS];
-    UInt32 nullId;
-    UInt32 merge1Id, merge2Id, dup1Id, dup2Id;
-    UInt32 deiOutQue;
-    UInt32 encId, decId;
-    UInt32 ipcOutVpssId, ipcInVpssId;
-    UInt32 ipcOutVideoId, ipcInVideoId;
-    UInt32 ipcBitsOutVideoId, ipcBitsInHostId;
-    UInt32 ipcBitsInVideoId, ipcBitsOutHostId;
-    Uint32 ipcFramesOutVpssId, ipcFramesInDspId;
-    Uint32 ipcFramesOutVpssToHost, ipcFramesInHost;
-    Uint32 ipcFramesOutHost, ipcFramesInVpssFromHost;
-
-    UInt32 vipInstId;
-    UInt32 i, j;
-    UInt32 displayRes[SYSTEM_DC_MAX_VENC];
-    UInt32 enableGrpx, enableNsfLink;
-    Bool enableOsdAlgLink;
-    Bool enableVidFrameExport;
-    UInt32 numSubChains;
-
-    Ptr osdWinSrAddr[ALG_LINK_OSD_MAX_CH][CHAINS_OSD_NUM_WINDOWS];
-    Ptr osdWinBuPtr[ALG_LINK_OSD_MAX_CH][CHAINS_OSD_NUM_WINDOWS];
-
-    Bool switchCh;
-    Bool switchLayout;
-    Bool enableSdtv;
-    char ch;
-#ifdef  SYSTEM_ENABLE_AUDIO
-    Bool    audioCaptureActive = FALSE;
-    Bool    audioPlaybackActive = FALSE;
-    Int8    audioCaptureChNum = 0;
-    Int8    audioPlaybackChNum = 0;
-    Bool    audioPathSetFlag = FALSE;
-#endif
-
-    Chains_ipcBitsInit();
-    Chains_ipcFramesInit();
-
-    CHAINS_INIT_STRUCT(CaptureLink_CreateParams, capturePrm);
-    CHAINS_INIT_STRUCT(DeiLink_CreateParams, deiPrm[0]);
-    CHAINS_INIT_STRUCT(DeiLink_CreateParams, deiPrm[1]);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVpssPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVideoPrm);
-    CHAINS_INIT_STRUCT(IpcBitsOutLinkHLOS_CreateParams,ipcBitsOutHostPrm);
-    CHAINS_INIT_STRUCT(IpcBitsOutLinkRTOS_CreateParams,ipcBitsOutVideoPrm);
-    CHAINS_INIT_STRUCT(IpcBitsInLinkHLOS_CreateParams,ipcBitsInHostPrm);
-    CHAINS_INIT_STRUCT(IpcBitsInLinkRTOS_CreateParams,ipcBitsInVideoPrm);
-    CHAINS_INIT_STRUCT(IpcFramesInLinkRTOS_CreateParams,ipcFramesInDspPrm);
-    CHAINS_INIT_STRUCT(IpcFramesOutLinkRTOS_CreateParams,ipcFramesOutVpssPrm);
-    CHAINS_INIT_STRUCT(IpcFramesOutLinkRTOS_CreateParams ,ipcFramesOutVpssToHostPrm);
-    CHAINS_INIT_STRUCT(IpcFramesInLinkHLOS_CreateParams  ,ipcFramesInHostPrm);
-    CHAINS_INIT_STRUCT(IpcFramesOutLinkHLOS_CreateParams ,ipcFramesOutHostPrm);
-    CHAINS_INIT_STRUCT(IpcFramesInLinkRTOS_CreateParams  ,ipcFramesInVpssFromHostPrm);
-    CHAINS_INIT_STRUCT(DecLink_CreateParams, decPrm);
-    CHAINS_INIT_STRUCT(EncLink_CreateParams, encPrm);
-
-    for (i = 0; i < CHAINS_SW_MS_MAX_DISPLAYS; i++)
-    {
-        CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
-        CHAINS_INIT_STRUCT(SwMsLink_CreateParams, swMsPrm[i]);
-    }
-
-    captureId    = SYSTEM_LINK_ID_CAPTURE;
-    osdId        = SYSTEM_LINK_ID_ALG_0;
-    nsfId        = SYSTEM_LINK_ID_NSF_0;
-    deiId[0]     = SYSTEM_LINK_ID_DEI_HQ_0;
-    deiId[1]     = SYSTEM_LINK_ID_DEI_0;
-    merge1Id      = SYSTEM_VPSS_LINK_ID_MERGE_0;
-    merge2Id      = SYSTEM_VPSS_LINK_ID_MERGE_1;
-    dup1Id        = SYSTEM_VPSS_LINK_ID_DUP_0;
-    dup2Id        = SYSTEM_VPSS_LINK_ID_DUP_1;
-
-    swMsId[0]      = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
-    swMsPrm[0].numSwMsInst = 1;
-    swMsPrm[0].swMsInstId[0] = SYSTEM_SW_MS_SC_INST_SC5;
-    swMsId[1]      = SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
-    swMsPrm[1].numSwMsInst = 1;
-    swMsPrm[1].swMsInstId[0] = SYSTEM_SW_MS_SC_INST_SC5;
-
-    displayId[0] = SYSTEM_LINK_ID_DISPLAY_0; // ON CHIP HDMI
-    displayId[1] = SYSTEM_LINK_ID_DISPLAY_1; // OFF CHIP HDMI
-    displayId[2] = SYSTEM_LINK_ID_DISPLAY_2; // OFF CHIP HDMI
-    grpxId[0]    = SYSTEM_LINK_ID_GRPX_0;
-    grpxId[1]    = SYSTEM_LINK_ID_GRPX_1;
-#if 0    /* Enabling graphics only for ON CHIP HDMI an OFF CHIP HDMI*/
-    grpxId[2]    = SYSTEM_LINK_ID_GRPX_2;
-#endif
-    nullId       = SYSTEM_VPSS_LINK_ID_NULL_0;
-
-    ipcFramesOutVpssId = SYSTEM_VPSS_LINK_ID_IPC_FRAMES_OUT_0;
-    ipcFramesInDspId   = SYSTEM_DSP_LINK_ID_IPC_FRAMES_IN_0;
-
-    ipcOutVpssId = SYSTEM_VPSS_LINK_ID_IPC_OUT_M3_0;
-    ipcInVideoId = SYSTEM_VIDEO_LINK_ID_IPC_IN_M3_0;
-    ipcOutVideoId= SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_0;
-    ipcInVpssId  = SYSTEM_VPSS_LINK_ID_IPC_IN_M3_0;
-
-    encId        = SYSTEM_LINK_ID_VENC_0;
-    decId        = SYSTEM_LINK_ID_VDEC_0;
-
-    ipcBitsOutVideoId = SYSTEM_VIDEO_LINK_ID_IPC_BITS_OUT_0;
-    ipcBitsInHostId   = SYSTEM_HOST_LINK_ID_IPC_BITS_IN_0;
-    ipcBitsOutHostId  = SYSTEM_HOST_LINK_ID_IPC_BITS_OUT_0;
-    ipcBitsInVideoId  = SYSTEM_VIDEO_LINK_ID_IPC_BITS_IN_0;
-
-    ipcFramesOutVpssToHost  = SYSTEM_VPSS_LINK_ID_IPC_FRAMES_OUT_1;
-    ipcFramesInHost         = SYSTEM_HOST_LINK_ID_IPC_FRAMES_IN_0;
-    ipcFramesOutHost        = SYSTEM_HOST_LINK_ID_IPC_FRAMES_OUT_0;
-    ipcFramesInVpssFromHost = SYSTEM_VPSS_LINK_ID_IPC_FRAMES_IN_0;
-
-    chainsCfg->enableNsfLink = FALSE;//TRUE;
-    chainsCfg->enableOsdAlgLink = FALSE;
-    chainsCfg->enableVidFrameExport = TRUE;
-    enableGrpx               = ENABLE_GRPX;
-    enableNsfLink            = chainsCfg->enableNsfLink;
-    enableOsdAlgLink            = chainsCfg->enableOsdAlgLink;
-    enableVidFrameExport     = chainsCfg->enableVidFrameExport;
-
-    memcpy(displayRes,chainsCfg->displayRes,sizeof(displayRes));
-    numSubChains             = 2;
-    deiOutQue                = DEI_LINK_OUT_QUE_VIP_SC;
-    enableSdtv               = TRUE;
-
-    System_linkControl(
-        SYSTEM_LINK_ID_M3VIDEO,
-        SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
-        &systemVid_encDecIvaChMapTbl,
-        sizeof(SystemVideo_Ivahd2ChMap_Tbl),
-        TRUE
-    );
-
-    CaptureLink_CreateParams_Init(&capturePrm);
-    capturePrm.enableSdCrop = FALSE;
-
-    capturePrm.numVipInst    = 2*numSubChains;
-
-    /* If OsdAlgLink is enabled, make sure to enable NsfLink as ipcFramesIn and */
-    /* out is not supported to operate in multiple out queues required to    */
-    /* connect then to DEI.                                                  */
-    if(enableOsdAlgLink)
-    {
-        capturePrm.outQueParams[0].nextLink = ipcFramesOutVpssId;
-
-        ipcFramesOutVpssPrm.baseCreateParams.inQueParams.prevLinkId = captureId;
-        ipcFramesOutVpssPrm.baseCreateParams.inQueParams.prevLinkQueId = 0;
-        ipcFramesOutVpssPrm.baseCreateParams.notifyPrevLink = TRUE;
-
-        if(enableNsfLink)
-        {
-            ipcFramesOutVpssPrm.baseCreateParams.numOutQue = 1;
-            ipcFramesOutVpssPrm.baseCreateParams.outQueParams[0].nextLink = nsfId;
-        }
-        else
-        {
-            ipcFramesOutVpssPrm.baseCreateParams.numOutQue = numSubChains;
-            ipcFramesOutVpssPrm.baseCreateParams.outQueParams[0].nextLink = deiId[0];
-            ipcFramesOutVpssPrm.baseCreateParams.outQueParams[1].nextLink = deiId[1];
-        }
-
-        ipcFramesOutVpssPrm.baseCreateParams.notifyNextLink = TRUE;
-
-        ipcFramesOutVpssPrm.baseCreateParams.processLink = ipcFramesInDspId;
-        ipcFramesOutVpssPrm.baseCreateParams.notifyProcessLink = FALSE;
-        ipcFramesOutVpssPrm.baseCreateParams.noNotifyMode = TRUE;
-
-        //prevLink->processLink->nextLink
-        ipcFramesInDspPrm.baseCreateParams.inQueParams.prevLinkId = ipcFramesOutVpssId;
-        ipcFramesInDspPrm.baseCreateParams.inQueParams.prevLinkQueId = 0;
-        ipcFramesInDspPrm.baseCreateParams.numOutQue   = 1;
-        ipcFramesInDspPrm.baseCreateParams.outQueParams[0].nextLink = osdId;
-        ipcFramesInDspPrm.baseCreateParams.notifyPrevLink = FALSE;
-        ipcFramesInDspPrm.baseCreateParams.notifyNextLink = TRUE;
-        ipcFramesInDspPrm.baseCreateParams.noNotifyMode              = TRUE;
-
-        osdPrm.inQueParams.prevLinkId = ipcFramesInDspId;
-        osdPrm.inQueParams.prevLinkQueId = 0;
-    }
-    else if(enableNsfLink) {
-      capturePrm.outQueParams[0].nextLink = nsfId;
-    } else{
-      capturePrm.outQueParams[0].nextLink = deiId[0];
-      capturePrm.outQueParams[1].nextLink = deiId[1];
-    }
-    capturePrm.tilerEnable              = FALSE;
-
-    for(vipInstId=0; vipInstId<capturePrm.numVipInst; vipInstId++)
-    {
-        pCaptureInstPrm                     = &capturePrm.vipInst[vipInstId];
-        pCaptureInstPrm->vipInstId          = (SYSTEM_CAPTURE_INST_VIP0_PORTA+
-                                              vipInstId)%SYSTEM_CAPTURE_INST_MAX;
-        pCaptureInstPrm->videoDecoderId     = SYSTEM_DEVICE_VID_DEC_TVP5158_DRV;
-        pCaptureInstPrm->inDataFormat       = SYSTEM_DF_YUV422P;
-        pCaptureInstPrm->standard           = SYSTEM_STD_MUX_4CH_D1;
-        pCaptureInstPrm->numOutput          = 1;
-
-        pCaptureOutPrm                      = &pCaptureInstPrm->outParams[0];
-        pCaptureOutPrm->dataFormat          = SYSTEM_DF_YUV422I_YUYV;
-        pCaptureOutPrm->scEnable            = FALSE;
-        pCaptureOutPrm->scOutWidth          = 0;
-        pCaptureOutPrm->scOutHeight         = 0;
-        if ((vipInstId >= numSubChains) && !(enableNsfLink || enableOsdAlgLink))
-          pCaptureOutPrm->outQueId          = 1;
-        else
-          pCaptureOutPrm->outQueId          = 0;
-    }
-
-    if(enableOsdAlgLink)
-    {
-        nsfPrm.inQueParams.prevLinkId    = ipcFramesOutVpssId;
-        chainsCfg->bypassNsf             = TRUE;
-    }
-    else
-    {
-        chainsCfg->bypassNsf             = TRUE;
-        nsfPrm.inQueParams.prevLinkId    = captureId;
-    }
-
-    nsfPrm.bypassNsf                 = chainsCfg->bypassNsf;
-    nsfPrm.tilerEnable               = FALSE;
-    nsfPrm.inQueParams.prevLinkQueId = 0;
-    nsfPrm.numOutQue                 = numSubChains;
-    nsfPrm.outQueParams[0].nextLink  = deiId[0];
-    nsfPrm.outQueParams[1].nextLink  = deiId[1];
-
-    for(i=0; i<numSubChains; i++)
-    {
-        DeiLink_CreateParams_Init(&deiPrm[i]);
-
-        if(enableOsdAlgLink)
-        {
-            deiPrm[i].inQueParams.prevLinkId = ipcFramesOutVpssId;
-        }
-        else if(enableNsfLink)
-             {
-                 deiPrm[i].inQueParams.prevLinkId                      = nsfId;
-             }
-             else
-             {
-                 deiPrm[i].inQueParams.prevLinkId                      = captureId;
-             }
-        deiPrm[i].inQueParams.prevLinkQueId                     = i;
-        deiPrm[i].outQueParams[deiOutQue].nextLink              = merge1Id;
-        deiPrm[i].outQueParams[deiOutQue^1].nextLink            = nullId;
-        deiPrm[i].enableOut[deiOutQue]                          = TRUE;
-        deiPrm[i].enableOut[deiOutQue^1]                        = FALSE;
-        deiPrm[i].tilerEnable[DEI_LINK_OUT_QUE_VIP_SC]          = TRUE;
-        deiPrm[i].comprEnable                                   = FALSE;
-        deiPrm[i].setVipScYuv422Format                          = FALSE;
-
-        /* DEI Path Scalar ratio is 1:2, D1 => CIF */
-        deiPrm[i].outScaleFactor[DEI_LINK_OUT_QUE_DEI_SC][0].scaleMode    = DEI_SCALE_MODE_RATIO;
-        deiPrm[i].outScaleFactor[DEI_LINK_OUT_QUE_DEI_SC][0].ratio.widthRatio.numerator    = 1;
-        deiPrm[i].outScaleFactor[DEI_LINK_OUT_QUE_DEI_SC][0].ratio.widthRatio.denominator  = 2;
-
-        deiPrm[i].outScaleFactor[DEI_LINK_OUT_QUE_DEI_SC][0].ratio.heightRatio.numerator   = 1;
-        deiPrm[i].outScaleFactor[DEI_LINK_OUT_QUE_DEI_SC][0].ratio.heightRatio.denominator = 2;
-
-        /* VIP Scalar ratio is 1:1 */
-        deiPrm[i].outScaleFactor[DEI_LINK_OUT_QUE_VIP_SC][0].scaleMode    = DEI_SCALE_MODE_RATIO;
-        deiPrm[i].outScaleFactor[DEI_LINK_OUT_QUE_VIP_SC][0].ratio.widthRatio.numerator    = 1;
-        deiPrm[i].outScaleFactor[DEI_LINK_OUT_QUE_VIP_SC][0].ratio.widthRatio.denominator  = 1;
-
-        deiPrm[i].outScaleFactor[DEI_LINK_OUT_QUE_VIP_SC][0].ratio.heightRatio.numerator   = 1;
-        deiPrm[i].outScaleFactor[DEI_LINK_OUT_QUE_VIP_SC][0].ratio.heightRatio.denominator = 1;
-
-        {
-            int deiQId,deiChId;
-            for (deiQId = 0 ; deiQId < DEI_LINK_MAX_OUT_QUE; deiQId++)
-            {
-                for (deiChId = 1; deiChId < DEI_LINK_MAX_CH;deiChId++)
-                {
-                    deiPrm[i].outScaleFactor[deiQId][deiChId] =
-                      deiPrm[i].outScaleFactor[deiQId][0];
-                }
-            }
-        }
-        merge1Prm.numInQue                     = numSubChains;
-        merge1Prm.inQueParams[i].prevLinkId    = deiId[i];
-        merge1Prm.inQueParams[i].prevLinkQueId = deiOutQue;
-        merge1Prm.outQueParams.nextLink        = dup1Id;
-        merge1Prm.notifyNextLink               = TRUE;
-
-        dup1Prm.inQueParams.prevLinkId         = merge1Id;
-        dup1Prm.inQueParams.prevLinkQueId      = 0;
-        dup1Prm.numOutQue                      = numSubChains;
-        if (i == 0)
-          dup1Prm.outQueParams[i].nextLink     = merge2Id;
-        else
-          dup1Prm.outQueParams[i].nextLink     = ipcOutVpssId;
-        dup1Prm.notifyNextLink                 = TRUE;
-    }
-
-    ipcOutVpssPrm.inQueParams.prevLinkId    = dup1Id;
-    ipcOutVpssPrm.inQueParams.prevLinkQueId = 1;
-    ipcOutVpssPrm.numOutQue                 = 1;
-    ipcOutVpssPrm.outQueParams[0].nextLink     = ipcInVideoId;
-    ipcOutVpssPrm.notifyNextLink            = FALSE;
-    ipcOutVpssPrm.notifyPrevLink            = TRUE;
-    ipcOutVpssPrm.noNotifyMode              = TRUE;
-
-    ipcInVideoPrm.inQueParams.prevLinkId    = ipcOutVpssId;
-    ipcInVideoPrm.inQueParams.prevLinkQueId = 0;
-    ipcInVideoPrm.numOutQue                 = 1;
-    ipcInVideoPrm.outQueParams[0].nextLink     = encId;
-    ipcInVideoPrm.notifyNextLink            = TRUE;
-    ipcInVideoPrm.notifyPrevLink            = FALSE;
-    ipcInVideoPrm.noNotifyMode              = TRUE;
-
-    for (i=0; i<16; i++) {
-        encPrm.chCreateParams[i].format     = IVIDEO_H264HP;
-        encPrm.chCreateParams[i].profile    = IH264_HIGH_PROFILE;
-        encPrm.chCreateParams[i].dataLayout = VCODEC_FIELD_SEPARATED;
-        encPrm.chCreateParams[i].fieldMergeEncodeEnable  = FALSE;
-        encPrm.chCreateParams[i].defaultDynamicParams.intraFrameInterval = 30;
-        encPrm.chCreateParams[i].encodingPreset = XDM_DEFAULT;
-        encPrm.chCreateParams[i].enableAnalyticinfo = 0;
-        encPrm.chCreateParams[i].enableWaterMarking = 0;
-        encPrm.chCreateParams[i].rateControlPreset =
-                                 IVIDEO_STORAGE;
-        encPrm.chCreateParams[i].defaultDynamicParams.inputFrameRate = 30;
-        encPrm.chCreateParams[i].defaultDynamicParams.targetBitRate =
-                                 (2 * 1000 * 1000);
-        encPrm.chCreateParams[i].defaultDynamicParams.interFrameInterval = 1;
-        encPrm.chCreateParams[i].defaultDynamicParams.mvAccuracy =
-                                 IVIDENC2_MOTIONVECTOR_QUARTERPEL;
-    }
-    encPrm.inQueParams.prevLinkId   = ipcInVideoId;
-    encPrm.inQueParams.prevLinkQueId= 0;
-    encPrm.outQueParams.nextLink = ipcBitsOutVideoId;
-
-    ipcBitsOutVideoPrm.baseCreateParams.inQueParams.prevLinkId = encId;
-    ipcBitsOutVideoPrm.baseCreateParams.inQueParams.prevLinkQueId = 0;
-    ipcBitsOutVideoPrm.baseCreateParams.numOutQue = 1;
-    ipcBitsOutVideoPrm.baseCreateParams.outQueParams[0].nextLink = ipcBitsInHostId;
-    Chains_ipcBitsInitCreateParams_BitsOutRTOS(&ipcBitsOutVideoPrm,
-                                               TRUE);
-
-    ipcBitsInHostPrm.baseCreateParams.inQueParams.prevLinkId = ipcBitsOutVideoId;
-    ipcBitsInHostPrm.baseCreateParams.inQueParams.prevLinkQueId = 0;
-    Chains_ipcBitsInitCreateParams_BitsInHLOS(&ipcBitsInHostPrm);
-
-    Chains_displayCtrlInit(displayRes);
-
-    if(enableOsdAlgLink)
-    {
-        for(i = 0; i < ALG_LINK_OSD_MAX_CH; i++)
-        {
-            AlgLink_OsdChWinParams * chWinPrm = &osdPrm.osdChCreateParams[i].chDefaultParams;
-
-            /* set osd window max width and height */
-            osdPrm.osdChCreateParams[i].maxWidth = CHAINS_OSD_WIN_MAX_WIDTH;
-            osdPrm.osdChCreateParams[i].maxHeight = CHAINS_OSD_WIN_MAX_HEIGHT;
-            chWinPrm->numWindows = CHAINS_OSD_NUM_WINDOWS;
-
-            /* set osd window params. In this demo # of windows set to 2 */
-            chWinPrm->winPrm[0].startX             = CHAINS_OSD_WIN0_STARTX;
-            chWinPrm->winPrm[0].startY             = CHAINS_OSD_WIN0_STARTY;
-
-/*            chWinPrm->winPrm[1].startX             = CHAINS_OSD_WIN1_STARTX;
-            chWinPrm->winPrm[1].startY             = CHAINS_OSD_WIN1_STARTY;  */
-            /* set osd window params */
-            for(j=0; j < chWinPrm->numWindows; j++)
-            {
-                Int8 fileName[CHAINS_OSD_MAX_FILE_NAME_SIZE] = CHAINS_OSD_WIN0_FILE_NAME;
-
-                Chains_createBuf(&chWinPrm->winPrm[j].addr[0][0],
-                                 &osdWinBuPtr[i][j], &osdWinSrAddr[i][j], CHAINS_OSD_WIN_WIDTH *
-                                 CHAINS_OSD_WIN_HEIGHT*2, SYSTEM_IPC_SR_NON_CACHED_DEFAULT);
-                Chains_fillBuf(osdWinBuPtr[i][j],
-                               fileName,
-                               CHAINS_OSD_WIN_WIDTH * CHAINS_OSD_WIN_HEIGHT * 2);
-
-                chWinPrm->winPrm[j].format             = SYSTEM_DF_YUV422I_YUYV;
-                chWinPrm->winPrm[j].width              = CHAINS_OSD_WIN_WIDTH;
-                chWinPrm->winPrm[j].height             = CHAINS_OSD_WIN_HEIGHT;
-                chWinPrm->winPrm[j].lineOffset         = CHAINS_OSD_WIN_PITCH;
-                chWinPrm->winPrm[j].globalAlpha        = CHAINS_OSD_GLOBAL_ALPHA;
-                chWinPrm->winPrm[j].transperencyEnable = CHAINS_OSD_TRANSPARENCY;
-                chWinPrm->winPrm[j].enableWin          = CHAINS_OSD_ENABLE_WIN;
-            }
-        }
-    }
-
-    System_linkCreate (captureId, &capturePrm, sizeof(capturePrm));
-    System_linkControl(captureId, CAPTURE_LINK_CMD_CONFIGURE_VIP_DECODERS, NULL, 0, TRUE);
-
-    if(enableOsdAlgLink)
-    {
-        System_linkCreate(ipcFramesOutVpssId, &ipcFramesOutVpssPrm, sizeof(ipcFramesOutVpssPrm));
-        System_linkCreate(ipcFramesInDspId, &ipcFramesInDspPrm, sizeof(ipcFramesInDspPrm));
-        System_linkCreate(osdId , &osdPrm, sizeof(osdPrm));
-    }
-
-    if(enableNsfLink)
-       System_linkCreate(nsfId , &nsfPrm, sizeof(nsfPrm));
-
-    for(i=0; i<numSubChains; i++)
-        System_linkCreate(deiId[i]  , &deiPrm[i], sizeof(deiPrm[i]));
-
-    System_linkCreate(merge1Id   , &merge1Prm  , sizeof(merge1Prm));
-    System_linkCreate(dup1Id     , &dup1Prm    , sizeof(dup1Prm));
-
-    System_linkCreate(ipcOutVpssId , &ipcOutVpssPrm , sizeof(ipcOutVpssPrm) );
-    System_linkCreate(ipcInVideoId , &ipcInVideoPrm , sizeof(ipcInVideoPrm) );
-
-    System_linkCreate(encId, &encPrm, sizeof(encPrm));
-
-    System_linkCreate(ipcBitsOutVideoId, &ipcBitsOutVideoPrm, sizeof(ipcBitsOutVideoPrm));
-    System_linkCreate(ipcBitsInHostId, &ipcBitsInHostPrm, sizeof(ipcBitsInHostPrm));
-
-
-    System_linkGetInfo(ipcBitsInHostId,&bitsProducerLinkInfo);
-    OSA_assert(bitsProducerLinkInfo.numQue = 1);
-    ipcBitsOutHostPrm.baseCreateParams.numOutQue = 1;
-    ipcBitsOutHostPrm.baseCreateParams.outQueParams[0].nextLink = ipcBitsInVideoId;
-    Chains_ipcBitsInitCreateParams_BitsOutHLOS(&ipcBitsOutHostPrm,
-                                               &bitsProducerLinkInfo.queInfo[0]);
-    ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkId = ipcBitsOutHostId;
-    ipcBitsInVideoPrm.baseCreateParams.inQueParams.prevLinkQueId = 0;
-    ipcBitsInVideoPrm.baseCreateParams.numOutQue                = 1;
-    ipcBitsInVideoPrm.baseCreateParams.outQueParams[0].nextLink = decId;
-    Chains_ipcBitsInitCreateParams_BitsInRTOS(&ipcBitsInVideoPrm,
-                                              TRUE);
-
-    for (i=0; i<16; i++) {
-        decPrm.chCreateParams[i].format          = IVIDEO_H264HP;
-        decPrm.chCreateParams[i].profile         = IH264VDEC_PROFILE_ANY;
-        decPrm.chCreateParams[i].targetMaxWidth  = 720;
-        decPrm.chCreateParams[i].targetMaxHeight = 576;
-        decPrm.chCreateParams[i].processCallLevel= VDEC_FRAMELEVELPROCESSCALL;
-        decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = 30;
-        decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate =
-                                 (2 * 1000 * 1000);
-        decPrm.chCreateParams[i].tilerEnable = TRUE;
-    }
-    decPrm.inQueParams.prevLinkId = ipcBitsInVideoId;
-    decPrm.inQueParams.prevLinkQueId = 0;
-    decPrm.outQueParams.nextLink     = ipcOutVideoId;
-
-    ipcOutVideoPrm.inQueParams.prevLinkId    = decId;
-    ipcOutVideoPrm.inQueParams.prevLinkQueId = 0;
-    ipcOutVideoPrm.numOutQue                    = 1;
-    ipcOutVideoPrm.outQueParams[0].nextLink     = ipcInVpssId;
-    ipcOutVideoPrm.notifyNextLink            = FALSE;
-    ipcOutVideoPrm.notifyPrevLink            = TRUE;
-    ipcOutVideoPrm.noNotifyMode              = TRUE;
-
-    ipcInVpssPrm.inQueParams.prevLinkId    = ipcOutVideoId;
-    ipcInVpssPrm.inQueParams.prevLinkQueId = 0;
-    ipcInVpssPrm.numOutQue                 = 1;
-    ipcInVpssPrm.outQueParams[0].nextLink     = merge2Id;
-    ipcInVpssPrm.notifyNextLink            = TRUE;
-    ipcInVpssPrm.notifyPrevLink            = FALSE;
-    ipcInVpssPrm.noNotifyMode              = TRUE;
-
-    merge2Prm.numInQue                     = numSubChains;
-    merge2Prm.inQueParams[0].prevLinkId    = dup1Id;
-    merge2Prm.inQueParams[0].prevLinkQueId = 0;
-    merge2Prm.inQueParams[1].prevLinkId    = ipcInVpssId;
-    merge2Prm.inQueParams[1].prevLinkQueId = 0;
-    merge2Prm.outQueParams.nextLink        = dup2Id;
-    merge2Prm.notifyNextLink               = TRUE;
-
-    dup2Prm.inQueParams.prevLinkId         = merge2Id;
-    dup2Prm.inQueParams.prevLinkQueId      = 0;
-    dup2Prm.numOutQue                      = numSubChains;
-    dup2Prm.outQueParams[0].nextLink       = swMsId[0];
-    dup2Prm.outQueParams[1].nextLink       = swMsId[1];
-    dup2Prm.notifyNextLink                 = TRUE;
-
-    for(i=0; i<numSubChains; i++)
-    {
-        swMsPrm[i].inQueParams.prevLinkId    = dup2Id;
-        swMsPrm[i].inQueParams.prevLinkQueId = i;
-        if ((i == 0) && (enableVidFrameExport))
-        {
-            swMsPrm[i].outQueParams.nextLink     = ipcFramesOutVpssToHost;
-            /* Set ipcFramesOutVpss link info */
-            ipcFramesOutVpssToHostPrm.baseCreateParams.noNotifyMode = TRUE;
-            ipcFramesOutVpssToHostPrm.baseCreateParams.notifyNextLink = FALSE;
-            ipcFramesOutVpssToHostPrm.baseCreateParams.notifyPrevLink = TRUE;
-            ipcFramesOutVpssToHostPrm.baseCreateParams.inQueParams.prevLinkId = swMsId[i];
-            ipcFramesOutVpssToHostPrm.baseCreateParams.inQueParams.prevLinkQueId = 0;
-            ipcFramesOutVpssToHostPrm.baseCreateParams.outQueParams[0].nextLink = ipcFramesInHost;
-
-            ipcFramesInHostPrm.baseCreateParams.noNotifyMode = TRUE;
-            ipcFramesInHostPrm.baseCreateParams.notifyNextLink = FALSE;
-            ipcFramesInHostPrm.baseCreateParams.notifyPrevLink = FALSE;
-            ipcFramesInHostPrm.baseCreateParams.inQueParams.prevLinkId = ipcFramesOutVpssToHost;
-            ipcFramesInHostPrm.baseCreateParams.inQueParams.prevLinkQueId = 0;
-            ipcFramesInHostPrm.baseCreateParams.outQueParams[0].nextLink = SYSTEM_LINK_ID_INVALID;
-            ipcFramesInHostPrm.exportOnlyPhyAddr = TRUE;
-            Chains_ipcFramesInSetCbInfo(&ipcFramesInHostPrm);
-
-            ipcFramesOutHostPrm.baseCreateParams.noNotifyMode = TRUE;
-            ipcFramesOutHostPrm.baseCreateParams.notifyNextLink = FALSE;
-            ipcFramesOutHostPrm.baseCreateParams.notifyPrevLink = FALSE;
-            ipcFramesOutHostPrm.baseCreateParams.inQueParams.prevLinkId = SYSTEM_LINK_ID_INVALID;
-            ipcFramesOutHostPrm.baseCreateParams.inQueParams.prevLinkQueId = 0;
-            ipcFramesOutHostPrm.baseCreateParams.outQueParams[0].nextLink = ipcFramesInVpssFromHost;
-
-            ipcFramesInVpssFromHostPrm.baseCreateParams.noNotifyMode = TRUE;
-            ipcFramesInVpssFromHostPrm.baseCreateParams.notifyNextLink = TRUE;
-            ipcFramesInVpssFromHostPrm.baseCreateParams.notifyPrevLink = FALSE;
-            ipcFramesInVpssFromHostPrm.baseCreateParams.inQueParams.prevLinkId = ipcFramesOutHost;
-            ipcFramesInVpssFromHostPrm.baseCreateParams.inQueParams.prevLinkQueId = 0;
-            ipcFramesInVpssFromHostPrm.baseCreateParams.outQueParams[0].nextLink = displayId[i];
-        }
-        else
-        {
-            swMsPrm[i].outQueParams.nextLink     = displayId[i];
-        }
-        swMsPrm[i].lineSkipMode              = FALSE;
-        swMsPrm[i].layoutPrm.outputFPS       = 30;
-        swMsPrm[i].maxInputQueLen            = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
-        swMsPrm[i].maxOutRes                 = displayRes[i];
-
-        Chains_swMsGenerateLayoutParams(i, 0, &swMsPrm[i]);
-        if ((i == 0) && (enableVidFrameExport))
-        {
-            displayPrm[i].inQueParams[0].prevLinkId    = ipcFramesInVpssFromHost;
-        }
-        else
-        {
-            displayPrm[i].inQueParams[0].prevLinkId    = swMsId[i];
-        }
-        displayPrm[i].inQueParams[0].prevLinkQueId = 0;
-        displayPrm[i].displayRes                = swMsPrm[i].maxOutRes;
-    }
-
-    if(enableSdtv)
-    {
-        dup2Prm.numOutQue                      = 3;
-        dup2Prm.outQueParams[2].nextLink       = displayId[2];
-    }
-
-    displayPrm[2].inQueParams[0].prevLinkId    = dup2Id;
-    displayPrm[2].inQueParams[0].prevLinkQueId = 2;
-    displayPrm[2].displayRes                = VSYS_STD_NTSC;
-
-    System_linkCreate(ipcBitsOutHostId,&ipcBitsOutHostPrm,sizeof(ipcBitsOutHostPrm));
-    System_linkCreate(ipcBitsInVideoId,&ipcBitsInVideoPrm,sizeof(ipcBitsInVideoPrm));
-    System_linkCreate(decId, &decPrm, sizeof(decPrm));
-
-    System_linkCreate(ipcOutVideoId, &ipcOutVideoPrm, sizeof(ipcOutVideoPrm));
-    System_linkCreate(ipcInVpssId  , &ipcInVpssPrm  , sizeof(ipcInVpssPrm)  );
-
-    System_linkCreate(merge2Id   , &merge2Prm  , sizeof(merge2Prm));
-    System_linkCreate(dup2Id     , &dup2Prm    , sizeof(dup2Prm));
-
-    for(i=0; i<numSubChains; i++)
-        System_linkCreate(swMsId[i]  , &swMsPrm[i], sizeof(swMsPrm[i]));
-
-    if(enableVidFrameExport)
-    {
-        System_linkCreate(ipcFramesOutVpssToHost     , &ipcFramesOutVpssToHostPrm    , sizeof(ipcFramesOutVpssToHostPrm));
-        System_linkCreate(ipcFramesInHost     , &ipcFramesInHostPrm    , sizeof(ipcFramesInHostPrm));
-        System_linkGetInfo(ipcFramesInHost,&framesProducerLinkInfo);
-        OSA_assert(framesProducerLinkInfo.numQue == 1);
-        ipcFramesOutHostPrm.inQueInfo = framesProducerLinkInfo.queInfo[0];
-        System_linkCreate(ipcFramesOutHost     , &ipcFramesOutHostPrm    , sizeof(ipcFramesOutHostPrm));
-        System_linkCreate(ipcFramesInVpssFromHost     , &ipcFramesInVpssFromHostPrm    , sizeof(ipcFramesInVpssFromHostPrm));
-    }
-    for(i=0; i<numSubChains; i++)
-        System_linkCreate(displayId[i], &displayPrm[i], sizeof(displayPrm[i]));
-
-    if(enableSdtv)
-    {
-        System_linkCreate(displayId[2], &displayPrm[2], sizeof(displayPrm[2]));
-    }
-
-#ifdef  SYSTEM_ENABLE_AUDIO
-    Audio_captureCreate();
-    Audio_playCreate();
-    audioPathSetFlag = FALSE;
-    audioCaptureActive = FALSE;
-    audioPlaybackActive = FALSE;
-#endif
-
-    Chains_memPrintHeapStatus();
-    //Utils_encdecHdvicpPrfInit();
-
-    {
-        if(enableGrpx)
-        {
-#if USE_FBDEV
-            grpx_init(GRPX_FORMAT_RGB888);
-#else
-            Chains_grpxEnable(grpxId[0], TRUE);
-            Chains_grpxEnable(grpxId[1], TRUE);
-#if 0    /* Enabling graphics only for ON CHIP HDMI an OFF CHIP HDMI*/
-            Chains_grpxEnable(grpxId[2], TRUE);
-#endif
-#endif
-        }
-        for(i=0; i<numSubChains; i++)
-            System_linkStart(displayId[i]);
-
-        if(enableSdtv)
-        {
-            System_linkStart(displayId[2]);
-        }
-
-        if(enableVidFrameExport)
-        {
-            System_linkStart(ipcFramesOutVpssToHost);
-            System_linkStart(ipcFramesInHost);
-            System_linkStart(ipcFramesOutHost);
-            System_linkStart(ipcFramesInVpssFromHost);
-        }
-
-        for(i=0; i<numSubChains; i++)
-            System_linkStart(swMsId[i] );
-
-        System_linkStart(decId);
-        System_linkStart(encId);
-
-        for(i=0; i<numSubChains; i++)
-            System_linkStart(deiId[i] );
-
-        if(enableNsfLink)
-           System_linkStart(nsfId    );
-
-        if(enableOsdAlgLink)
-        {
-            System_linkStart(ipcFramesOutVpssId);
-            System_linkStart(ipcFramesInDspId);
-            System_linkStart(osdId);
-        }
-
-        System_linkStart(captureId);
-
-        //OSA_waitMsecs(10000);
-        System_linkStart(ipcBitsOutHostId);
-
-        /* Start taking CPU load just before starting of links */
-        Chains_prfLoadCalcEnable(TRUE, FALSE, FALSE);
-
-
-
-        if(enableGrpx)
-        {
-#if USE_FBDEV
-            grpx_draw();
-#endif
-        }
-
-        while(1)
-        {
-#ifdef  SYSTEM_ENABLE_AUDIO
-INPUT:
-#endif
-            ch = Chains_menuRunTime();
-
-            switchLayout = FALSE;
-            switchCh = FALSE;
-
-#ifdef  SYSTEM_ENABLE_AUDIO
-            if(ch=='a')
-            {
-                while (1)
-                {
-                    ch = Chains_audioMenuRunTime();
-                    if (ch == 'f')
-                    {
-                        char inputStr[256];
-
-                        if (audioPathSetFlag == TRUE)
-                        {
-                            printf ("Audio storage path set already, setting to a new path............\n");
-                        }
-                        Chains_AudioStorageInputRunTime(inputStr);
-                        if (Audio_setStoragePath(inputStr) == AUDIO_STATUS_OK)
-                        {
-                            audioPathSetFlag = TRUE;
-                        }
-                        else
-                        {
-                            audioPathSetFlag = FALSE;
-                        }
-                    }
-
-                    if (audioPathSetFlag == TRUE)
-                    {
-                        if (ch == 's')
-                        {
-                            audioCaptureChNum = Chains_AudioCaptureInputRunTime(audioCaptureActive, AUDIO_MAX_CHANNELS);
-                            audioCaptureChNum--;    /* Audio ch num is 0 ~ 3 */
-                            if (audioCaptureActive == TRUE)
-                            {
-                                Audio_captureStop();
-                            }
-                            if (audioPlaybackActive == TRUE && audioCaptureChNum == audioPlaybackChNum)
-                            {
-                                printf ("\r\n Playback active on same channel... stopping playback...");
-                                Audio_playStop();
-                                audioPlaybackActive = FALSE;
-                            }
-                            Audio_captureStart(audioCaptureChNum);
-                            audioCaptureActive = TRUE;
-                        }
-
-                        if (ch == 't')
-                        {
-                            Audio_captureStop();
-                            printf ("\r\n Audio Capture stopped....\n");
-                            audioCaptureActive = FALSE;
-                        }
-
-                        if(ch=='p')
-                        {
-                            audioPlaybackChNum = Chains_AudioPlaybackInputRunTime(audioPlaybackActive, AUDIO_MAX_CHANNELS);
-                            audioPlaybackChNum--;   /* Audio ch num is 0 ~ 3 */
-                            if (audioPlaybackActive == TRUE)
-                            {
-                                Audio_playStop();
-                            }
-                            if (audioCaptureActive == TRUE && audioCaptureChNum == audioPlaybackChNum)
-                            {
-                                printf ("\r\n Capture active on same channel... stopping capture...");
-                                Audio_captureStop();
-                                audioCaptureActive = FALSE;
-                            }
-                            Audio_playStart(audioPlaybackChNum,0);
-                            audioPlaybackActive = TRUE;
-                        }
-
-                        if (ch == 'b')
-                        {
-                            Audio_playStop();
-                            printf ("\r\n Audio Playback stopped....\n");
-                            audioPlaybackActive = FALSE;
-                        }
-
-                        if (ch == 'd')
-                        {
-                            Audio_capturePrintStats();
-                            Audio_playPrintStats();
-                        }
-                    }
-                    else
-                    {
-                        printf ("\n\n Invalid OPERATION !!!!! - Set Valid Storage Path to enable capture / playback...\n");
-                    }
-                    if(ch=='0')
-                        break;
-                }
-                goto INPUT;
-            }
-#endif
-            if(ch=='0')
-                break;
-            if(ch=='p')
-                System_linkControl(captureId,
-                       CAPTURE_LINK_CMD_PRINT_ADV_STATISTICS, NULL, 0, TRUE);
-            if(ch=='s')
-               switchLayout = TRUE;
-            if(ch=='c')
-               switchCh = TRUE;
-            if(ch=='b')
-            {
-                EncLink_ChBitRateParams params = { 0 };
-                params.chId = Chains_ChanInputRunTime();
-                if(params.chId != 128 )
-                {
-                    printf("\r\n Channel Selected: %d", params.chId);
-
-                    /* New bitrate value */
-                    params.targetBitRate = Chains_BitRateInputRunTime();
-                    if(params.targetBitRate != 0)
-                        System_linkControl(encId, ENC_LINK_CMD_SET_CODEC_BITRATE,
-                                           &params, sizeof(params), TRUE);
-                }
-            }
-            if(ch=='f')
-            {
-                EncLink_ChFpsParams params = { 0 };
-                params.chId = Chains_ChanInputRunTime();
-                if(params.chId != 128 )
-                {
-                    printf("\r\n Channel Selected: %d", params.chId);
-                    /* New fps vaule in fps x 1000 formate */
-                    params.targetFps = (1000 * Chains_FrameRateInputRunTime());
-                    if(params.targetFps != 0)
-                        System_linkControl(encId, ENC_LINK_CMD_SET_CODEC_FPS,
-                                          &params, sizeof(params), TRUE);
-                }
-            }
-            if(ch=='r')
-            {
-                EncLink_ChIntraFrIntParams params = { 0 };
-                params.chId = Chains_ChanInputRunTime();
-                if(params.chId != 128 )
-                {
-                    printf("\r\n Channel Selected: %d", params.chId);
-                    /* new GOP value */
-                    params.intraFrameInterval = Chains_IntraFrRateInputRunTime();
-                    if(params.intraFrameInterval != 0)
-                        System_linkControl(encId, ENC_LINK_CMD_SET_CODEC_INTRAI,
-                                   &params, sizeof(params), TRUE);
-                }
-            }
-            if(ch=='t')
-            {
-                EncLink_ChForceIFrParams params = { 0 };
-                params.chId = Chains_ChanInputRunTime();
-                if(params.chId != 128 )
-                {
-                    printf("\r\nForce IDR on Channel: %d", params.chId);
-                    System_linkControl(encId, ENC_LINK_CMD_SET_CODEC_FORCEI,
-                                       &params, sizeof(params), TRUE);
-                }
-            }
-            if(ch=='g')
-            {
-                EncLink_GetDynParams params = { 0 };
-                params.chId = Chains_ChanInputRunTime();
-                if(params.chId != 128 )
-                {
-                    printf("\r\nGet Dynamic params of Channel: %d", params.chId);
-                    System_linkControl(encId, ENC_LINK_CMD_GET_CODEC_PARAMS,
-                                       &params, sizeof(params), TRUE);
-                    printf("\r\n Height: %d\n Width: %d\n Framerate: %d\n",
-                    params.inputHeight/**< Input frame height. */,
-                    params.inputWidth/**< Input frame width. */,
-                    params.targetFps);
-
-                    printf(" Bitrate: %d\n Intra-Framerate: %d \n",
-                    params.targetBitRate,
-                    params.intraFrameInterval);
-                }
-            }
-            if(ch=='i')
-            {
-                System_linkControl(encId,
-                       ENC_LINK_CMD_PRINT_IVAHD_STATISTICS, NULL, 0, TRUE);
-            }
-            if(ch=='m')
-            {
-                printf(" STATISTICS for SwMs with linkId: %d \n", swMsId[0]);
-                System_linkControl(swMsId[0],
-                       SYSTEM_SW_MS_LINK_CMD_PRINT_STATISTICS, NULL, 0, TRUE);
-                printf(" STATISTICS for SwMs with linkId: %d \n", swMsId[1]);
-                System_linkControl(swMsId[1],
-                       SYSTEM_SW_MS_LINK_CMD_PRINT_STATISTICS, NULL, 0, TRUE);
-            }
-            Chains_swMsSwitchLayout(swMsId, swMsPrm, switchLayout, switchCh, 2);
-        }
-
-        System_linkStop(captureId);
-
-        if(enableOsdAlgLink)
-        {
-            System_linkStop(ipcFramesOutVpssId);
-            System_linkStop(ipcFramesInDspId);
-            System_linkStop(osdId);
-        }
-
-        if(enableNsfLink)
-           System_linkStop(nsfId    );
-
-        for(i=0; i<numSubChains; i++)
-            System_linkStop(deiId[i] );
-
-        System_linkStop(encId);
-        Chains_ipcBitsStop();
-        System_linkStop(ipcBitsOutHostId);
-        System_linkStop(ipcBitsInVideoId);
-        System_linkStop(decId);
-
-        for(i=0; i<numSubChains; i++)
-            System_linkStop(swMsId[i] );
-
-        if(enableVidFrameExport)
-        {
-            System_linkStop(ipcFramesOutVpssToHost);
-            System_linkStop(ipcFramesInHost);
-            System_linkStop(ipcFramesOutHost);
-            System_linkStop(ipcFramesInVpssFromHost);
-        }
-
-        for(i=0; i<numSubChains; i++)
-            System_linkStop(displayId[i]);
-
-        if(enableSdtv)
-        {
-            System_linkStop(displayId[2]);
-        }
-
-#ifdef  SYSTEM_ENABLE_AUDIO
-            if (audioCaptureActive == TRUE)
-            {
-                Audio_captureStop();
-            }
-            if (audioPlaybackActive == TRUE)
-            {
-                Audio_playStop();
-            }
-#endif
-
-        if(enableGrpx)
-        {
-#if USE_FBDEV
-            grpx_exit();
-#else
-            Chains_grpxEnable(grpxId[0], FALSE);
-            Chains_grpxEnable(grpxId[1], FALSE);
-#if 0    /* Enabling graphics only for ON CHIP HDMI an OFF CHIP HDMI*/
-            Chains_grpxEnable(grpxId[2], FALSE);
-#endif
-#endif
-        }
-    }
-
-    System_linkDelete(captureId);
-
-    if(enableOsdAlgLink)
-    {
-        System_linkDelete(ipcFramesOutVpssId);
-        System_linkDelete(ipcFramesInDspId);
-        System_linkDelete(osdId);
-        for(i = 0; i < ALG_LINK_OSD_MAX_CH; i++)
-        {
-            AlgLink_OsdChWinParams * chWinPrm = &osdPrm.osdChCreateParams[i].chDefaultParams;
-
-            chWinPrm->numWindows = CHAINS_OSD_NUM_WINDOWS;
-
-            for(j=0; j < chWinPrm->numWindows; j++)
-            {
-                Chains_deleteBuf(osdWinBuPtr[i][j], CHAINS_OSD_WIN_WIDTH *
-                                 CHAINS_OSD_WIN_HEIGHT*2, SYSTEM_IPC_SR_NON_CACHED_DEFAULT);
-            }
-        }
-    }
-
-    if(enableNsfLink)
-       System_linkDelete(nsfId    );
-
-    for(i=0; i<numSubChains; i++)
-        System_linkDelete(deiId[i] );
-
-    System_linkDelete(merge1Id);
-    System_linkDelete(dup1Id);
-
-    System_linkDelete(ipcOutVpssId );
-    System_linkDelete(ipcInVideoId );
-
-    System_linkDelete(encId);
-    System_linkDelete(ipcBitsOutVideoId);
-    System_linkDelete(ipcBitsInHostId);
-    System_linkDelete(ipcBitsOutHostId);
-    System_linkDelete(ipcBitsInVideoId);
-    System_linkDelete(decId);
-
-    System_linkDelete(ipcOutVideoId);
-    System_linkDelete(ipcInVpssId  );
-
-    System_linkDelete(merge2Id);
-    System_linkDelete(dup2Id);
-
-    for(i=0; i<numSubChains; i++)
-        System_linkDelete(swMsId[i] );
-
-    if(enableVidFrameExport)
-    {
-        System_linkDelete(ipcFramesOutVpssToHost);
-        System_linkDelete(ipcFramesInHost);
-        System_linkDelete(ipcFramesOutHost);
-        System_linkDelete(ipcFramesInVpssFromHost);
-    }
-
-    for(i=0; i<numSubChains; i++)
-        System_linkDelete(displayId[i]);
-
-    if(enableSdtv)
-    {
-        System_linkDelete(displayId[2]);
-    }
-#ifdef  SYSTEM_ENABLE_AUDIO
-     Audio_captureDelete();
-     Audio_playDelete();
-#endif
-
-    Chains_displayCtrlDeInit();
-
-    /* Print the HWI, SWI and all tasks load */
-    /* Reset the accumulated timer ticks */
-    Chains_prfLoadCalcEnable(FALSE, TRUE, FALSE);
-    //Utils_encdecHdvicpPrfPrint();
-
-    Chains_ipcBitsExit();
-    Chains_ipcFramesExit();
-
-}
-
diff --git a/dvr_rdk/demos/link_api_demos/vpss_video_chains/chains_multiChDucatiSystemUseCaseSwMs2_TriDisplay.c b/dvr_rdk/demos/link_api_demos/vpss_video_chains/chains_multiChDucatiSystemUseCaseSwMs2_TriDisplay.c
deleted file mode 100755
index 594427b..0000000
--- a/dvr_rdk/demos/link_api_demos/vpss_video_chains/chains_multiChDucatiSystemUseCaseSwMs2_TriDisplay.c
+++ /dev/null
@@ -1,490 +0,0 @@
-/*******************************************************************************
- *                                                                             *
- * Copyright (c) 2009 Texas Instruments Incorporated - http://www.ti.com/      *
- *                        ALL RIGHTS RESERVED                                  *
- *                                                                             *
- ******************************************************************************/
-
-#include <demos/link_api_demos/common/chains.h>
-#include <demos/graphic/graphic.h>
-
-#include <mcfw/interfaces/common_def/ti_vsys_common_def.h>
-
-
-/**
-                       Capture (YUV422I) 16CH D1 60fps
-                          |
-                         NSF (YUV420SP)
-                          |
-                        dup1-----IPCM3OUT(VPS)--IPCM3IN(VID)--ENC
-                          |                                    |
-                          +------IPCM3IN(VPS)--IPCM3OUT(VID)--DEC
-                          |
-                        MERGE
-                          |
-                         DUP2
-                         |||
-         +---------------+|+------------+
-         |                |             |
-         |                |             |
-      SW Mosaic       SW Mosaic        SW Moasic
-      (DEIH YUV422I)  (DEI YUV422I)    (SC5 YUV422I)
-         |                |             |
- GRPX0   |       GRPX1,2  |             |
-    |    |           |    |             |
-    On-Chip HDMI    Off-Chip HDMI  SDTV (NTSC)
-      1080p60         1080p60        480i60
-*/
-
-/* To enable or disable graphics in the application */
-#define ENABLE_GRPX 0
-
-/* To select if FBDEV interface is used for Graphics */
-#define USE_FBDEV   0
-
-static SystemVideo_Ivahd2ChMap_Tbl systemVid_encDecIvaChMapTbl =
-{
-    .isPopulated = 1,
-    .ivaMap[0] =
-    {
-        .EncNumCh  = 10,
-        .EncChList = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0 , 0, 0},
-        .DecNumCh  = 0,
-        .DecChList = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
-    },
-    .ivaMap[1] =
-    {
-        .EncNumCh  = 16,
-        .EncChList = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31},
-        .DecNumCh  = 12,
-        .DecChList = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0 , 0, 0},
-    },
-    .ivaMap[2] =
-    {
-        .EncNumCh  = 6,
-        .EncChList = {10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
-        .DecNumCh  = 4,
-        .DecChList = {12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
-    },
-};
-
-Void chains_multiChDucatiSystemUseCaseSwMsTriDisplay2(Chains_Ctrl *chainsCfg)
-{
-    CaptureLink_CreateParams    capturePrm;
-    NsfLink_CreateParams        nsfPrm;
-    DupLink_CreateParams        dup1Prm;
-    DupLink_CreateParams        dup2Prm;
-    static SwMsLink_CreateParams       swMsPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-    DisplayLink_CreateParams    displayPrm[CHAINS_SW_MS_MAX_DISPLAYS];
-    IpcLink_CreateParams        ipcOutVpssPrm;
-    IpcLink_CreateParams        ipcInVpssPrm;
-    IpcLink_CreateParams        ipcOutVideoPrm;
-    IpcLink_CreateParams        ipcInVideoPrm;
-    EncLink_CreateParams        encPrm;
-    DecLink_CreateParams        decPrm;
-    MergeLink_CreateParams      mergePrm;
-
-    CaptureLink_VipInstParams *pCaptureInstPrm;
-    CaptureLink_OutParams     *pCaptureOutPrm;
-
-    UInt32 captureId;
-    UInt32 nsfId;
-    UInt32 dup1Id, dup2Id, mergeId;
-    UInt32 encId, decId;
-    UInt32 swMsId[CHAINS_SW_MS_MAX_DISPLAYS];
-    UInt32 displayId[CHAINS_SW_MS_MAX_DISPLAYS];
-    UInt32 grpxId[CHAINS_SW_MS_MAX_DISPLAYS];
-    UInt32 ipcOutVpssId, ipcInVpssId;
-    UInt32 ipcOutVideoId, ipcInVideoId;
-
-    UInt32 vipInstId;
-    UInt32 i, numSubChains;
-
-    UInt32 numDisplay,  enableGrpx;
-    UInt32 displayRes[SYSTEM_DC_MAX_VENC];
-
-    Bool enabledup2;
-    Bool switchCh;
-    Bool switchLayout;
-
-    char ch;
-
-    CHAINS_INIT_STRUCT(CaptureLink_CreateParams, capturePrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVpssPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVpssPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcOutVideoPrm);
-    CHAINS_INIT_STRUCT(IpcLink_CreateParams,ipcInVideoPrm);
-    CHAINS_INIT_STRUCT(DecLink_CreateParams, decPrm);
-    CHAINS_INIT_STRUCT(EncLink_CreateParams, encPrm);
-    for (i = 0; i < CHAINS_SW_MS_MAX_DISPLAYS; i++)
-    {
-        CHAINS_INIT_STRUCT(DisplayLink_CreateParams,displayPrm[i]);
-        CHAINS_INIT_STRUCT(SwMsLink_CreateParams, swMsPrm[i]);
-    }
-
-    captureId    = SYSTEM_LINK_ID_CAPTURE;
-    nsfId        = SYSTEM_LINK_ID_NSF_0;
-    dup1Id       = SYSTEM_VPSS_LINK_ID_DUP_0;
-    dup2Id       = SYSTEM_VPSS_LINK_ID_DUP_1;
-    mergeId      = SYSTEM_VPSS_LINK_ID_MERGE_0;
-
-    ipcOutVpssId = SYSTEM_VPSS_LINK_ID_IPC_OUT_M3_0;
-    ipcInVideoId = SYSTEM_VIDEO_LINK_ID_IPC_IN_M3_0;
-    ipcOutVideoId= SYSTEM_VIDEO_LINK_ID_IPC_OUT_M3_0;
-    ipcInVpssId  = SYSTEM_VPSS_LINK_ID_IPC_IN_M3_0;
-
-    encId        = SYSTEM_LINK_ID_VENC_0;
-    decId        = SYSTEM_LINK_ID_VDEC_0;
-
-
-    swMsId[0]      = SYSTEM_LINK_ID_SW_MS_MULTI_INST_0;
-    swMsPrm[0].numSwMsInst = 1;
-    swMsPrm[0].swMsInstId[0] = SYSTEM_SW_MS_SC_INST_DEIHQ_SC;
-    swMsId[1]      = SYSTEM_LINK_ID_SW_MS_MULTI_INST_1;
-    swMsPrm[1].numSwMsInst = 1;
-    swMsPrm[1].swMsInstId[0] = SYSTEM_SW_MS_SC_INST_DEI_SC;
-    swMsId[2]      = SYSTEM_LINK_ID_SW_MS_MULTI_INST_2;
-    swMsPrm[2].numSwMsInst = 1;
-    swMsPrm[2].swMsInstId[0] = SYSTEM_SW_MS_SC_INST_SC5;
-
-    displayId[0] = SYSTEM_LINK_ID_DISPLAY_0; // OFF CHIP HDMI
-    displayId[1] = SYSTEM_LINK_ID_DISPLAY_1; // ON CHIP HDMI
-    displayId[2] = SYSTEM_LINK_ID_DISPLAY_2; // SDTV
-
-    grpxId[0]    = SYSTEM_LINK_ID_GRPX_0;
-    grpxId[1]    = SYSTEM_LINK_ID_GRPX_1;
-    grpxId[2]    = SYSTEM_LINK_ID_GRPX_2;
-
-    enableGrpx     = ENABLE_GRPX;
-    numDisplay     = 3;
-    memcpy(displayRes,chainsCfg->displayRes,sizeof(displayRes));
-    numSubChains   = 2;
-
-    enabledup2 = FALSE;
-    if(numDisplay>1)
-        enabledup2 = TRUE;
-
-    System_linkControl(
-        SYSTEM_LINK_ID_M3VIDEO,
-        SYSTEM_COMMON_CMD_SET_CH2IVAHD_MAP_TBL,
-        &systemVid_encDecIvaChMapTbl,
-        sizeof(SystemVideo_Ivahd2ChMap_Tbl),
-        TRUE
-    );
-
-    CaptureLink_CreateParams_Init(&capturePrm);
-
-    capturePrm.numVipInst    = 4;
-    capturePrm.outQueParams[0].nextLink = nsfId;
-    capturePrm.tilerEnable              = FALSE;
-
-    for(vipInstId=0; vipInstId<capturePrm.numVipInst; vipInstId++)
-    {
-        pCaptureInstPrm                     = &capturePrm.vipInst[vipInstId];
-        pCaptureInstPrm->vipInstId          = (SYSTEM_CAPTURE_INST_VIP0_PORTA+
-                                              vipInstId)%SYSTEM_CAPTURE_INST_MAX;
-        pCaptureInstPrm->videoDecoderId     = SYSTEM_DEVICE_VID_DEC_TVP5158_DRV;
-        pCaptureInstPrm->inDataFormat       = SYSTEM_DF_YUV422P;
-        pCaptureInstPrm->standard           = SYSTEM_STD_MUX_4CH_D1;
-        pCaptureInstPrm->numOutput          = 1;
-
-        pCaptureOutPrm                      = &pCaptureInstPrm->outParams[0];
-        pCaptureOutPrm->dataFormat          = SYSTEM_DF_YUV422I_YUYV;
-        pCaptureOutPrm->scEnable            = FALSE;
-        pCaptureOutPrm->scOutWidth          = 0;
-        pCaptureOutPrm->scOutHeight         = 0;
-        pCaptureOutPrm->outQueId            = 0;
-    }
-    chainsCfg->bypassNsf             = TRUE;
-    nsfPrm.bypassNsf                 = chainsCfg->bypassNsf;
-    nsfPrm.tilerEnable               = TRUE;
-    nsfPrm.inQueParams.prevLinkId    = captureId;
-    nsfPrm.inQueParams.prevLinkQueId = 0;
-    nsfPrm.numOutQue                 = 1;
-    nsfPrm.outQueParams[0].nextLink  = dup1Id;
-
-    dup1Prm.inQueParams.prevLinkId  = nsfId;
-    dup1Prm.inQueParams.prevLinkQueId   = 0;
-    dup1Prm.numOutQue                   = numSubChains;
-    dup1Prm.notifyNextLink              = TRUE;
-    dup1Prm.outQueParams[0].nextLink = ipcOutVpssId;
-    dup1Prm.outQueParams[1].nextLink = mergeId;
-
-    ipcOutVpssPrm.inQueParams.prevLinkId    = dup1Id;
-    ipcOutVpssPrm.inQueParams.prevLinkQueId = 1;
-    ipcOutVpssPrm.numOutQue                 = 1;
-    ipcOutVpssPrm.outQueParams[0].nextLink     = ipcInVideoId;
-    ipcOutVpssPrm.notifyNextLink            = FALSE;
-    ipcOutVpssPrm.notifyPrevLink            = TRUE;
-    ipcOutVpssPrm.noNotifyMode              = TRUE;
-
-    ipcInVideoPrm.inQueParams.prevLinkId    = ipcOutVpssId;
-    ipcInVideoPrm.inQueParams.prevLinkQueId = 0;
-    ipcInVideoPrm.numOutQue                 = 1;
-    ipcInVideoPrm.outQueParams[0].nextLink     = encId;
-    ipcInVideoPrm.notifyNextLink            = TRUE;
-    ipcInVideoPrm.notifyPrevLink            = FALSE;
-    ipcInVideoPrm.noNotifyMode              = TRUE;
-
-    for (i=0; i<16; i++) {
-        encPrm.chCreateParams[i].format     = IVIDEO_H264HP;
-        encPrm.chCreateParams[i].profile    = IH264_HIGH_PROFILE;
-        encPrm.chCreateParams[i].dataLayout = VCODEC_FIELD_SEPARATED;
-        encPrm.chCreateParams[i].fieldMergeEncodeEnable  = TRUE;
-        encPrm.chCreateParams[i].defaultDynamicParams.intraFrameInterval = 30;
-        encPrm.chCreateParams[i].encodingPreset = XDM_DEFAULT;
-        encPrm.chCreateParams[i].enableAnalyticinfo = 0;
-        encPrm.chCreateParams[i].enableWaterMarking = 0;
-        encPrm.chCreateParams[i].rateControlPreset =
-                                 IVIDEO_STORAGE;
-        encPrm.chCreateParams[i].defaultDynamicParams.inputFrameRate = 30;
-        encPrm.chCreateParams[i].defaultDynamicParams.targetBitRate =
-                                 (2 * 1000 * 1000);
-        encPrm.chCreateParams[i].defaultDynamicParams.interFrameInterval = 1;
-        encPrm.chCreateParams[i].defaultDynamicParams.mvAccuracy =
-                                 IVIDENC2_MOTIONVECTOR_QUARTERPEL;
-    }
-    encPrm.inQueParams.prevLinkId   = ipcInVideoId;
-    encPrm.inQueParams.prevLinkQueId= 0;
-    encPrm.outQueParams.nextLink = decId;
-
-    for (i=0; i<16; i++) {
-        decPrm.chCreateParams[i].format          = IVIDEO_H264HP;
-        decPrm.chCreateParams[i].profile         = IH264VDEC_PROFILE_ANY;
-        decPrm.chCreateParams[i].targetMaxWidth  = 720;
-        decPrm.chCreateParams[i].targetMaxHeight = 576;
-        decPrm.chCreateParams[i].processCallLevel= VDEC_FIELDLEVELPROCESSCALL;
-        decPrm.chCreateParams[i].defaultDynamicParams.targetFrameRate = 30;
-        decPrm.chCreateParams[i].defaultDynamicParams.targetBitRate =
-                                 (2 * 1000 * 1000);
-        decPrm.chCreateParams[i].tilerEnable = TRUE;
-    }
-    decPrm.inQueParams.prevLinkId = encId;
-    decPrm.inQueParams.prevLinkQueId = 0;
-    decPrm.outQueParams.nextLink     = ipcOutVideoId;
-
-    ipcOutVideoPrm.inQueParams.prevLinkId    = decId;
-    ipcOutVideoPrm.inQueParams.prevLinkQueId = 0;
-    ipcOutVideoPrm.numOutQue                 = 1;
-    ipcOutVideoPrm.outQueParams[0].nextLink     = ipcInVpssId;
-    ipcOutVideoPrm.notifyNextLink            = FALSE;
-    ipcOutVideoPrm.notifyPrevLink            = TRUE;
-    ipcOutVideoPrm.noNotifyMode              = TRUE;
-
-    ipcInVpssPrm.inQueParams.prevLinkId    = ipcOutVideoId;
-    ipcInVpssPrm.inQueParams.prevLinkQueId = 0;
-    ipcInVpssPrm.numOutQue                 = 1;
-    ipcInVpssPrm.outQueParams[0].nextLink     = mergeId;
-    ipcInVpssPrm.notifyNextLink            = TRUE;
-    ipcInVpssPrm.notifyPrevLink            = FALSE;
-    ipcInVpssPrm.noNotifyMode              = TRUE;
-
-    mergePrm.numInQue                     = numSubChains;
-    mergePrm.inQueParams[0].prevLinkId    = dup1Id;
-    mergePrm.inQueParams[0].prevLinkQueId = 0;
-    mergePrm.inQueParams[1].prevLinkId    = ipcInVpssId;
-    mergePrm.inQueParams[1].prevLinkQueId = 0;
-    mergePrm.notifyNextLink               = TRUE;
-
-    if(enabledup2)
-       mergePrm.outQueParams.nextLink        = dup2Id;
-    else
-       mergePrm.outQueParams.nextLink        = swMsId[0];
-
-    dup2Prm.inQueParams.prevLinkId      = mergeId;
-    dup2Prm.inQueParams.prevLinkQueId   = 0;
-    dup2Prm.numOutQue                   = numDisplay;
-    dup2Prm.notifyNextLink              = TRUE;
-
-
-    for(i=0; i<numDisplay; i++)
-    {
-        if(enabledup2)
-            swMsPrm[i].inQueParams.prevLinkId = dup2Id;
-        else
-            swMsPrm[i].inQueParams.prevLinkId = mergeId;
-
-        swMsPrm[i].inQueParams.prevLinkQueId = i;
-
-        swMsPrm[i].outQueParams.nextLink = displayId[i];
-
-        swMsPrm[i].lineSkipMode = TRUE;
-        swMsPrm[i].layoutPrm.outputFPS = 60;
-        swMsPrm[i].maxInputQueLen = SYSTEM_SW_MS_DEFAULT_INPUT_QUE_LEN;
-        swMsPrm[i].maxOutRes   = displayRes[i];
-
-        /* SDTV is @ 30fps */
-        if(i==2) {
-            swMsPrm[i].lineSkipMode = TRUE;
-            swMsPrm[i].layoutPrm.outputFPS = 30;
-            swMsPrm[i].maxOutRes         = VSYS_STD_NTSC;
-        }
-
-        Chains_swMsGenerateLayoutParams(i, 0, &swMsPrm[i]);
-
-
-        dup2Prm.outQueParams[i].nextLink = swMsId[i];
-
-        displayPrm[i].inQueParams[0].prevLinkId    = swMsId[i];
-        displayPrm[i].inQueParams[0].prevLinkQueId = 0;
-        displayPrm[i].displayRes                = swMsPrm[i].maxOutRes        ;
-    }
-
-    Chains_displayCtrlInit(displayRes);
-
-    System_linkCreate (captureId, &capturePrm, sizeof(capturePrm));
-    System_linkControl(captureId, CAPTURE_LINK_CMD_CONFIGURE_VIP_DECODERS, NULL, 0, TRUE);
-
-    System_linkCreate(nsfId     , &nsfPrm, sizeof(nsfPrm));
-    System_linkCreate(dup1Id     , &dup1Prm, sizeof(dup1Prm));
-    System_linkCreate(ipcOutVpssId , &ipcOutVpssPrm , sizeof(ipcOutVpssPrm) );
-    System_linkCreate(ipcInVideoId , &ipcInVideoPrm , sizeof(ipcInVideoPrm) );
-    System_linkCreate(encId, &encPrm, sizeof(encPrm));
-    System_linkCreate(decId, &decPrm, sizeof(decPrm));
-    System_linkCreate(ipcOutVideoId, &ipcOutVideoPrm, sizeof(ipcOutVideoPrm));
-    System_linkCreate(ipcInVpssId  , &ipcInVpssPrm  , sizeof(ipcInVpssPrm)  );
-    System_linkCreate(mergeId   , &mergePrm  , sizeof(mergePrm));
-
-    if(enabledup2)
-        System_linkCreate(dup2Id     , &dup2Prm, sizeof(dup2Prm));
-
-    for(i=0; i<numDisplay; i++)
-    {
-        System_linkCreate(swMsId[i], &swMsPrm[i], sizeof(swMsPrm[i]));
-        System_linkCreate(displayId[i], &displayPrm[i], sizeof(displayPrm[i]));
-    }
-
-    Chains_memPrintHeapStatus();
-    //Utils_encdecHdvicpPrfInit();
-
-    {
-        if(enableGrpx)
-        {
-#if USE_FBDEV
-            grpx_init(GRPX_FORMAT_RGB888);
-#else
-            for(i=0; i<numDisplay; i++)
-               Chains_grpxEnable(grpxId[i], TRUE);
-#endif
-        }
-
-        for(i=0; i<numDisplay; i++)
-        {
-            System_linkStart(displayId[i]);
-            System_linkStart(swMsId[i] );
-        }
-
-        if(enabledup2)
-            System_linkStart(dup2Id    );
-
-        System_linkStart(decId);
-        System_linkStart(encId);
-        System_linkStart(dup1Id    );
-
-        System_linkStart(nsfId    );
-
-        /* Start taking CPU load just before starting of links */
-        Chains_prfLoadCalcEnable(TRUE, FALSE, FALSE);
-
-        System_linkStart(captureId);
-        if(enableGrpx)
-        {
-#if USE_FBDEV
-            grpx_draw();
-#endif
-        }
-
-        while(1)
-        {
-            ch = Chains_menuRunTime();
-
-            switchLayout = FALSE;
-            switchCh = FALSE;
-
-            if(ch=='0')
-                break;
-            if(ch=='p')
-                System_linkControl(captureId,
-                       CAPTURE_LINK_CMD_PRINT_ADV_STATISTICS, NULL, 0, TRUE);
-            if(ch=='s')
-               switchLayout = TRUE;
-            if(ch=='c')
-               switchCh = TRUE;
-            if(ch=='i')
-            {
-                System_linkControl(encId,
-                       ENC_LINK_CMD_PRINT_IVAHD_STATISTICS, NULL, 0, TRUE);
-            }
-            if(ch=='m')
-            {
-                printf(" STATISTICS for SwMs with linkId: %d \n", swMsId[0]);
-                System_linkControl(swMsId[0],
-                       SYSTEM_SW_MS_LINK_CMD_PRINT_STATISTICS, NULL, 0, TRUE);
-                printf(" STATISTICS for SwMs with linkId: %d \n", swMsId[1]);
-                System_linkControl(swMsId[1],
-                       SYSTEM_SW_MS_LINK_CMD_PRINT_STATISTICS, NULL, 0, TRUE);
-            }
-            Chains_swMsSwitchLayout(swMsId, swMsPrm, switchLayout,
-                                    switchCh, numDisplay);
-        }
-
-        System_linkStop(captureId);
-        System_linkStop(nsfId    );
-        System_linkStop(dup1Id    );
-
-        System_linkStop(encId);
-        System_linkStop(decId);
-
-        if(enabledup2)
-            System_linkStop(dup2Id    );
-
-        for(i=0; i<numDisplay; i++)
-        {
-            System_linkStop(swMsId[i] );
-            System_linkStop(displayId[i]);
-        }
-
-          if(enableGrpx)
-        {
-#if USE_FBDEV
-            grpx_exit();
-#else
-            for(i=0; i<numDisplay; i++)
-                Chains_grpxEnable(grpxId[i], FALSE);
-#endif
-        }
-    }
-
-    System_linkDelete(captureId   );
-    System_linkDelete(nsfId       );
-
-    System_linkDelete(dup1Id       );
-    System_linkDelete(ipcOutVpssId );
-    System_linkDelete(ipcInVideoId );
-
-    System_linkDelete(encId);
-    System_linkDelete(decId);
-
-    System_linkDelete(ipcOutVideoId);
-    System_linkDelete(ipcInVpssId  );
-
-    System_linkDelete(mergeId);
-
-    if(enabledup2)
-        System_linkDelete(dup2Id       );
-    for(i=0; i<numDisplay; i++)
-    {
-        System_linkDelete(swMsId[i]);
-        System_linkDelete(displayId[i]);
-    }
-
-    Chains_displayCtrlDeInit();
-
-    /* Print the HWI, SWI and all tasks load */
-    /* Reset the accumulated timer ticks */
-    Chains_prfLoadCalcEnable(FALSE, TRUE, FALSE);
-    //Utils_encdecHdvicpPrfPrint();
-
-}
-
-
-- 
2.7.4

